"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Importing all the functions from ledger,
 * Starting with accounts the following script will go step by step to test the complete functionality
 * of the ledger
 */
const index_1 = require("./index");
describe('LEDGER TESTS: Account test suite', () => {
    // declaring global variables which have larger scope
    let id = '';
    let blockID = '';
    const accountCode = '03_ACC_01'; // random account code
    const accountNumber = '12345'; // random account number
    it('should create a new account', async () => {
        await index_1.createAccount({ 'currency': 'BTC', 'accountNumber': accountNumber, 'accountCode': accountCode, }).then(accountObj => {
            id = accountObj.id; // saving id for further functions
            expect(accountObj.active).toBe(true);
            expect(accountObj.currency).toBe('BTC');
            expect(accountObj.frozen).toBe(false);
        });
    });
    it('should get the account details via id', async () => {
        await index_1.getAccountById(id).then(fetchAccount => {
            console.log(fetchAccount); // printing the results
            expect(fetchAccount.active).toBe(true);
            expect(fetchAccount.accountCode).toBe(accountCode);
        });
    });
    it('should update the account', async () => {
        await index_1.updateAccount(id, ({ 'accountCode': accountCode, 'accountNumber': accountNumber })).then(fetchAccount => {
            console.log('updateObj', fetchAccount); // printing the results
        });
    });
    it('should create multiple new accounts', async () => {
        const accountsObj = await index_1.createAccounts({
            'accounts': [{ 'currency': 'BTC', 'accountNumber': '123', 'accountCode': accountCode }, { 'currency': 'BTC', 'accountNumber': '456', 'accountCode': accountCode }]
        });
        console.log(accountsObj);
        expect(accountsObj.length).toBe(2);
        accountsObj.forEach((o) => {
            expect(o.active).toBe(true); // checking a condition for a specific key in each element
        });
    });
    it('should get the blocked amounts via id', async () => {
        const fetchAccount = await index_1.getBlockedAmountsByAccountId(id);
        expect(fetchAccount.length).toBe(0); // block amounts should be zero in a new account
    });
    it('should block amount for an account', async () => {
        const fetchAccount = await index_1.blockAmount(id, { 'amount': '50000', 'type': 'DEBIT_CARD_OP', 'description': 'Card payment in the shop.' });
        blockID = fetchAccount.id;
        expect(fetchAccount.id).not.toBe(null); // returns id of the block amt
    });
    it('should delete block amount for an account', async () => {
        const fetchedAccount = await index_1.deleteBlockedAmount(blockID);
        expect(fetchedAccount).toBeUndefined(); // deletes the blocked amount
    });
    it('should return empty list again', async () => {
        const fetchAccount = await index_1.getBlockedAmountsByAccountId(id);
        expect(fetchAccount.length).toBe(0); // block amounts should be zero again as delete is called
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVkZ2VyLmFjY291bnQuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sZWRnZXIvbGVkZ2VyLmFjY291bnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7QUFDSCxtQ0FRZ0I7QUFFaEIsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtJQUM5QyxxREFBcUQ7SUFDckQsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ1gsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBQ2hCLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQSxDQUFDLHNCQUFzQjtJQUN0RCxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUEsQ0FBQyx3QkFBd0I7SUFFdEQsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3pDLE1BQU0scUJBQWEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEgsRUFBRSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUEsQ0FBQyxrQ0FBa0M7WUFDckQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDcEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDdkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDekMsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRCxNQUFNLHNCQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsSUFB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