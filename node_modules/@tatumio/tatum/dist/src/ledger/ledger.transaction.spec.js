"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const transaction_1 = require("./transaction");
describe('LEDGER TESTS: Transactions test suite', () => {
    let ref = ''; // using variable with global scope
    it('should be able to transfer balance', async () => {
        const accountObj = await transaction_1.storeTransaction({
            'senderAccountId': '603bddc9fbf47f7a279d76ca',
            'recipientAccountId': '603c04950476a57888bc4d02',
            'amount': '6',
            'anonymous': false,
            'compliant': false,
            'transactionCode': '1_01_EXTERNAL_CODE',
            'paymentId': '9625',
            'recipientNote': 'Private note',
            'baseRate': 1,
            'senderNote': 'Sender note'
        });
        ref = accountObj.reference;
        expect(accountObj.reference).not.toBe(null); // checking if value not null
    });
    it('should fail to find recipient in case of wrong id', async () => {
        try {
            const accountObj = await transaction_1.storeTransaction({
                'senderAccountId': '603bddc9fbf47f7a279d76ca',
                'recipientAccountId': 'wrong5712b55823de7ea82id',
                'amount': '5',
                'anonymous': false,
                'compliant': false,
                'transactionCode': '1_01_EXTERNAL_CODE',
                'paymentId': '9625',
                'recipientNote': 'Private note',
                'baseRate': 1,
                'senderNote': 'Sender note'
            });
            console.log(accountObj);
        }
        catch (e) {
            // checking negative test results
            expect(e.response.data.statusCode).toBe(403);
            expect(e.response.data.errorCode).toBe('recipientAccount.not.exists');
        }
    });
    it('should fail to send negative values', async () => {
        try {
            const accountObj = await transaction_1.storeTransaction({
                'senderAccountId': '603bddc9fbf47f7a279d76ca',
                'recipientAccountId': '603c04950476a57888bc4d02',
                'amount': '-5',
                'anonymous': false,
                'compliant': false,
                'transactionCode': '1_01_EXTERNAL_CODE',
                'paymentId': '9625',
                'recipientNote': 'Private note',
                'baseRate': 1,
                'senderNote': 'Sender note'
            });
            console.log(accountObj);
        }
        catch (e) {
            // checking negative test results
            console.log(JSON.stringify(e.response.data));
            expect(e.response.data.statusCode).toBe(400);
            expect(e.response.data.errorCode).toBe('validation.failed');
        }
    });
    it('should be able to get txn by ref', async () => {
        try {
            const accountObj = await transaction_1.getTransactionsByReference(ref);
            console.log(accountObj);
            expect(accountObj.length).toBe(2);
            expect(accountObj[0].operationType).toBe('PAYMENT');
            if (accountObj[0].amount === '-6') {
                expect(accountObj[0].transactionType).toBe('DEBIT_PAYMENT');
            }
            else {
                expect(accountObj[0].transactionType).toBe('CREDIT_PAYMENT');
            }
        }
        catch (e) {
            console.log(JSON.stringify(e.response.data));
        }
    });
    it('should be able to get txn by account', async () => {
        try {
            const accountObj = await transaction_1.getTransactionsByAccount({ id: '603bddc9fbf47f7a279d76ca' });
            expect(accountObj).not.toBeUndefined();
            expect(accountObj.length).not.toBe(0);
        }
        catch (e) {
            // return errors if any
            console.log(JSON.stringify(e.response.data));
        }
    });
    it('should be able to get txn by customer', async () => {
        try {
            const accountObj = await transaction_1.getTransactionsByCustomer({ id: '603ac80298706ca9c04994af' });
            expect(accountObj).not.toBeUndefined();
            expect(accountObj.length).not.toBe(0);
        }
        catch (e) {
            // return errors if any
            console.log(JSON.stringify(e.response.data));
        }
    });
    it('should fail to get txn by customer for non existant customer id', async () => {
        try {
            const accountObj = await transaction_1.getTransactionsByCustomer({ id: 'doesnotexistsca9c04994af' });
            expect(accountObj.length).toBe(0);
        }
        catch (e) {
            console.log(JSON.stringify(e.response.data));
        }
    });
    it('should be able to get txn by customers on whole ledger', async () => {
        const accountObj = await transaction_1.getTransactionsByLedger({});
        expect(accountObj).not.toBeUndefined();
        expect(accountObj.length).not.toBe(0);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVkZ2VyLnRyYW5zYWN0aW9uLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGVkZ2VyL2xlZGdlci50cmFuc2FjdGlvbi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0NBTXNCO0FBRXRCLFFBQVEsQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7SUFDbkQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFBLENBQUMsbUNBQW1DO0lBQ2hELEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRCxNQUFNLFVBQVUsR0FBRyxNQUFNLDhCQUFnQixDQUFDO1lBQ3RDLGlCQUFpQixFQUFFLDBCQUEwQjtZQUM3QyxvQkFBb0IsRUFBRSwwQkFBMEI7WUFDaEQsUUFBUSxFQUFFLEdBQUc7WUFDYixXQUFXLEVBQUUsS0FBSztZQUNsQixXQUFXLEVBQUUsS0FBSztZQUNsQixpQkFBaUIsRUFBRSxvQkFBb0I7WUFDdkMsV0FBVyxFQUFFLE1BQU07WUFDbkIsZUFBZSxFQUFFLGNBQWM7WUFDL0IsVUFBVSxFQUFFLENBQUM7WUFDYixZQUFZLEVBQUUsYUFBYTtTQUM5QixDQUFDLENBQUE7UUFDRixHQUFHLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQTtRQUMxQixNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyw2QkFBNkI7SUFDN0UsQ0FBQyxDQUFDLENBQUE7SUFDRixFQUFFLENBQUMsbURBQW1ELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0QsSUFBSTtZQUNBLE1BQU0sVUFBVSxHQUFHLE1BQU0sOEJBQWdCLENBQUM7Z0JBQ3RDLGlCQUFpQixFQUFFLDBCQUEwQjtnQkFDN0Msb0JBQW9CLEVBQUUsMEJBQTBCO2dCQUNoRCxRQUFRLEVBQUUsR0FBRztnQkFDYixXQUFXLEVBQUUsS0FBSztnQkFDbEIsV0FB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