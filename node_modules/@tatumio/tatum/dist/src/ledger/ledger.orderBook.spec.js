"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TradeType_1 = require("../model/request/TradeType");
const orderBook_1 = require("./orderBook");
describe('LEDGER TESTS: Trades test suite', () => {
    /*
    returns error validation failed
        {
        "statusCode": 400,
        "errorCode": "validation.failed",
        "message": "Request validation failed. Please see data for additional information.",
        "data": [...{}]
        }
    */
    it('should be able to trade between pairs', async () => {
        try {
            const accountObj = await orderBook_1.storeTrade({
                'type': TradeType_1.TradeType.BUY,
                'price': '8',
                'amount': '15',
                'pair': 'VC_demoVC/EUR',
                'currency1AccountId': '603bddc9fbf47f7a279d76ca',
                'currency2AccountId': '603c04950476a57888bc4d02',
                'feeAccountId': '603c04950476a57888bc4d02',
                'fee': 1.5
            });
            console.log(accountObj);
        }
        catch (e) {
            // return error if any
            console.log(JSON.stringify(e.response.data));
        }
    });
    it('should fail to validate using same ids in both accounts', async () => {
        try {
            const accountObj = await orderBook_1.storeTrade({
                'type': TradeType_1.TradeType.BUY,
                'price': '8650.4',
                'amount': '15000',
                'pair': 'VC_demoVC/EUR',
                'currency1AccountId': '603bddc9fbf47f7a279d76ca',
                'currency2AccountId': '603bddc9fbf47f7a279d76ca',
                'feeAccountId': '603bddc9fbf47f7a279d76ca',
                'fee': 1.5
            });
            // printing the results
            console.log(accountObj);
        }
        catch (e) {
            // return error if any
            console.log(e.response.data);
        }
    });
    it('should fail if using different ids and pair combination', async () => {
        try {
            const accountObj = await orderBook_1.storeTrade({
                'type': TradeType_1.TradeType.BUY,
                'price': '8650.4',
                'amount': '15000',
                'pair': 'BTC/EUR',
                'currency1AccountId': '603bddc9fbf47f7a279d76ca',
                'currency2AccountId': '603bddc9fbf47f7a279d76ca',
                'feeAccountId': '603bddc9fbf47f7a279d76ca',
                'fee': 1.5
            });
            console.log(accountObj);
        }
        catch (e) {
            // checking negative test cases
            expect(e.response.data.statusCode).toBe(403);
            expect(e.response.data.errorCode).toBe('trade.currency1.pair');
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVkZ2VyLm9yZGVyQm9vay5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xlZGdlci9sZWRnZXIub3JkZXJCb29rLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBcUQ7QUFDckQsMkNBQXVDO0FBRXZDLFFBQVEsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7SUFDN0M7Ozs7Ozs7O01BUUU7SUFDRixFQUFFLENBQUMsdUNBQXVDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsSUFBSTtZQUNBLE1BQU0sVUFBVSxHQUFHLE1BQU0sc0JBQVUsQ0FBQztnQkFDaEMsTUFBTSxFQUFFLHFCQUFTLENBQUMsR0FBRztnQkFDckIsT0FBTyxFQUFFLEdBQUc7Z0JBQ1osUUFBUSxFQUFFLElBQUk7Z0JBQ2QsTUFBTSxFQUFFLGVBQWU7Z0JBQ3ZCLG9CQUFvQixFQUFFLDBCQUEwQjtnQkFDaEQsb0JBQW9CLEVBQUUsMEJBQTBCO2dCQUNoRCxjQUFjLEVBQUUsMEJBQTBCO2dCQUMxQyxLQUFLLEVBQUUsR0FBRzthQUNiLENBQUMsQ0FBQTtZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDMUI7UUFDRCxPQUFPLENBQUMsRUFBRTtZQUNOLHNCQUFzQjtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1NBQy9DO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDRixFQUFFLENBQUMseURBQXlELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckUsSUFBSTtZQUNBLE1BQU0sVUFBVSxHQUFHLE1BQU0sc0JBQVUsQ0FBQztnQkFDaEMsTUFBTSxFQUFFLHFCQUFTLENBQUMsR0FBRztnQkFDckIsT0FBTyxFQUFFLFFBQVE7Z0JBQ2pCLFFBQVEsRUFBRSxPQUFPO2dCQUNqQixNQUFNLEVBQUUsZUFBZTtnQkFDdkIsb0JBQW9CLEVBQUUsMEJBQTBCO2dCQUNoRCxvQkFBb0IsRUFBRSwwQkFBMEI7Z0JBQ2hELGNBQWMsRUFBRSwwQkFBMEI7Z0JBQzFDLEtBQUssRUFBRSxHQUFHO2FBQ2IsQ0FBQyxDQUFBO1lBQ0YsdUJBQXVCO1lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7U0FDMUI7UUFDRCxPQUFPLENBQUMsRUFBRTtZQUNOLHNCQUFzQjtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDL0I7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyx5REFBeUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNyRSxJQUFJO1lBQ0EsTUFBTSxVQUFVLEdBQUcsTUFBTSxzQkFBVSxDQUFDO2dCQUNoQyxNQUFNLEVBQUUscUJBQVMsQ0FBQyxHQUFHO2dCQUNyQixPQUFPLEVBQUUsUUFBUTtnQkFDakIsUUFBUSxFQUFFLE9BQU87Z0JBQ2pCLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixvQkFBb0IsRUFBRSwwQkFBMEI7Z0JBQ2hELG9CQUFvQixFQUFFLDBCQUEwQjtnQkFDaEQsY0FBYyxFQUFFLDBCQUEwQjtnQkFDMUMsS0FBSyxFQUFFLEdBQUc7YUFDYixDQUFDLENBQUE7WUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQzFCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUiwrQkFBK0I7WUFDL0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM1QyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUE7U0FDakU7SUFDTCxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFBIn0=