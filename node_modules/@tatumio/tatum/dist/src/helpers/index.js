"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helperPrepareSCCall = exports.helperGetWeb3Client = exports.helperBroadcastTx = void 0;
const blockchain_1 = require("../blockchain");
const marketplace_1 = require("../contracts/marketplace");
const model_1 = require("../model");
const transaction_1 = require("../transaction");
const helperBroadcastTx = async (chain, txData, signatureId) => {
    switch (chain) {
        case model_1.Currency.CELO:
            return await blockchain_1.celoBroadcast(txData, signatureId);
        case model_1.Currency.ONE:
            return await blockchain_1.oneBroadcast(txData, signatureId);
        case model_1.Currency.ETH:
            return await blockchain_1.ethBroadcast(txData, signatureId);
        case model_1.Currency.BSC:
            return await blockchain_1.bscBroadcast(txData, signatureId);
        case model_1.Currency.MATIC:
            return await blockchain_1.polygonBroadcast(txData, signatureId);
        case model_1.Currency.KLAY:
            return await blockchain_1.klaytnBroadcast(txData, signatureId);
        case model_1.Currency.TRON:
            return await blockchain_1.tronBroadcast(txData, signatureId);
        default:
            throw new Error('Unsupported chain');
    }
};
exports.helperBroadcastTx = helperBroadcastTx;
const helperGetWeb3Client = (testnet, chain, provider) => {
    switch (chain) {
        case model_1.Currency.CELO:
            return transaction_1.getCeloClient(provider);
        case model_1.Currency.ONE:
            return transaction_1.prepareOneClient(testnet, provider);
        case model_1.Currency.XDC:
            return transaction_1.getXdcClient(provider);
        case model_1.Currency.ETH:
            return transaction_1.getClient(provider);
        case model_1.Currency.BSC:
            return transaction_1.getBscClient(provider);
        case model_1.Currency.MATIC:
            return transaction_1.preparePolygonClient(testnet, provider);
        case model_1.Currency.KLAY:
            return transaction_1.prepareKlaytnClient(testnet, provider);
        default:
            throw new Error('Unsupported chain');
    }
};
exports.helperGetWeb3Client = helperGetWeb3Client;
// eslint-disable-next-line @typescript-eslint/ban-types
const helperPrepareSCCall = async (testnet, body, clazz, methodName, params, methodSig, provider, abi = marketplace_1.listing.abi) => {
    let r;
    if (body.chain === model_1.Currency.CELO) {
        r = new model_1.CeloSmartContractMethodInvocation();
    }
    else {
        r = new model_1.SmartContractMethodInvocation();
    }
    r.fee = body.fee;
    r.nonce = body.nonce;
    r.fromPrivateKey = body.fromPrivateKey;
    r.signatureId = body.signatureId;
    r.index = body.index;
    r.amount = body.amount;
    r.contractAddress = body.contractAddress;
    r.methodName = methodName;
    r.params = params;
    r.methodABI = abi.find(a => a.name === r.methodName);
    switch (body.chain) {
        case model_1.Currency.CELO:
            return await transaction_1.prepareCeloSmartContractWriteMethodInvocation(testnet, Object.assign(Object.assign({}, r), { feeCurrency: body.feeCurrency || model_1.Currency.CELO }), provider);
        case model_1.Currency.ONE:
            return await transaction_1.prepareOneSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.XDC:
            return await transaction_1.prepareXdcSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.ETH:
            return await transaction_1.prepareSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.BSC:
            return await transaction_1.prepareBscSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.MATIC:
            return await transaction_1.preparePolygonSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.KLAY:
            return await transaction_1.prepareKlaytnSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.TRON:
            r.methodName = methodSig;
            return await transaction_1.prepareTronSmartContractInvocation(testnet, r, body.feeLimit, body.from, provider);
        default:
            throw new Error('Unsupported combination of inputs.');
    }
};
exports.helperPrepareSCCall = helperPrepareSCCall;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSw4Q0FRdUI7QUFDdkIsMERBQW1EO0FBQ25ELG9DQUFzRztBQUN0RyxnREFld0I7QUFHakIsTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLE1BQWMsRUFBRSxXQUFvQixFQUFFLEVBQUU7SUFDL0YsUUFBUSxLQUFLLEVBQUU7UUFDYixLQUFLLGdCQUFRLENBQUMsSUFBSTtZQUNoQixPQUFPLE1BQU0sMEJBQWEsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDbEQsS0FBSyxnQkFBUSxDQUFDLEdBQUc7WUFDZixPQUFPLE1BQU0seUJBQVksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakQsS0FBSyxnQkFBUSxDQUFDLEdBQUc7WUFDZixPQUFPLE1BQU0seUJBQVksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakQsS0FBSyxnQkFBUSxDQUFDLEdBQUc7WUFDZixPQUFPLE1BQU0seUJBQVksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakQsS0FBSyxnQkFBUSxDQUFDLEtBQUs7WUFDakIsT0FBTyxNQUFNLDZCQUFnQixDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyRCxLQUFLLGdCQUFRLENBQUMsSUFBSTtZQUNoQixPQUFPLE1BQU0sNEJBQWUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDcEQsS0FBSyxnQkFBUSxDQUFDLElBQUk7WUFDaEIsT0FBTyxNQUFNLDBCQUFhLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xEO1lBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQ3hDO0FBQ0gsQ0FBQyxDQUFDO0FBbkJXLFFBQUEsaUJBQWlCLHFCQW1C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