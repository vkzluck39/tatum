"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAddMultiTokenMinter = exports.prepareAddMultiTokenMinter = exports.transferMultiTokenBatch = exports.transferMultiToken = exports.burnMultiTokenBatch = exports.burnMultiToken = exports.mintMultiTokenBatch = exports.mintMultiToken = exports.deployMultiToken = exports.getMultiTokenMetadata = exports.getMultiTokenTransaction = exports.getMultiTokensBatchBalance = exports.getMultiTokensBalance = exports.getMultiTokenContractAddress = void 0;
const tatum_1 = require("../connector/tatum");
const erc1155_abi_1 = __importDefault(require("../contracts/erc1155/erc1155_abi"));
const helpers_1 = require("../helpers");
const model_1 = require("../model");
const transaction_1 = require("../transaction");
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MultiTokenGetContractAddress" target="_blank">Tatum API documentation</a>
 */
const getMultiTokenContractAddress = async (chain, txId) => tatum_1.get(`/v3/multitoken/address/${chain}/${txId}`);
exports.getMultiTokenContractAddress = getMultiTokenContractAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MultiTokenGetBalanceBatch" target="_blank">Tatum API documentation</a>
 */
const getMultiTokensBalance = async (chain, contractAddress, address, tokenId) => tatum_1.get(`/v3/multitoken/balance/${chain}/${contractAddress}/${address}/${tokenId}`);
exports.getMultiTokensBalance = getMultiTokensBalance;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MultiTokenGetBalance" target="_blank">Tatum API documentation</a>
 */
const getMultiTokensBatchBalance = async (chain, contractAddress, address, tokenIds) => tatum_1.get(`/v3/multitoken/balance/batch/${chain}/${contractAddress}?address=${address}&tokenId=${tokenIds}`);
exports.getMultiTokensBatchBalance = getMultiTokensBatchBalance;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MultiTokenGetTransaction" target="_blank">Tatum API documentation</a>
 */
const getMultiTokenTransaction = async (chain, txId) => tatum_1.get(`/v3/multitoken/transaction/${chain}/${txId}`);
exports.getMultiTokenTransaction = getMultiTokenTransaction;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MultiTokenGetMetadata" target="_blank">Tatum API documentation</a>
 */
const getMultiTokenMetadata = async (chain, contractAddress, tokenId) => tatum_1.get(`/v3/multitoken/metadata/${chain}/${contractAddress}/${tokenId}`);
exports.getMultiTokenMetadata = getMultiTokenMetadata;
/**
 * Deploy MultiTokens (1155) contract.
 * @param testnet if we use testnet or not
 * @param body body of the request
 * @param provider optional provider do broadcast tx
 */
const deployMultiToken = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloDeployMultiTokenTransaction(testnet, body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonDeployMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnDeployMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneDeployMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendEthDeployMultiTokenTransaction(body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBscDeployMultiTokenTransaction(body, provider);
    }
};
exports.deployMultiToken = deployMultiToken;
/**
 * Mint MultiTokens (1155)
 * @param testnet if we use testnet or not
 * @param body body of the request
 * @param provider optional provider do broadcast tx
 */
const mintMultiToken = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloMintMultiTokenTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendEthMintMultiTokenTransaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonMintMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnMintMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneMintMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBscMintMultiTokenTransaction(body, provider);
        case model_1.Currency.ALGO:
            return transaction_1.sendAlgoCreateFractionalNFTSignedTransaction(testnet, body, provider);
    }
};
exports.mintMultiToken = mintMultiToken;
/**
 * Mint MultiTokens (1155) in a batch call.
 * @param testnet if we use testnet or not
 * @param body body of the request
 * @param provider optional provider do broadcast tx
 */
const mintMultiTokenBatch = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloMintMultiTokenBatchTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendEthMintMultiTokenBatchTransaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonMintMultiTokenBatchSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnMintMultiTokenBatchSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneMintMultiTokenBatchSignedTransaction(testnet, body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBscMintMultiTokenBatchTransaction(body, provider);
    }
};
exports.mintMultiTokenBatch = mintMultiTokenBatch;
/**
 * Burn MultiTokens (1155).
 * @param testnet if we use testnet or not
 * @param body body of the request
 * @param provider optional provider do broadcast tx
 */
const burnMultiToken = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloBurnMultiTokenTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendEthBurnMultiTokenTransaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonBurnMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnBurnMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneBurnMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBscBurnMultiTokenTransaction(body, provider);
        case model_1.Currency.ALGO:
            return transaction_1.sendAlgoBurnFractionalNFTSignedTransaction(testnet, body, provider);
    }
};
exports.burnMultiToken = burnMultiToken;
/**
 * Burn MultiTokens (1155) in a batch call.
 * @param testnet if we use testnet or not
 * @param body body of the request
 * @param provider optional provider do broadcast tx
 */
const burnMultiTokenBatch = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloBurnMultiTokenBatchTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendEthBurnBatchMultiTokenTransaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonBurnMultiTokenBatchSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnBurnMultiTokenBatchSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneBurnMultiTokenBatchSignedTransaction(testnet, body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBscBurnBatchMultiTokenTransaction(body, provider);
    }
};
exports.burnMultiTokenBatch = burnMultiTokenBatch;
/**
 * Transfer MultiTokens (1155).
 * @param testnet if we use testnet or not
 * @param body body of the request
 * @param provider optional provider do broadcast tx
 */
const transferMultiToken = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloTransferMultiTokenTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendEthMultiTokenTransaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonTransferMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnTransferMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneTransferMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBscMultiTokenTransaction(body, provider);
        case model_1.Currency.ALGO:
            return transaction_1.sendAlgoTransferFractionalNFTSignedTransaction(testnet, body, provider);
    }
};
exports.transferMultiToken = transferMultiToken;
/**
 * Transfer MultiTokens (1155) in a batch call.
 * @param testnet if we use testnet or not
 * @param body body of the request
 * @param provider optional provider do broadcast tx
 */
const transferMultiTokenBatch = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloTransferMultiTokenBatchTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendEthMultiTokenBatchTransaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.preparePolygonBatchTransferMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.prepareKlaytnBatchTransferMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.prepareOneBatchTransferMultiTokenSignedTransaction(testnet, body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBscMultiTokenBatchTransaction(body, provider);
    }
};
exports.transferMultiTokenBatch = transferMultiTokenBatch;
/**
 * Prepare add new minter to the MultiToken (1155) contract transaction.
 * @param testnet if we use testnet or not
 * @param body body of the add minter request
 * @param provider optional provider do broadcast tx
 */
const prepareAddMultiTokenMinter = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.AddMinter);
    const params = ['0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6', body.minter];
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.AddMinter, 'grantRole', params, undefined, provider, erc1155_abi_1.default);
};
exports.prepareAddMultiTokenMinter = prepareAddMultiTokenMinter;
/**
 * Add new minter to the MultiToken (1155) contract.
 * @param testnet if we use testnet or not
 * @param body body of the add minter request
 * @param provider optional provider do broadcast tx
 */
const sendAddMultiTokenMinter = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAddMultiTokenMinter(testnet, body, provider), body.signatureId);
exports.sendAddMultiTokenMinter = sendAddMultiTokenMinter;
//# sourceMappingURL=data:application/json;base64,