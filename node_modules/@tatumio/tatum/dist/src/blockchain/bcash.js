"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bcashGetTransaction = exports.bcashGetTxForAccount = exports.bcashGetBlockHash = exports.bcashGetBlock = exports.bcashGetCurrentBlock = exports.bcashBroadcast = void 0;
const tatum_1 = require("../connector/tatum");
/**
 * Broadcasts signed transaction to the Bch blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BchBroadcast" target="_blank">Tatum API documentation</a>
 */
const bcashBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/bcash/broadcast`, { txData, signatureId });
exports.bcashBroadcast = bcashBroadcast;
/**
 * Returns information about Bch blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BchGetBlockChainInfo" target="_blank">Tatum API documentation</a>
 */
const bcashGetCurrentBlock = async () => tatum_1.get(`/v3/bcash/info`);
exports.bcashGetCurrentBlock = bcashGetCurrentBlock;
/**
 * Returns block by its hash from Bch blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BchGetBlock" target="_blank">Tatum API documentation</a>
 */
const bcashGetBlock = async (hash) => tatum_1.get(`/v3/bcash/block/${hash}`);
exports.bcashGetBlock = bcashGetBlock;
/**
 * Returns block hash by index from Bch blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BchGetBlockHash" target="_blank">Tatum API documentation</a>
 */
const bcashGetBlockHash = async (i) => tatum_1.get(`/v3/bcash/block/hash/${i}`);
exports.bcashGetBlockHash = bcashGetBlockHash;
/**
 * Returns transactions for address from Bch blockchain. <br>
 *
 * @param address For which address will be transactions returned.
 * @param skip Offset how many transactions will be skipped.
 *
 * For more details, see <a href="https://tatum.io/apidoc#operation/BchGetTxByAddress" target="_blank">Tatum API documentation</a>
 */
const bcashGetTxForAccount = async (address, skip = 0) => tatum_1.get(`/v3/bcash/transaction/address/${address}?skip=${skip}`);
exports.bcashGetTxForAccount = bcashGetTxForAccount;
/**
 * Returns transaction by hash from Bch blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BchGetRawTransaction" target="_blank">Tatum API documentation</a>
 */
const bcashGetTransaction = async (hash) => tatum_1.get(`/v3/bcash/transaction/${hash}`);
exports.bcashGetTransaction = bcashGetTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNhc2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmxvY2tjaGFpbi9iY2FzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFHOUM7OztHQUdHO0FBQ0ksTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxXQUFvQixFQUE0QixFQUFFLENBQ3JHLFlBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0FBRHpDLFFBQUEsY0FBYyxrQkFDMkI7QUFFdEQ7OztHQUdHO0FBQ0ksTUFBTSxvQkFBb0IsR0FBRyxLQUFLLElBQXNCLEVBQUUsQ0FBQyxXQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUExRSxRQUFBLG9CQUFvQix3QkFBc0Q7QUFFdkY7OztHQUdHO0FBQ0ksTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBcUIsRUFBRSxDQUFDLFdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUF6RixRQUFBLGFBQWEsaUJBQTRFO0FBRXRHOzs7R0FHRztBQUNJLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxFQUFFLENBQVMsRUFBc0IsRUFBRSxDQUFDLFdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUE3RixRQUFBLGlCQUFpQixxQkFBNEU7QUFFMUc7Ozs7Ozs7R0FPRztBQUNJLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFvQixFQUFFLENBQ3hGLFdBQUcsQ0FBQyxpQ0FBaUMsT0FBTyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUE7QUFEakQsUUFBQSxvQkFBb0Isd0JBQzZCO0FBRTlEOzs7R0FHRztBQUNJLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBa0IsRUFBRSxDQUFDLFdBQUcsQ0FBQyx5QkFBeUIsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUFsRyxRQUFBLG1CQUFtQix1QkFBK0UifQ==