"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaGetAccountsByAddress = exports.adaGetUtxos = exports.adaGetTransactionsByAccount = exports.adaGetTransaction = exports.adaGetBlock = exports.adaGetBlockChainInfo = exports.adaBroadcast = void 0;
const tatum_1 = require("../connector/tatum");
/**
 * Broadcasts signed transaction to the Ada blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/AdaBroadcast" target="_blank">Tatum API documentation</a>
 *
 * @param txData
 * @param signatureId
 */
const adaBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/ada/broadcast`, { txData, signatureId });
exports.adaBroadcast = adaBroadcast;
/**
 * Returns information about Ada blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/AdaGetBlockChainInfo" target="_blank">Tatum API documentation</a>
 */
const adaGetBlockChainInfo = async () => tatum_1.get(`/v3/ada/info`);
exports.adaGetBlockChainInfo = adaGetBlockChainInfo;
/**
 * Returns block by its hash from Ada blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/AdaGetBlock" target="_blank">Tatum API documentation</a>
 */
const adaGetBlock = async (hash) => tatum_1.get(`/v3/ada/block/${hash}`);
exports.adaGetBlock = adaGetBlock;
/**
 * Returns transaction by hash from Ada blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/AdaGetRawTransaction" target="_blank">Tatum API documentation</a>
 */
const adaGetTransaction = async (hash) => tatum_1.get(`/v3/ada/transaction/${hash}`);
exports.adaGetTransaction = adaGetTransaction;
/**
 * Returns transactions by address from Ada blockchain. <br>
 *
 * @param address For which address will be transactions returned.
 * @param limit How many transactions will be returned. Max number of transactions per page is 50.
 * @param offset Offset to obtain the next page of data.
 *
 * For more details, see <a href="https://tatum.io/apidoc#operation/AdaGetTxByAddress" target="_blank">Tatum API documentation</a>
 */
const adaGetTransactionsByAccount = async (address, pageSize = 50, offset = 0) => tatum_1.get(`/v3/ada/transaction/address/${address}?pageSize=${pageSize}&offset=${offset}`);
exports.adaGetTransactionsByAccount = adaGetTransactionsByAccount;
/**
 * Returns UTXOs by address from Ada blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/AdaGetTxByAddress" target="_blank">Tatum API documentation</a>
 */
const adaGetUtxos = async (address) => tatum_1.get(`/v3/ada/${address}/utxos`);
exports.adaGetUtxos = adaGetUtxos;
/**
 * Returns account balances for a given address <br>
 *
 * For more details, see <a href="https://tatum.io/apidoc#operation/AdaGetAccount" target="_blank">Tatum API documentation</a>
 */
const adaGetAccountsByAddress = async (address) => tatum_1.get(`/v3/ada/account/${address}`);
exports.adaGetAccountsByAddress = adaGetAccountsByAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vYWRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE0QztBQUc1Qzs7Ozs7O0dBTUc7QUFDSSxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQUUsTUFBYyxFQUFFLFdBQW9CLEVBQTRCLEVBQUUsQ0FDakcsWUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUMsTUFBTSxFQUFFLFdBQVcsRUFBQyxDQUFDLENBQUE7QUFEdkMsUUFBQSxZQUFZLGdCQUMyQjtBQUVwRDs7O0dBR0c7QUFDSSxNQUFNLG9CQUFvQixHQUFHLEtBQUssSUFBZ0MsRUFBRSxDQUFDLFdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUFsRixRQUFBLG9CQUFvQix3QkFBOEQ7QUFFL0Y7OztHQUdHO0FBQ0ksTUFBTSxXQUFXLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBcUIsRUFBRSxDQUFDLFdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUFyRixRQUFBLFdBQVcsZUFBMEU7QUFFbEc7OztHQUdHO0FBQ0ksTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUEyQixFQUFFLENBQUMsV0FBRyxDQUFDLHVCQUF1QixJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQXZHLFFBQUEsaUJBQWlCLHFCQUFzRjtBQUVwSDs7Ozs7Ozs7R0FRRztBQUNJLE1BQU0sMkJBQTJCLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQTZCLEVBQUUsQ0FDekgsV0FBRyxDQUFDLCtCQUErQixPQUFPLGFBQWEsUUFBUSxXQUFXLE1BQU0sRUFBRSxDQUFDLENBQUE7QUFEeEUsUUFBQSwyQkFBMkIsK0JBQzZDO0FBRXJGOzs7R0FHRztBQUNJLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxPQUFlLEVBQXNCLEVBQUUsQ0FBQyxXQUFHLENBQUMsV0FBVyxPQUFPLFFBQVEsQ0FBQyxDQUFBO0FBQTVGLFFBQUEsV0FBVyxlQUFpRjtBQUV6Rzs7OztHQUlHO0FBQ0ksTUFBTSx1QkFBdUIsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUF5QixFQUFFLENBQUMsV0FBRyxDQUFDLG1CQUFtQixPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBQTdHLFFBQUEsdUJBQXVCLDJCQUFzRiJ9