"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.celoGetTransaction = exports.celoGetAccountBalance = exports.celoGetBlock = exports.celoGetCurrentBlock = exports.celoGetTransactionsCount = exports.celoBroadcast = void 0;
const tatum_1 = require("../connector/tatum");
/**
 * Broadcasts signed transaction to the Celo blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/CeloBroadcast" target="_blank">Tatum API documentation</a>
 */
const celoBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/celo/broadcast`, {
    txData,
    signatureId
});
exports.celoBroadcast = celoBroadcast;
/**
 * Returns a number of outgoing transactions for the address from Celo blockchain. <br>
 * When a transaction is sent, there can be multiple outgoing transactions, which are not yet processed by the blockchain.
 * To distinguish between them, there is a counter called a nonce, which represents the order of the transaction in the list of outgoing transactions.
 * For more details, see <a href="https://tatum.io/apidoc#operation/CeloGetTransactionCount" target="_blank">Tatum API documentation</a>
 */
const celoGetTransactionsCount = async (address) => tatum_1.get(`/v3/celo/transaction/count/${address}`);
exports.celoGetTransactionsCount = celoGetTransactionsCount;
/**
 * Returns information about Celo blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/CeloGetCurrentBlock" target="_blank">Tatum API documentation</a>
 */
const celoGetCurrentBlock = async () => tatum_1.get(`/v3/celo/block/current`);
exports.celoGetCurrentBlock = celoGetCurrentBlock;
/**
 * Returns block by its hash from Celo blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/CeloGetBlock" target="_blank">Tatum API documentation</a>
 */
const celoGetBlock = async (hash) => tatum_1.get(`/v3/celo/block/${hash}`);
exports.celoGetBlock = celoGetBlock;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/CeloGetBalance" target="_blank">Tatum API documentation</a>
 */
const celoGetAccountBalance = async (address) => {
    return await tatum_1.get(`/v3/celo/account/balance/${address}`);
};
exports.celoGetAccountBalance = celoGetAccountBalance;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/CeloGetTransaction" target="_blank">Tatum API documentation</a>
 */
const celoGetTransaction = async (hash) => tatum_1.get(`/v3/celo/transaction/${hash}`);
exports.celoGetTransaction = celoGetTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Vsby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2NlbG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsOENBQTRDO0FBRzVDOzs7R0FHRztBQUNJLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsV0FBb0IsRUFBNEIsRUFBRSxDQUFDLFlBQUksQ0FBQyxvQkFBb0IsRUFBRTtJQUM5SCxNQUFNO0lBQ04sV0FBVztDQUNkLENBQUMsQ0FBQTtBQUhXLFFBQUEsYUFBYSxpQkFHeEI7QUFFRjs7Ozs7R0FLRztBQUNJLE1BQU0sd0JBQXdCLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBbUIsRUFBRSxDQUFDLFdBQUcsQ0FBQyw4QkFBOEIsT0FBTyxFQUFFLENBQUMsQ0FBQTtBQUFuSCxRQUFBLHdCQUF3Qiw0QkFBMkY7QUFFaEk7OztHQUdHO0FBQ0ksTUFBTSxtQkFBbUIsR0FBRyxLQUFLLElBQXFCLEVBQUUsQ0FBQyxXQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtBQUFoRixRQUFBLG1CQUFtQix1QkFBNkQ7QUFFN0Y7OztHQUdHO0FBQ0ksTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBa0IsRUFBRSxDQUFDLFdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUFwRixRQUFBLFlBQVksZ0JBQXdFO0FBRWpHOztHQUVHO0FBQ0ksTUFBTSxxQkFBcUIsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFpRCxFQUFFO0lBQzFHLE9BQU8sTUFBTSxXQUFHLENBQUMsNEJBQTRCLE9BQU8sRUFBRSxDQUFDLENBQUE7QUFDM0QsQ0FBQyxDQUFBO0FBRlksUUFBQSxxQkFBcUIseUJBRWpDO0FBRUQ7O0dBRUc7QUFDSSxNQUFNLGtCQUFrQixHQUFHLEtBQUssRUFBRSxJQUFZLEVBQXdCLEVBQUUsQ0FBQyxXQUFHLENBQUMsd0JBQXdCLElBQUksRUFBRSxDQUFDLENBQUE7QUFBdEcsUUFBQSxrQkFBa0Isc0JBQW9GIn0=