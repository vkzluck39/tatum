"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bscEstimateGas = exports.bscGetTransaction = exports.bscGetAccountBep20Address = exports.bscGetAccountBalance = exports.bscGetBlock = exports.bscGetCurrentBlock = exports.bscGetTransactionsCount = exports.bscBroadcast = void 0;
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
/**
 * Broadcasts signed transaction to the Bsc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscBroadcast" target="_blank">Tatum API documentation</a>
 */
const bscBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/bsc/broadcast`, { txData, signatureId });
exports.bscBroadcast = bscBroadcast;
/**
 * Returns a number of outgoing BSC transactions for the address from Bsc blockchain. <br>
 * When a transaction is sent, there can be multiple outgoing transactions, which are not yet processed by the blockchain.
 * To distinguish between them, there is a counter called a nonce, which represents the order of the transaction in the list of outgoing transactions. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscGetTransactionCount" target="_blank">Tatum API documentation</a>
 */
const bscGetTransactionsCount = async (address) => tatum_1.get(`/v3/bsc/transaction/count/${address}`);
exports.bscGetTransactionsCount = bscGetTransactionsCount;
/**
 * Returns information about Bsc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscGetCurrentBlock" target="_blank">Tatum API documentation</a>
 */
const bscGetCurrentBlock = async () => tatum_1.get(`/v3/bsc/block/current`);
exports.bscGetCurrentBlock = bscGetCurrentBlock;
/**
 * Returns block by its hash from Bsc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscGetBlock" target="_blank">Tatum API documentation</a>
 */
const bscGetBlock = async (hash) => tatum_1.get(`/v3/bsc/block/${hash}`);
exports.bscGetBlock = bscGetBlock;
/**
 * Returns balance on address from Bsc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscGetBalance" target="_blank">Tatum API documentation</a>
 */
const bscGetAccountBalance = async (address) => tatum_1.get(`/v3/bsc/account/balance/${address}`);
exports.bscGetAccountBalance = bscGetAccountBalance;
/**
 * TODO: This endpoint dont exists? @SamuelSramko
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscBep20GetBalance" target="_blank">Tatum API documentation</a>
 */
const bscGetAccountBep20Address = async (address, contractAddress) => tatum_1.get(`/v3/bsc/account/balance/bep20/${address}?contractAddress=${contractAddress}`);
exports.bscGetAccountBep20Address = bscGetAccountBep20Address;
/**
 * Returns transaction by hash from Bsc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscGetTransaction" target="_blank">Tatum API documentation</a>
 */
const bscGetTransaction = async (hash) => tatum_1.get(`/v3/bsc/transaction/${hash}`);
exports.bscGetTransaction = bscGetTransaction;
/**
 * Returns gasLimit and gasPrice estimation of the transaction from Bsc blockchain. <br>
 * Gas price is obtained from https://explorer.bitquery.io/bsc/gas. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BscEstimateGas" target="_blank">Tatum API documentation</a>
 */
const bscEstimateGas = (body) => tatum_1.post('/v3/bsc/gas', body, model_1.EstimateGasEth);
exports.bscEstimateGas = bscEstimateGas;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnNjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vYnNjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDhDQUE0QztBQUM1QyxvQ0FBeUY7QUFFekY7OztHQUdHO0FBQ0ksTUFBTSxZQUFZLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxXQUFvQixFQUE0QixFQUFFLENBQ2pHLFlBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUMsQ0FBQyxDQUFBO0FBRHZDLFFBQUEsWUFBWSxnQkFDMkI7QUFFcEQ7Ozs7O0dBS0c7QUFDSSxNQUFNLHVCQUF1QixHQUFHLEtBQUssRUFBRSxPQUFlLEVBQW1CLEVBQUUsQ0FBQyxXQUFHLENBQUMsNkJBQTZCLE9BQU8sRUFBRSxDQUFDLENBQUE7QUFBakgsUUFBQSx1QkFBdUIsMkJBQTBGO0FBRTlIOzs7R0FHRztBQUNJLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxJQUFxQixFQUFFLENBQUMsV0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUE7QUFBOUUsUUFBQSxrQkFBa0Isc0JBQTREO0FBRTNGOzs7R0FHRztBQUNJLE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxJQUFZLEVBQXFCLEVBQUUsQ0FBQyxXQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUE7QUFBckYsUUFBQSxXQUFXLGVBQTBFO0FBRWxHOzs7R0FHRztBQUNJLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBc0IsRUFBRSxDQUFDLFdBQUcsQ0FBQywyQkFBMkIsT0FBTyxFQUFFLENBQUMsQ0FBQTtBQUEvRyxRQUFBLG9CQUFvQix3QkFBMkY7QUFFNUg7OztHQUdHO0FBQ0ksTUFBTSx5QkFBeUIsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLGVBQXVCLEVBQW1CLEVBQUUsQ0FDekcsV0FBRyxDQUFDLGlDQUFpQyxPQUFPLG9CQUFvQixlQUFlLEVBQUUsQ0FBQyxDQUFBO0FBRHpFLFFBQUEseUJBQXlCLDZCQUNnRDtBQUV0Rjs7O0dBR0c7QUFDSSxNQUFNLGlCQUFpQixHQUFHLEtBQUssRUFBRSxJQUFZLEVBQWtCLEVBQUUsQ0FBQyxXQUFHLENBQUMsdUJBQXVCLElBQUksRUFBRSxDQUFDLENBQUE7QUFBOUYsUUFBQSxpQkFBaUIscUJBQTZFO0FBRTNHOzs7O0dBSUc7QUFDSSxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQW9CLEVBQTJCLEVBQUUsQ0FBQyxZQUFJLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxzQkFBYyxDQUFDLENBQUE7QUFBN0csUUFBQSxjQUFjLGtCQUErRiJ9