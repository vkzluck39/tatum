"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.btcGetTransaction = exports.btcGetTxForAccount = exports.btcGetUTXO = exports.btcGetBlockHash = exports.btcGetBlock = exports.btcGetBalance = exports.btcGetCurrentBlock = exports.btcBroadcast = void 0;
const tatum_1 = require("../connector/tatum");
/**
 * Broadcasts signed transaction to the Btc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcBroadcast" target="_blank">Tatum API documentation</a>
 */
const btcBroadcast = async (txData, signatureId) => tatum_1.post(`/v3/bitcoin/broadcast`, { txData, signatureId });
exports.btcBroadcast = btcBroadcast;
/**
 * Returns information about Btc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcGetBlockChainInfo" target="_blank">Tatum API documentation</a>
 */
const btcGetCurrentBlock = async () => tatum_1.get('/v3/bitcoin/info');
exports.btcGetCurrentBlock = btcGetCurrentBlock;
/**
 * Returns balance on address from Btc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcGetBalanceOfAddress" target="_blank">Tatum API documentation</a>
 */
const btcGetBalance = async (address) => tatum_1.get(`/v3/bitcoin/address/balance/${address}`);
exports.btcGetBalance = btcGetBalance;
/**
 * Returns block by its hash from Btc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcGetBlock" target="_blank">Tatum API documentation</a>
 */
const btcGetBlock = async (hash) => tatum_1.get(`/v3/bitcoin/block/${hash}`);
exports.btcGetBlock = btcGetBlock;
/**
 * Returns block hash by index from Btc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcGetBlockHash" target="_blank">Tatum API documentation</a>
 */
const btcGetBlockHash = async (i) => tatum_1.get(`/v3/bitcoin/block/hash/${i}`);
exports.btcGetBlockHash = btcGetBlockHash;
/**
 * Returns the UTXO of given transaction and output index from Btc blockchain. <br>
 *
 * UTXO means Unspent Transaction Output, which in blockchain terminology means assets that a user has received at a specific address and has not yet spent.
 * In bitcoin-like blockchains (BTC, LTC, DOGE, BCH), every transaction is built from a list of previously unspent transactions connected to the address.
 * If a user owns address A, and receives 10 BTC in transaction T1, they can spend a UTXO T1 with a total value of 10 BTC in the next transaction.
 * The user can spend multiple UTXOs from different addresses in one transaction.
 *
 * @param hash Transaction hash.
 * @param i Index of tx output to check if it has been spent or not.
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcGetUTXO" target="_blank">Tatum API documentation</a>
 */
const btcGetUTXO = async (hash, i) => tatum_1.get(`/v3/bitcoin/utxo/${hash}/${i}`);
exports.btcGetUTXO = btcGetUTXO;
/**
 * Returns transactions by address from Btc blockchain. <br>
 *
 * @param address For which address will be transactions returned.
 * @param pageSize How many transactions will be returned. Max number of transactions per page is 50.
 * @param offset Offset to obtain the next page of data.
 *
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcGetTxByAddress" target="_blank">Tatum API documentation</a>
 */
const btcGetTxForAccount = async (address, pageSize = 50, offset = 0) => tatum_1.get(`/v3/bitcoin/transaction/address/${address}?pageSize=${pageSize}&offset=${offset}`);
exports.btcGetTxForAccount = btcGetTxForAccount;
/**
 * Returns transaction by hash from Btc blockchain. <br>
 * For more details, see <a href="https://tatum.io/apidoc#operation/BtcGetRawTransaction" target="_blank">Tatum API documentation</a>
 */
const btcGetTransaction = async (hash) => tatum_1.get(`/v3/bitcoin/transaction/${hash}`);
exports.btcGetTransaction = btcGetTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0Y29pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2JpdGNvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBRzlDOzs7R0FHRztBQUNJLE1BQU0sWUFBWSxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsV0FBb0IsRUFBNEIsRUFBRSxDQUNuRyxZQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtBQUQzQyxRQUFBLFlBQVksZ0JBQytCO0FBRXhEOzs7R0FHRztBQUNJLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxJQUFzQixFQUFFLENBQUMsV0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFBMUUsUUFBQSxrQkFBa0Isc0JBQXdEO0FBRXZGOzs7R0FHRztBQUNJLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxPQUFlLEVBQW1ELEVBQUUsQ0FBQyxXQUFHLENBQUMsK0JBQStCLE9BQU8sRUFBRSxDQUFDLENBQUE7QUFBekksUUFBQSxhQUFhLGlCQUE0SDtBQUV0Sjs7O0dBR0c7QUFDSSxNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFxQixFQUFFLENBQUMsV0FBRyxDQUFDLHFCQUFxQixJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQXpGLFFBQUEsV0FBVyxlQUE4RTtBQUV0Rzs7O0dBR0c7QUFDSSxNQUFNLGVBQWUsR0FBRyxLQUFLLEVBQUUsQ0FBUyxFQUFzQixFQUFFLENBQUMsV0FBRyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQTdGLFFBQUEsZUFBZSxtQkFBOEU7QUFFMUc7Ozs7Ozs7Ozs7O0dBV0c7QUFDSSxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFFLENBQVMsRUFBb0IsRUFBRSxDQUFDLFdBQUcsQ0FBQyxvQkFBb0IsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFBdEcsUUFBQSxVQUFVLGNBQTRGO0FBRW5IOzs7Ozs7OztHQVFHO0FBQ0ksTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLFFBQVEsR0FBRyxFQUFFLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBb0IsRUFBRSxDQUN2RyxXQUFHLENBQUMsbUNBQW1DLE9BQU8sYUFBYSxRQUFRLFdBQVcsTUFBTSxFQUFFLENBQUMsQ0FBQTtBQUQ1RSxRQUFBLGtCQUFrQixzQkFDMEQ7QUFFekY7OztHQUdHO0FBQ0ksTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFrQixFQUFFLENBQUMsV0FBRyxDQUFDLDJCQUEyQixJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQWxHLFFBQUEsaUJBQWlCLHFCQUFpRiJ9