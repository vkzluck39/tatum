"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendApproveFromCustodialWallet = exports.prepareApproveFromCustodialWallet = exports.sendBatchTransferFromCustodialWallet = exports.prepareBatchTransferFromCustodialWallet = exports.sendTransferFromCustodialWallet = exports.prepareTransferFromCustodialWallet = exports.sendCustodialWallet = exports.prepareCustodialWalletBatch = exports.generateCustodialWalletBatch = exports.prepareCustodialWallet = exports.generateCustodialWallet = exports.getCustodialAddresses = exports.obtainCustodialAddressType = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const constants_1 = require("../constants");
const custodial_1 = require("../contracts/custodial");
const fungible_1 = require("../fungible");
const helpers_1 = require("../helpers");
const model_1 = require("../model");
const transaction_1 = require("../transaction");
const generateBatch = (body) => tatum_1.post('/v3/blockchain/sc/custodial/batch', body);
const obtainCustodialAddressType = (body) => {
    if (body.chain === model_1.Currency.TRON && body.enableSemiFungibleTokens) {
        throw new Error('MultiToken not supported for TRON.');
    }
    let abi;
    let code;
    if (body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {
        code = custodial_1.CustodialFullTokenWalletWithBatch.bytecode;
        abi = custodial_1.CustodialFullTokenWalletWithBatch.abi;
    }
    else if (body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {
        code = custodial_1.CustodialFullTokenWallet.bytecode;
        abi = custodial_1.CustodialFullTokenWallet.abi;
    }
    else if (body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && body.enableBatchTransactions) {
        code = custodial_1.Custodial_20_721_TokenWalletWithBatch.bytecode;
        abi = custodial_1.Custodial_20_721_TokenWalletWithBatch.abi;
    }
    else if (body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && !body.enableBatchTransactions) {
        code = custodial_1.Custodial_20_721_TokenWallet.bytecode;
        abi = custodial_1.Custodial_20_721_TokenWallet.abi;
    }
    else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {
        code = custodial_1.Custodial_20_1155_TokenWalletWithBatch.bytecode;
        abi = custodial_1.Custodial_20_1155_TokenWalletWithBatch.abi;
    }
    else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {
        code = custodial_1.Custodial_20_1155_TokenWallet.bytecode;
        abi = custodial_1.Custodial_20_1155_TokenWallet.abi;
    }
    else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {
        code = custodial_1.Custodial_721_1155_TokenWalletWithBatch.bytecode;
        abi = custodial_1.Custodial_721_1155_TokenWalletWithBatch.abi;
    }
    else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {
        code = custodial_1.Custodial_721_1155_TokenWallet.bytecode;
        abi = custodial_1.Custodial_721_1155_TokenWallet.abi;
    }
    else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && body.enableBatchTransactions) {
        code = custodial_1.Custodial_20_TokenWalletWithBatch.bytecode;
        abi = custodial_1.Custodial_20_TokenWalletWithBatch.abi;
    }
    else if (body.enableFungibleTokens && !body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && !body.enableBatchTransactions) {
        code = custodial_1.Custodial_20_TokenWallet.bytecode;
        abi = custodial_1.Custodial_20_TokenWallet.abi;
    }
    else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && body.enableBatchTransactions) {
        code = custodial_1.Custodial_721_TokenWalletWithBatch.bytecode;
        abi = custodial_1.Custodial_721_TokenWalletWithBatch.abi;
    }
    else if (!body.enableFungibleTokens && body.enableNonFungibleTokens && !body.enableSemiFungibleTokens && !body.enableBatchTransactions) {
        code = custodial_1.Custodial_721_TokenWallet.bytecode;
        abi = custodial_1.Custodial_721_TokenWallet.abi;
    }
    else if (!body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && body.enableBatchTransactions) {
        code = custodial_1.Custodial_1155_TokenWalletWithBatch.bytecode;
        abi = custodial_1.Custodial_1155_TokenWalletWithBatch.abi;
    }
    else if (!body.enableFungibleTokens && !body.enableNonFungibleTokens && body.enableSemiFungibleTokens && !body.enableBatchTransactions) {
        code = custodial_1.Custodial_1155_TokenWallet.bytecode;
        abi = custodial_1.Custodial_1155_TokenWallet.abi;
    }
    else {
        throw new Error('Unsupported combination of inputs.');
    }
    return { abi, code };
};
exports.obtainCustodialAddressType = obtainCustodialAddressType;
const getCustodialFactoryContractAddress = (chain, testnet) => {
    switch (chain) {
        case model_1.Currency.CELO:
            return testnet ? '0x481D6f967B120E094D3551DA2C4951242Be582af' : '0xC7f23843d5A51221df4B6D0778910b39b40134b4';
        case model_1.Currency.TRON:
            return testnet ? 'TRM8P5gpzAr85p2a5BMvqb9UfEdFEwEgA7' : 'TG59uLNQvCR45F6yKHPXipvCu7wg5D88Wr';
        case model_1.Currency.ONE:
            return testnet ? '0xb1462fE8E9Cf82c0296022Cca7bEfA3Fd4c12B34' : '0x86e27174edd52469f928f6206f3d8e4316525f00';
        case model_1.Currency.XDC:
            return testnet ? 'xdc6709Bdda623aF7EB152cB2fE2562aB7e031e564f' : 'xdc3485fdba44736859267789ac9c248cc4c1443956';
        case model_1.Currency.ETH:
            return testnet ? (process.env.TESTNET_TYPE === 'ethereum-rinkeby' ? '0x4eC40a4A0dA042d46cC4529f918080957003b531' : '0x3485fdba44736859267789ac9c248cc4c1443956') : '0xd8050943c1E2764F750EC868ae1B375C4768d89A';
        case model_1.Currency.MATIC:
            return testnet ? '0x6792a82ffab4890cfbcee6c2c775ae9c898afe71' : '0xfc05d7fed6af03df8095cc93b674acac3f72756c';
        case model_1.Currency.KLAY:
            return testnet ? '0xd68c48173ccb0313442b23aed68b71961c618ade' : '0xb1462fE8E9Cf82c0296022Cca7bEfA3Fd4c12B34';
        case model_1.Currency.BSC:
            return testnet ? '0xeac818b4CC468Cf6556f772C4BB86e132E6ac0F3' : '0x9067f90c0975679158331fe43ad7a0a105424e0d';
        default:
            throw new Error('Unsupported chain.');
    }
};
const getCustodialAddresses = (chain, txId) => tatum_1.get(`/v3/blockchain/sc/custodial/${chain}/${txId}`);
exports.getCustodialAddresses = getCustodialAddresses;
/**
 * This method is @Deprecated. Use @link{generateCustodialWalletBatch} instead
 * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal
 * of assets is covered by the deployer.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const generateCustodialWallet = async (testnet, body, provider) => {
    console.log('This method is deprecated. For better gas consumption, use generateCustodialWalletBatch.');
    switch (body.chain) {
        case model_1.Currency.CELO:
            return await transaction_1.sendCeloGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return await transaction_1.sendOneGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return await transaction_1.sendEthGenerateCustodialWalletSignedTransaction(body, provider);
        case model_1.Currency.BSC:
            return await transaction_1.sendBscGenerateCustodialWalletSignedTransaction(body, provider);
        case model_1.Currency.MATIC:
            return await transaction_1.sendPolygonGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        case model_1.Currency.TRON:
            return await transaction_1.sendTronGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        default:
            throw new Error('Unsupported chain');
    }
};
exports.generateCustodialWallet = generateCustodialWallet;
/**
 * This method is @Deprecated. Use @link{prepareCustodialWalletBatch} instead
 * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal
 * of assets is covered by the deployer.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareCustodialWallet = async (testnet, body, provider) => {
    console.log('This method is deprecated. For better gas consumption, use prepareCustodialWalletBatch.');
    switch (body.chain) {
        case model_1.Currency.CELO:
            return await transaction_1.prepareCeloGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return await transaction_1.prepareOneGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return await transaction_1.prepareEthGenerateCustodialWalletSignedTransaction(body, provider);
        case model_1.Currency.BSC:
            return await transaction_1.prepareBscGenerateCustodialWalletSignedTransaction(body, provider);
        case model_1.Currency.MATIC:
            return await transaction_1.preparePolygonGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        case model_1.Currency.TRON:
            return await transaction_1.prepareTronGenerateCustodialWalletSignedTransaction(testnet, body, provider);
        default:
            throw new Error('Unsupported chain');
    }
};
exports.prepareCustodialWallet = prepareCustodialWallet;
/**
 * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal
 * of assets is covered by the deployer.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const generateCustodialWalletBatch = async (testnet, body, provider) => {
    const txData = await exports.prepareCustodialWalletBatch(testnet, body, provider);
    if (body.feesCovered) {
        return await generateBatch(body);
    }
    switch (body.chain) {
        case model_1.Currency.CELO:
            return await blockchain_1.celoBroadcast(txData, body.signatureId);
        case model_1.Currency.TRON:
            return await blockchain_1.tronBroadcast(txData, body.signatureId);
        case model_1.Currency.ETH:
            return await blockchain_1.ethBroadcast(txData, body.signatureId);
        case model_1.Currency.MATIC:
            return await blockchain_1.polygonBroadcast(txData, body.signatureId);
        case model_1.Currency.ONE:
            return await blockchain_1.oneBroadcast(txData, body.signatureId);
        case model_1.Currency.XDC:
            return await blockchain_1.xdcBroadcast(txData, body.signatureId);
        case model_1.Currency.KLAY:
            return await blockchain_1.klaytnBroadcast(txData, body.signatureId);
        case model_1.Currency.BSC:
            return await blockchain_1.bscBroadcast(txData, body.signatureId);
        default:
            throw new Error('Unsupported chain');
    }
};
exports.generateCustodialWalletBatch = generateCustodialWalletBatch;
/**
 * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal
 * of assets is covered by the deployer.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareCustodialWalletBatch = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.GenerateCustodialAddressBatch);
    const params = body.chain === model_1.Currency.TRON
        ? [{ type: 'address', value: transaction_1.convertAddressToHex(body.owner.trim()) },
            { type: 'uint256', value: `0x${new bignumber_js_1.default(body.batchCount).toString(16)}` }]
        : [body.chain === model_1.Currency.XDC ? transaction_1.fromXdcAddress(body.owner) : body.owner.trim(), `0x${new bignumber_js_1.default(body.batchCount).toString(16)}`];
    const methodName = body.chain === model_1.Currency.TRON ? 'cloneNewWallet(address,uint256)' : 'cloneNewWallet';
    return await helpers_1.helperPrepareSCCall(testnet, Object.assign(Object.assign({}, body), { contractAddress: getCustodialFactoryContractAddress(body.chain, testnet) }), model_1.GenerateCustodialAddressBatch, methodName, params, body.chain === model_1.Currency.TRON ? methodName : undefined, provider, [constants_1.CUSTODIAL_PROXY_ABI]);
};
exports.prepareCustodialWalletBatch = prepareCustodialWalletBatch;
/**
 * @Deprecated, use generateCustodialWalletBatch
 * Generate new smart contract based custodial wallet. This wallet is able to receive any type of assets, but transaction costs connected to the withdrawal
 * of assets is covered by the deployer.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendCustodialWallet = async (testnet, body, provider) => {
    let txData;
    switch (body.chain) {
        case model_1.Currency.CELO:
            txData = await transaction_1.prepareCeloGenerateCustodialWalletSignedTransaction(testnet, body, provider);
            break;
        case model_1.Currency.ONE:
            txData = await transaction_1.prepareOneGenerateCustodialWalletSignedTransaction(testnet, body, provider);
            break;
        case model_1.Currency.ETH:
            txData = await transaction_1.prepareEthGenerateCustodialWalletSignedTransaction(body, provider);
            break;
        case model_1.Currency.BSC:
            txData = await transaction_1.prepareBscGenerateCustodialWalletSignedTransaction(body, provider);
            break;
        case model_1.Currency.MATIC:
            txData = await transaction_1.preparePolygonGenerateCustodialWalletSignedTransaction(testnet, body, provider);
            break;
        case model_1.Currency.KLAY:
            txData = await transaction_1.prepareKlaytnGenerateCustodialWalletSignedTransaction(testnet, body, provider);
            break;
        case model_1.Currency.TRON:
            txData = await transaction_1.prepareTronGenerateCustodialWalletSignedTransaction(testnet, body, provider);
            break;
        default:
            throw new Error('Unsupported chain');
    }
    return helpers_1.helperBroadcastTx(body.chain, txData, body.signatureId);
};
exports.sendCustodialWallet = sendCustodialWallet;
/**
 * Prepare signed transaction from the custodial SC wallet.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareTransferFromCustodialWallet = async (testnet, body, provider) => {
    let r;
    let decimals;
    if (body.chain === model_1.Currency.TRON) {
        decimals = 6;
        await tatum_1.validateBody(body, model_1.TransferFromTronCustodialAddress);
    }
    else {
        decimals = 18;
        await tatum_1.validateBody(body, model_1.TransferFromCustodialAddress);
    }
    if (body.chain === model_1.Currency.CELO) {
        r = new model_1.CeloSmartContractMethodInvocation();
    }
    else {
        r = new model_1.SmartContractMethodInvocation();
    }
    r.fee = body.fee;
    r.nonce = body.nonce;
    r.fromPrivateKey = body.fromPrivateKey;
    r.signatureId = body.signatureId;
    r.index = body.index;
    r.contractAddress = body.custodialAddress;
    r.methodName = 'transfer';
    let amount = new bignumber_js_1.default(body.amount || 0);
    let tokenId = new bignumber_js_1.default(body.tokenId || 0);
    if (body.contractType === model_1.ContractType.NATIVE_ASSET) {
        amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(decimals));
    }
    else if (body.contractType === model_1.ContractType.FUNGIBLE_TOKEN) {
        tokenId = new bignumber_js_1.default(0);
        switch (body.chain) {
            case model_1.Currency.CELO:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getCeloErc20ContractDecimals(testnet, body.tokenAddress, provider)));
                break;
            case model_1.Currency.ONE:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getOne20ContractDecimals(testnet, body.tokenAddress, provider)));
                break;
            case model_1.Currency.XDC:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await fungible_1.getErc20Decimals(testnet, model_1.Currency.XDC, body.tokenAddress, provider)));
                break;
            case model_1.Currency.ETH:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getEthErc20ContractDecimals(testnet, body.tokenAddress, provider)));
                break;
            case model_1.Currency.BSC:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getBscBep20ContractDecimals(testnet, body.tokenAddress, provider)));
                break;
            case model_1.Currency.MATIC:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getPolygonErc20ContractDecimals(testnet, body.tokenAddress, provider)));
                break;
            case model_1.Currency.KLAY:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getKlayErc20ContractDecimals(testnet, body.tokenAddress, provider)));
                break;
            case model_1.Currency.TRON:
                amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getTronTrc20ContractDecimals(testnet, body.tokenAddress, provider)));
                break;
            default:
                throw new Error('Unsupported combination of inputs.');
        }
    }
    r.params = [body.tokenAddress || '0x000000000000000000000000000000000000dEaD', body.contractType, body.recipient, `0x${amount.toString(16)}`, `0x${new bignumber_js_1.default(tokenId).toString(16)}`];
    r.methodABI = custodial_1.CustodialFullTokenWallet.abi.find(a => a.name === 'transfer');
    switch (body.chain) {
        case model_1.Currency.CELO:
            return await transaction_1.prepareCeloSmartContractWriteMethodInvocation(testnet, Object.assign(Object.assign({}, r), { feeCurrency: body.feeCurrency || model_1.Currency.CELO }), provider);
        case model_1.Currency.ONE:
            return await transaction_1.prepareOneSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.XDC:
            return await transaction_1.prepareXdcSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.ETH:
            return await transaction_1.prepareSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.BSC:
            return await transaction_1.prepareBscSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.MATIC:
            return await transaction_1.preparePolygonSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.KLAY:
            return await transaction_1.prepareKlaytnSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.TRON: {
            const { feeLimit, from } = body;
            r.methodName = 'transfer(address,uint256,address,uint256,uint256)';
            r.params = [
                { type: 'address', value: transaction_1.convertAddressToHex(r.params[0]) },
                { type: 'uint256', value: r.params[1] },
                { type: 'address', value: transaction_1.convertAddressToHex(r.params[2]) },
                { type: 'uint256', value: r.params[3] },
                { type: 'uint256', value: r.params[4] },
            ];
            return await transaction_1.prepareTronSmartContractInvocation(testnet, r, feeLimit, from, provider);
        }
        default:
            throw new Error('Unsupported combination of inputs.');
    }
};
exports.prepareTransferFromCustodialWallet = prepareTransferFromCustodialWallet;
/**
 * Send signed transaction from the custodial SC wallet.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendTransferFromCustodialWallet = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareTransferFromCustodialWallet(testnet, body, provider), body.signatureId);
exports.sendTransferFromCustodialWallet = sendTransferFromCustodialWallet;
/**
 * Prepare signed batch transaction from the custodial SC wallet.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareBatchTransferFromCustodialWallet = async (testnet, body, provider) => {
    let r;
    let decimals;
    if (body.chain === model_1.Currency.TRON) {
        await tatum_1.validateBody(body, model_1.TransferFromTronCustodialAddressBatch);
        decimals = 6;
    }
    else {
        await tatum_1.validateBody(body, model_1.TransferFromCustodialAddressBatch);
        decimals = 18;
    }
    if (body.chain === model_1.Currency.CELO) {
        r = new model_1.CeloSmartContractMethodInvocation();
    }
    else {
        r = new model_1.SmartContractMethodInvocation();
    }
    r.fee = body.fee;
    r.nonce = body.nonce;
    r.fromPrivateKey = body.fromPrivateKey;
    r.signatureId = body.signatureId;
    r.index = body.index;
    r.contractAddress = body.custodialAddress;
    r.methodName = 'transferBatch';
    const amounts = [];
    const tokenIds = [];
    for (let i = 0; i < body.contractType.length; i++) {
        let amount = new bignumber_js_1.default(body.amount ? body.amount[i] : 0);
        let tokenId = new bignumber_js_1.default(body.tokenId ? body.tokenId[i] : 0);
        if (body.contractType[i] === model_1.ContractType.NATIVE_ASSET) {
            amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(decimals));
        }
        else if (body.contractType[i] === model_1.ContractType.NON_FUNGIBLE_TOKEN) {
            amount = new bignumber_js_1.default(0);
        }
        else if (body.contractType[i] === model_1.ContractType.FUNGIBLE_TOKEN && body.tokenAddress) {
            tokenId = new bignumber_js_1.default(0);
            switch (body.chain) {
                case model_1.Currency.CELO:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getCeloErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));
                    break;
                case model_1.Currency.ONE:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getOne20ContractDecimals(testnet, body.tokenAddress[i], provider)));
                    break;
                case model_1.Currency.XDC:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await fungible_1.getErc20Decimals(testnet, model_1.Currency.XDC, body.tokenAddress[i], provider)));
                    break;
                case model_1.Currency.ETH:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getEthErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));
                    break;
                case model_1.Currency.BSC:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getBscBep20ContractDecimals(testnet, body.tokenAddress[i], provider)));
                    break;
                case model_1.Currency.MATIC:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getPolygonErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));
                    break;
                case model_1.Currency.KLAY:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getKlayErc20ContractDecimals(testnet, body.tokenAddress[i], provider)));
                    break;
                case model_1.Currency.TRON:
                    amount = amount.multipliedBy(new bignumber_js_1.default(10).pow(await transaction_1.getTronTrc20ContractDecimals(testnet, body.tokenAddress[i], provider)));
                    break;
                default:
                    throw new Error('Unsupported combination of inputs.');
            }
        }
        amounts.push(`0x${amount.toString(16)}`);
        tokenIds.push(`0x${tokenId.toString(16)}`);
    }
    r.params = [(body.tokenAddress || []).map(t => t === '0' ? '0x000000000000000000000000000000000000dEaD' : t), body.contractType, body.recipient, amounts, tokenIds];
    r.methodABI = custodial_1.CustodialFullTokenWalletWithBatch.abi.find(a => a.name === 'transferBatch');
    switch (body.chain) {
        case model_1.Currency.CELO:
            return await transaction_1.prepareCeloSmartContractWriteMethodInvocation(testnet, Object.assign(Object.assign({}, r), { feeCurrency: body.feeCurrency || model_1.Currency.CELO }), provider);
        case model_1.Currency.ONE:
            return await transaction_1.prepareOneSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.XDC:
            return await transaction_1.prepareXdcSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.ETH:
            return await transaction_1.prepareSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.BSC:
            return await transaction_1.prepareBscSmartContractWriteMethodInvocation(r, provider);
        case model_1.Currency.MATIC:
            return await transaction_1.preparePolygonSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.KLAY:
            return await transaction_1.prepareKlaytnSmartContractWriteMethodInvocation(testnet, r, provider);
        case model_1.Currency.TRON: {
            const body1 = body;
            return await transaction_1.prepareTronCustodialTransferBatch(testnet, r, body1.feeLimit, body1.from, provider);
        }
        default:
            throw new Error('Unsupported combination of inputs.');
    }
};
exports.prepareBatchTransferFromCustodialWallet = prepareBatchTransferFromCustodialWallet;
/**
 * Send signed batch transaction from the custodial SC wallet.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendBatchTransferFromCustodialWallet = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareBatchTransferFromCustodialWallet(testnet, body, provider), body.signatureId);
exports.sendBatchTransferFromCustodialWallet = sendBatchTransferFromCustodialWallet;
/**
 * Prepare signed approve transaction from the custodial SC wallet.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareApproveFromCustodialWallet = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.ApproveCustodialTransfer);
    const decimals = body.contractType === model_1.ContractType.FUNGIBLE_TOKEN ? await fungible_1.getErc20Decimals(testnet, body.chain, body.tokenAddress, provider) : 0;
    const params = [body.tokenAddress.trim(), body.contractType, body.spender,
        `0x${new bignumber_js_1.default(body.amount || 0).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`, `0x${new bignumber_js_1.default(body.tokenId || 0).toString(16)}`];
    delete body.amount;
    return await helpers_1.helperPrepareSCCall(testnet, Object.assign(Object.assign({}, body), { contractAddress: body.custodialAddress }), model_1.ApproveCustodialTransfer, 'approve', params, undefined, provider, custodial_1.CustodialFullTokenWallet.abi);
};
exports.prepareApproveFromCustodialWallet = prepareApproveFromCustodialWallet;
/**
 * Send signed approve transaction from the custodial SC wallet.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendApproveFromCustodialWallet = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareApproveFromCustodialWallet(testnet, body, provider), body.signatureId);
exports.sendApproveFromCustodialWallet = sendApproveFromCustodialWallet;
//# sourceMappingURL=data:application/json;base64,