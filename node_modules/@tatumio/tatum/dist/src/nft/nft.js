"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAddNFTMinter = exports.prepareAddNFTMinter = exports.transferNFT = exports.updateCashbackForAuthorNFT = exports.burnNFT = exports.mintMultipleNFTWithUri = exports.mintNFTWithUri = exports.createNFT = exports.deployNFT = exports.getNFTRoyalty = exports.getNFTImage = exports.getNFTMetadataURI = exports.getNFTContractAddress = exports.getNFTProvenanceData = exports.getNFTsByAddress = exports.mintNFT = void 0;
const tatum_1 = require("../connector/tatum");
const erc721_abi_1 = __importDefault(require("../contracts/erc721Cashback/erc721_abi"));
const helpers_1 = require("../helpers");
const model_1 = require("../model");
const storage_1 = require("../storage");
const transaction_1 = require("../transaction");
const mintNFT = (body) => tatum_1.post(`/v3/nft/mint`, body);
exports.mintNFT = mintNFT;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/NftGetBalanceErc721" target="_blank">Tatum API documentation</a>
 */
const getNFTsByAddress = async (chain, contractAddress, address) => tatum_1.get(`/v3/nft/balance/${chain}/${contractAddress}/${address}`);
exports.getNFTsByAddress = getNFTsByAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/NftProvenanceReadData" target="_blank">Tatum API documentation</a>
 */
const getNFTProvenanceData = async (chain, contractAddress, tokenId) => tatum_1.get(`/v3/nft/provenance/${chain}/${contractAddress}/${tokenId}`);
exports.getNFTProvenanceData = getNFTProvenanceData;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/NftGetContractAddress" target="_blank">Tatum API documentation</a>
 */
const getNFTContractAddress = async (chain, txId) => tatum_1.get(`/v3/nft/address/${chain}/${txId}`);
exports.getNFTContractAddress = getNFTContractAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/NftGetMetadataErc721" target="_blank">Tatum API documentation</a>
 */
const getNFTMetadataURI = async (chain, contractAddress, tokenId, account) => {
    let url = `/v3/nft/metadata/${chain}/${contractAddress}/${tokenId}`;
    if (account) {
        url += `?account=${account}`;
    }
    return tatum_1.get(url);
};
exports.getNFTMetadataURI = getNFTMetadataURI;
/**
 * Get IPFS image URL from the NFT with the IPFS Metadata scheme. URL
 * @param chain chain where NFT token is
 * @param contractAddress contract address of the NFT token
 * @param tokenId ID of the token
 * @param account FLOW only - account where the token is minted
 */
const getNFTImage = async (chain, contractAddress, tokenId, account) => {
    const { data: metadata } = await exports.getNFTMetadataURI(chain, contractAddress, tokenId, account);
    const metadataUrl = `https://gateway.pinata.cloud/ipfs/${metadata.replace('ipfs://', '')}`;
    const { data } = await tatum_1.axios.get(metadataUrl);
    const imageUrl = data.image;
    return {
        originalUrl: imageUrl,
        publicUrl: `https://gateway.pinata.cloud/ipfs/${imageUrl.replace('ipfs://', '')}`,
    };
};
exports.getNFTImage = getNFTImage;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/NftGetRoyaltyErc721" target="_blank">Tatum API documentation</a>
 */
const getNFTRoyalty = async (chain, contractAddress, tokenId) => tatum_1.get(`/v3/nft/royalty/${chain}/${contractAddress}/${tokenId}`);
exports.getNFTRoyalty = getNFTRoyalty;
/**
 * Deploy new NFT smart contract, which will be used for later minting.
 * @param testnet if we use testnet or not
 * @param body body of the mint request
 * @param provider optional provider do broadcast tx
 */
const deployNFT = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloDeployErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendDeployErc721Transaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonDeployErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnDeployErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneDeploy721SignedTransaction(testnet, body, provider);
        case model_1.Currency.TRON:
            return transaction_1.sendTronDeployTrc721SignedTransaction(testnet, body);
        case model_1.Currency.BSC:
            return transaction_1.sendDeployBep721Transaction(body, provider);
        case model_1.Currency.FLOW:
            return tatum_1.post('/v3/nft/deploy', body, model_1.FlowDeployNft);
        default:
            throw new Error('Unsupported currency');
    }
};
exports.deployNFT = deployNFT;
/**
 * Mint new NFT token with metadata stored on the IPFS.
 * @param testnet if we use testnet or not
 * @param body body of the mint request
 * @param file file to be stored on the IPFS
 * @param name name of the file
 * @param description description of the file
 * @param scheme optional JSON Metadata scheme
 * @param provider optional provider do broadcast tx
 */
const createNFT = async (testnet, body, file, name, description, scheme, provider) => {
    const metadata = scheme || {};
    metadata.name = name;
    if (description) {
        metadata.description = description;
    }
    const { ipfsHash } = await storage_1.ipfsUpload(file, name);
    metadata.image = `ipfs://${ipfsHash}`;
    const { ipfsHash: metadataHash } = await storage_1.ipfsUpload(Buffer.from(JSON.stringify(metadata)), 'metadata.json');
    body.url = `ipfs://${metadataHash}`;
    if (body.chain === model_1.Currency.FLOW) {
        body.privateKey = body.privateKey || body.fromPrivateKey;
    }
    const result = await exports.mintNFTWithUri(testnet, body, provider);
    return Object.assign(Object.assign({ tokenId: body.tokenId }, result), { metadataUrl: body.url, metadataPublicUrl: `https://gateway.pinata.cloud/ipfs/${metadataHash}`, imageUrl: `ipfs://${ipfsHash}`, imagePublicUrl: `https://gateway.pinata.cloud/ipfs/${ipfsHash}` });
};
exports.createNFT = createNFT;
/**
 * Mint new NFT token.
 * @param testnet if we use testnet or not
 * @param body body of the mint request
 * @param provider optional provider do broadcast tx
 */
const mintNFTWithUri = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            if (body.provenance) {
                return transaction_1.sendCeloMintErc721ProvenanceTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendCeloMintCashbackErc721Transaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendCeloMintErc721Transaction(testnet, body, provider);
                }
            }
        case model_1.Currency.ETH:
            if (body.provenance) {
                return transaction_1.sendMintErc721ProvenanceTransaction(body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendMintCashbackErc721Transaction(body, provider);
                }
                else {
                    return transaction_1.sendMintErc721Transaction(body, provider);
                }
            }
        case model_1.Currency.MATIC:
            if (body.provenance) {
                return transaction_1.sendPolygonMintErc721ProvenanceSignedTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendPolygonMintCashbackErc721SignedTransaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendPolygonMintErc721SignedTransaction(testnet, body, provider);
                }
            }
        case model_1.Currency.KLAY:
            if (body.provenance) {
                return transaction_1.sendKlaytnMintErc721ProvenanceSignedTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendKlaytnMintCashbackErc721SignedTransaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendKlaytnMintErc721SignedTransaction(testnet, body, provider);
                }
            }
        case model_1.Currency.ONE:
            if (body.provenance) {
                return transaction_1.sendOneMint721ProvenanceSignedTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendOneMintCashback721SignedTransaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendOneMint721SignedTransaction(testnet, body, provider);
                }
            }
        case model_1.Currency.TRON:
            if (body.authorAddresses) {
                return transaction_1.sendTronMintCashbackTrc721SignedTransaction(testnet, body);
            }
            else {
                return transaction_1.sendTronMintTrc721SignedTransaction(testnet, body);
            }
        case model_1.Currency.BSC:
            if (body.provenance) {
                return transaction_1.sendMintBep721ProvenanceTransaction(body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendMintBepCashback721Transaction(body, provider);
                }
                return transaction_1.sendMintBep721Transaction(body, provider);
            }
        case model_1.Currency.FLOW:
            return transaction_1.sendFlowNftMintToken(testnet, body);
        default:
            throw new Error('Unsupported blockchain.');
    }
};
exports.mintNFTWithUri = mintNFTWithUri;
/**
 * Mint multiple new NFT tokens.
 * @param testnet if we use testnet or not
 * @param body body of the mint request
 * @param provider optional provider do broadcast tx
 */
const mintMultipleNFTWithUri = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            if (body.provenance) {
                return transaction_1.sendCeloMintMultipleErc721ProvenanceTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendCeloMintMultipleCashbackErc721Transaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendCeloMintMultipleErc721Transaction(testnet, body, provider);
                }
            }
        case model_1.Currency.TRON:
            if (body.authorAddresses) {
                throw new Error('Unsupported operation.');
            }
            else {
                return transaction_1.sendTronMintMultipleTrc721SignedTransaction(testnet, body);
            }
        case model_1.Currency.ETH:
            if (body.provenance) {
                return transaction_1.sendMintMultipleErc721ProvenanceTransaction(body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendEthMintMultipleCashbackErc721SignedTransaction(body, provider);
                }
                else {
                    return transaction_1.sendMintMultipleErc721Transaction(body, provider);
                }
            }
        case model_1.Currency.MATIC:
            if (body.authorAddresses) {
                return transaction_1.sendPolygonMintMultipleErc721ProvenanceSignedTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendPolygonMintMultipleCashbackErc721SignedTransaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendPolygonMintMultipleErc721SignedTransaction(testnet, body, provider);
                }
            }
        case model_1.Currency.KLAY:
            if (body.authorAddresses) {
                return transaction_1.sendKlaytnMintMultipleErc721ProvenanceSignedTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendKlaytnMintMultipleCashbackErc721SignedTransaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendKlaytnMintMultipleErc721SignedTransaction(testnet, body, provider);
                }
            }
        case model_1.Currency.ONE:
            if (body.provenance) {
                return transaction_1.sendOneMintMultiple721ProvenanceSignedTransaction(testnet, body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendOneMintMultipleCashback721SignedTransaction(testnet, body, provider);
                }
                else {
                    return transaction_1.sendOneMintMultiple721SignedTransaction(testnet, body, provider);
                }
            }
        case model_1.Currency.BSC:
            if (body.authorAddresses) {
                return transaction_1.sendMintMultipleBep721ProvenanceTransaction(body, provider);
            }
            else {
                if (body.authorAddresses) {
                    return transaction_1.sendMintMultipleCashbackBep721Transaction(body, provider);
                }
                else {
                    return transaction_1.sendMintMultipleBep721Transaction(body, provider);
                }
            }
        case model_1.Currency.FLOW:
            return transaction_1.sendFlowNftMintMultipleToken(testnet, body);
        default:
            throw new Error('Unsupported blockchain.');
    }
};
exports.mintMultipleNFTWithUri = mintMultipleNFTWithUri;
/**
 * Burn new NFT token. Token will no longer exists.
 * @param testnet if we use testnet or not
 * @param body body of the mint request
 * @param provider optional provider do broadcast tx
 */
const burnNFT = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloBurnErc721Transaction(testnet, body, provider);
        case model_1.Currency.TRON:
            return transaction_1.sendTronBurnTrc721SignedTransaction(testnet, body);
        case model_1.Currency.ETH:
            return transaction_1.sendBurnErc721Transaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonBurnErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnBurnErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneBurn721SignedTransaction(testnet, body, provider);
        case model_1.Currency.BSC:
            return transaction_1.sendBurnBep721Transaction(body, provider);
        case model_1.Currency.FLOW:
            return transaction_1.sendFlowNftBurnToken(testnet, body);
        case model_1.Currency.ALGO:
            return transaction_1.sendAlgoBurnNFTSignedTransaction(testnet, body, provider);
        default:
            throw new Error('Unsupported blockchain.');
    }
};
exports.burnNFT = burnNFT;
/**
 * Update royalty cashback as author of the NFT token.
 * @param testnet if we use testnet or not
 * @param body body of the mint request
 * @param provider optional provider do broadcast tx
 */
const updateCashbackForAuthorNFT = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloUpdateCashbackForAuthorErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendUpdateCashbackForAuthorErc721Transaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonUpdateCashbackForAuthorErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneUpdateCashbackForAuthor721SignedTransaction(testnet, body, provider);
        case model_1.Currency.TRON:
            return transaction_1.sendTronUpdateCashbackForAuthorTrc721SignedTransaction(testnet, body);
        case model_1.Currency.BSC:
            return transaction_1.sendUpdateCashbackForAuthorBep721Transaction(body, provider);
        default:
            throw new Error('Unsupported blockchain.');
    }
};
exports.updateCashbackForAuthorNFT = updateCashbackForAuthorNFT;
/**
 * Transfer new NFT token to new recipient.
 * @param testnet if we use testnet or not
 * @param body body of the mint request
 * @param provider optional provider do broadcast tx
 */
const transferNFT = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return transaction_1.sendCeloTransferErc721Transaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return transaction_1.sendErc721Transaction(body, provider);
        case model_1.Currency.MATIC:
            return transaction_1.sendPolygonTransferErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return transaction_1.sendKlaytnTransferErc721SignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return transaction_1.sendOneTransfer721SignedTransaction(testnet, body, provider);
        case model_1.Currency.TRON:
            return transaction_1.sendTronTransferTrc721SignedTransaction(testnet, body);
        case model_1.Currency.BSC:
            return transaction_1.sendBep721Transaction(body, provider);
        case model_1.Currency.FLOW:
            return transaction_1.sendFlowNftTransferToken(testnet, body);
        case model_1.Currency.ALGO:
            return transaction_1.sendAlgoTransferNFTSignedTransaction(testnet, body, provider);
        default:
            throw new Error('Unsupported blockchain.');
    }
};
exports.transferNFT = transferNFT;
/**
 * Prepare add new minter to the NFT contract transaction.
 * @param testnet if we use testnet or not
 * @param body body of the add minter request
 * @param provider optional provider do broadcast tx
 */
const prepareAddNFTMinter = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.AddMinter);
    const params = ['0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6', body.minter];
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.AddMinter, 'grantRole', params, undefined, provider, erc721_abi_1.default);
};
exports.prepareAddNFTMinter = prepareAddNFTMinter;
/**
 * Add new minter to the NFT contract.
 * @param testnet if we use testnet or not
 * @param body body of the add minter request
 * @param provider optional provider do broadcast tx
 */
const sendAddNFTMinter = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAddNFTMinter(testnet, body, provider), body.signatureId);
exports.sendAddNFTMinter = sendAddNFTMinter;
//# sourceMappingURL=data:application/json;base64,