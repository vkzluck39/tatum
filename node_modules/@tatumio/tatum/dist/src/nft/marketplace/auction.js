"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAuctionSettle = exports.sendAuctionCancel = exports.sendAuctionBid = exports.sendAuctionCreate = exports.sendAuctionApproveErc20Transfer = exports.sendAuctionApproveNftTransfer = exports.sendAuctionUpdateFeeRecipient = exports.sendAuctionUpdateFee = exports.prepareAuctionSettle = exports.prepareAuctionCancel = exports.prepareAuctionBid = exports.prepareAuctionCreate = exports.prepareAuctionApproveErc20Transfer = exports.prepareAuctionApproveNftTransfer = exports.prepareAuctionUpdateFeeRecipient = exports.prepareAuctionUpdateFee = exports.prepareDeployAuction = exports.deployAuction = exports.getAuctionFeeRecipient = exports.getAuction = exports.getAuctionFee = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const tatum_1 = require("../../connector/tatum");
const erc1155_abi_1 = __importDefault(require("../../contracts/erc1155/erc1155_abi"));
const erc721_abi_1 = __importDefault(require("../../contracts/erc721Cashback/erc721_abi"));
const marketplace_1 = require("../../contracts/marketplace");
const fungible_1 = require("../../fungible");
const helpers_1 = require("../../helpers");
const model_1 = require("../../model");
const transaction_1 = require("../../transaction");
const caver_js_1 = __importDefault(require("caver-js"));
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MPAuctionFee" target="_blank">Tatum API documentation</a>
 */
const getAuctionFee = async (chain, contractAddress) => tatum_1.get(`/v3/blockchain/auction/auction/${chain}/${contractAddress}/fee`);
exports.getAuctionFee = getAuctionFee;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MPAuction" target="_blank">Tatum API documentation</a>
 */
const getAuction = async (chain, contractAddress, auctionId) => tatum_1.get(`/v3/blockchain/auction/auction/${chain}/${contractAddress}/auction/${auctionId}`);
exports.getAuction = getAuction;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/MPAuctionRecipient" target="_blank">Tatum API documentation</a>
 */
const getAuctionFeeRecipient = async (chain, contractAddress) => tatum_1.get(`/v3/blockchain/auction/auction/${chain}/${contractAddress}/recipient`);
exports.getAuctionFeeRecipient = getAuctionFeeRecipient;
/**
 * Deploy new smart contract for NFT auction logic. Smart contract enables auction operator to create new auction for NFT (ERC-721/1155).
 * Operator can set a fee in percentage, which will be paid on top of the price of the asset.
 * can be offered for native asset - ETH, BSC, etc. - or any ERC20 token - this is configurable during auction creation.
 * Before auction is created, seller must approve transfer of the NFT to the auction contract.
 * Buyer will bid for the asset from the auction using native asset - send assets along the gid() smart contract call, or via ERC20 token.
 * Buyer of the auction must perform approval for the smart contract to access ERC20 token, before the actual bid() method is called.
 * Once there is higher bid than the actual one, the previous bidder's funds will be returned to him and new bidder will be the current winning one.
 * When auction ends, anyone can settle the auction - NFT will be sent to the bidder, assets to the seller and fee to the operator.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const deployAuction = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareDeployAuction(testnet, body, provider), body.signatureId);
exports.deployAuction = deployAuction;
/**
 * Prepare signed transaction for NFT auction logic. Smart contract enables auction operator to create new auction for NFT (ERC-721/1155).
 * Operator can set a fee in percentage, which will be paid on top of the price of the asset.
 * can be offered for native asset - ETH, BSC, etc. - or any ERC20 token - this is configurable during auction creation.
 * Before auction is created, seller must approve transfer of the NFT to the auction contract.
 * Buyer will bid for the asset from the auction using native asset - send assets along the gid() smart contract call, or via ERC20 token.
 * Buyer of the auction must perform approval for the smart contract to access ERC20 token, before the actual bid() method is called.
 * Once there is higher bid than the actual one, the previous bidder's funds will be returned to him and new bidder will be the current winning one.
 * When auction ends, anyone can settle the auction - NFT will be sent to the bidder, assets to the seller and fee to the operator.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareDeployAuction = async (testnet, body, provider) => {
    switch (body.chain) {
        case model_1.Currency.CELO:
            return await transaction_1.prepareCeloDeployAuctionSignedTransaction(testnet, body, provider);
        case model_1.Currency.ONE:
            return await transaction_1.prepareOneDeployAuctionSignedTransaction(testnet, body, provider);
        case model_1.Currency.ETH:
            return await transaction_1.prepareEthDeployAuctionSignedTransaction(body, provider);
        case model_1.Currency.BSC:
            return await transaction_1.prepareBscDeployAuctionSignedTransaction(body, provider);
        case model_1.Currency.MATIC:
            return await transaction_1.preparePolygonDeployAuctionSignedTransaction(testnet, body, provider);
        case model_1.Currency.KLAY:
            return await transaction_1.prepareKlaytnDeployAuctionSignedTransaction(testnet, body, provider);
        default:
            throw new Error('Unsupported chain');
    }
};
exports.prepareDeployAuction = prepareDeployAuction;
/**
 * Update auction fee.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionUpdateFee = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.UpdateAuctionFee);
    const params = [`0x${new bignumber_js_1.default(body.auctionFee).toString(16)}`];
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.UpdateAuctionFee, 'setAuctionFee', params, undefined, provider, marketplace_1.auction.abi);
};
exports.prepareAuctionUpdateFee = prepareAuctionUpdateFee;
/**
 * Update auction fee recipient.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionUpdateFeeRecipient = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.UpdateMarketplaceFeeRecipient);
    const params = [body.feeRecipient];
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.UpdateMarketplaceFeeRecipient, 'setAuctionFeeRecipient', params, undefined, provider, marketplace_1.auction.abi);
};
exports.prepareAuctionUpdateFeeRecipient = prepareAuctionUpdateFeeRecipient;
/**
 * Approve NFT transfer for auction to perform listing of the asset.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionApproveNftTransfer = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.ApproveNftTransfer);
    const params = body.isErc721 ? [body.spender, `0x${new bignumber_js_1.default(body.tokenId).toString(16)}`] : [body.spender, true];
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.ApproveNftTransfer, body.isErc721 ? 'approve' : 'setApprovalForAll', params, undefined, provider, body.isErc721 ? erc721_abi_1.default : erc1155_abi_1.default);
};
exports.prepareAuctionApproveNftTransfer = prepareAuctionApproveNftTransfer;
/**
 * Approve ERC20 transfer for auction to perform bidding on the asset in the auction.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionApproveErc20Transfer = async (testnet, body, provider) => {
    return fungible_1.prepareApproveErc20(testnet, body, provider);
};
exports.prepareAuctionApproveErc20Transfer = prepareAuctionApproveErc20Transfer;
/**
 * Create new auction on the auction contract. Before auction, seller must approve spending of the NFT token for the Auction contract.
 * After auction is created, auction contract transfers the asset to the auction smart contract.
 * Only auction for existing NFTs can be created - seller must be owner of the NFT asset.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionCreate = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.CreateAuction);
    const params = [body.id, body.isErc721, body.nftAddress.trim(), `0x${new bignumber_js_1.default(body.tokenId).toString(16)}`,
        body.seller.trim(), `0x${new bignumber_js_1.default(body.amount || 0).toString(16)}`,
        `0x${new bignumber_js_1.default(body.endedAt).toString(16)}`, body.erc20Address || '0x0000000000000000000000000000000000000000'];
    body.amount = undefined;
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.CreateAuction, 'createAuction', params, undefined, provider, marketplace_1.auction.abi);
};
exports.prepareAuctionCreate = prepareAuctionCreate;
/**
 * Bid on the auction. Buyer must either send native assets with this operation, or approve ERC20 token spending before.
 * After auction is sold, it's in a pending state to be processed by the auction. Noone receives the assets unless the auction operator processes that.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionBid = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.InvokeAuctionOperation);
    const web3 = helpers_1.helperGetWeb3Client(testnet, body.chain, provider);
    const c = web3 instanceof caver_js_1.default ? web3.klay : web3.eth;
    // @ts-ignore
    const a = await (new c.Contract(marketplace_1.auction.abi, body.contractAddress)).methods.getAuction(body.id).call();
    let decimals = 18;
    let methodName = 'bid';
    const b = Object.assign({}, body);
    if (a[6] !== '0x0000000000000000000000000000000000000000') {
        // @ts-ignore
        decimals = await fungible_1.getErc20Decimals(testnet, body.chain, a[6], provider);
        if (body.bidder) {
            methodName = 'bidForExternalBidder';
        }
    }
    else if (body.bidder) {
        throw new Error('Bidder could be present only for ERC20 based auctions.');
    }
    else {
        b.amount = body.amount ? body.amount : body.bidValue;
    }
    const params = [body.id, `0x${new bignumber_js_1.default(body.bidValue).multipliedBy(new bignumber_js_1.default(10).pow(decimals)).toString(16)}`];
    if (body.bidder) {
        params.push(body.bidder.trim());
    }
    return await helpers_1.helperPrepareSCCall(testnet, b, model_1.InvokeAuctionOperation, methodName, params, undefined, provider, marketplace_1.auction.abi);
};
exports.prepareAuctionBid = prepareAuctionBid;
/**
 * Cancel auction on the auction. Only possible for the seller or the operator. There must be no buyer present for that auction. NFT asset is sent back to the seller.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionCancel = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.InvokeAuctionOperation);
    const params = [body.id];
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.InvokeAuctionOperation, 'cancelAuction', params, undefined, provider, marketplace_1.auction.abi);
};
exports.prepareAuctionCancel = prepareAuctionCancel;
/**
 * Settle auction. There must be buyer present for that auction. NFT will be sent to the bidder, assets to the seller and fee to the operator.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const prepareAuctionSettle = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.InvokeAuctionOperation);
    const params = [body.id];
    return await helpers_1.helperPrepareSCCall(testnet, body, model_1.InvokeAuctionOperation, 'settleAuction', params, undefined, provider, marketplace_1.auction.abi);
};
exports.prepareAuctionSettle = prepareAuctionSettle;
/**
 * Update auction fee.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionUpdateFee = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionUpdateFee(testnet, body, provider), body.signatureId);
exports.sendAuctionUpdateFee = sendAuctionUpdateFee;
/**
 * Update auction fee recipient.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionUpdateFeeRecipient = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionUpdateFeeRecipient(testnet, body, provider), body.signatureId);
exports.sendAuctionUpdateFeeRecipient = sendAuctionUpdateFeeRecipient;
/**
 * Approve NFT transfer for auction to perform listing of the asset.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionApproveNftTransfer = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionApproveNftTransfer(testnet, body, provider), body.signatureId);
exports.sendAuctionApproveNftTransfer = sendAuctionApproveNftTransfer;
/**
 * Approve ERC20 transfer for auction to perform bidding on the asset in the auction.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionApproveErc20Transfer = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionApproveErc20Transfer(testnet, body, provider), body.signatureId);
exports.sendAuctionApproveErc20Transfer = sendAuctionApproveErc20Transfer;
/**
 * Create new auction on the auction contract. Before auction, seller must approve spending of the NFT token for the Auction contract.
 * After auction is created, auction contract transfers the asset to the auction smart contract.
 * Only auction for existing NFTs can be created - seller must be owner of the NFT asset.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionCreate = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionCreate(testnet, body, provider), body.signatureId);
exports.sendAuctionCreate = sendAuctionCreate;
/**
 * Bid auction on the auction. Buyer must either send native assets with this operation, or approve ERC20 token spending before.
 * After auction is sold, it's in a pending state to be processed by the auction. Noone receives the assets unless the auction operator processes that.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionBid = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionBid(testnet, body, provider), body.signatureId);
exports.sendAuctionBid = sendAuctionBid;
/**
 * Cancel auction on the auction. Only possible for the seller or the operator. There must be no buyer present for that auction. NFT asset is sent back to the seller.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionCancel = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionCancel(testnet, body, provider), body.signatureId);
exports.sendAuctionCancel = sendAuctionCancel;
/**
 * Settle auction. There must be buyer present for that auction. NFT will be sent to the bidder, assets to the seller and fee to the operator.
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
const sendAuctionSettle = async (testnet, body, provider) => helpers_1.helperBroadcastTx(body.chain, await exports.prepareAuctionSettle(testnet, body, provider), body.signatureId);
exports.sendAuctionSettle = sendAuctionSettle;
//# sourceMappingURL=data:application/json;base64,