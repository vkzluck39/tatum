"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustodialBatchTransferValidator = void 0;
const class_validator_1 = require("class-validator");
let CustodialBatchTransferValidator = class CustodialBatchTransferValidator {
    defaultMessage(validationArguments) {
        return 'tokenID, amount, contractType, tokenAddress and recipients must have same value. For optional parameters set 0 as a default value.';
    }
    validate(value, validationArguments) {
        var _a, _b, _c;
        const data = validationArguments === null || validationArguments === void 0 ? void 0 : validationArguments.object;
        if (data.recipient.length !== data.contractType.length)
            return false;
        if (data.recipient.length !== ((_a = data.tokenAddress) === null || _a === void 0 ? void 0 : _a.length))
            return false;
        if (data.recipient.length !== ((_b = data.tokenId) === null || _b === void 0 ? void 0 : _b.length))
            return false;
        return data.recipient.length === ((_c = data.amount) === null || _c === void 0 ? void 0 : _c.length);
    }
};
CustodialBatchTransferValidator = __decorate([
    class_validator_1.ValidatorConstraint({ name: 'signatureId', async: false })
], CustodialBatchTransferValidator);
exports.CustodialBatchTransferValidator = CustodialBatchTransferValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9kaWFsQmF0Y2hUcmFuc2ZlclZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbC92YWxpZGF0aW9uL0N1c3RvZGlhbEJhdGNoVHJhbnNmZXJWYWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscURBQXNHO0FBSXRHLElBQWEsK0JBQStCLEdBQTVDLE1BQWEsK0JBQStCO0lBQ2pDLGNBQWMsQ0FBQyxtQkFBeUM7UUFDM0QsT0FBTyxvSUFBb0ksQ0FBQTtJQUMvSSxDQUFDO0lBRU0sUUFBUSxDQUFDLEtBQVUsRUFBRSxtQkFBeUM7O1FBQ2pFLE1BQU0sSUFBSSxHQUFHLG1CQUFtQixhQUFuQixtQkFBbUIsdUJBQW5CLG1CQUFtQixDQUFFLE1BQTJDLENBQUE7UUFDN0UsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU07WUFDbEQsT0FBTyxLQUFLLENBQUE7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sTUFBSyxNQUFBLElBQUksQ0FBQyxZQUFZLDBDQUFFLE1BQU0sQ0FBQTtZQUNuRCxPQUFPLEtBQUssQ0FBQTtRQUNoQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxNQUFLLE1BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsTUFBTSxDQUFBO1lBQzlDLE9BQU8sS0FBSyxDQUFBO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLE1BQUssTUFBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSxNQUFNLENBQUEsQ0FBQTtJQUV4RCxDQUFDO0NBRUosQ0FBQTtBQWpCWSwrQkFBK0I7SUFEM0MscUNBQW1CLENBQUMsRUFBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUMsQ0FBQztHQUM1QywrQkFBK0IsQ0FpQjNDO0FBakJZLDBFQUErQiJ9