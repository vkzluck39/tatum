"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mint721BatchBuiltInPrivateKeyValidator = void 0;
const class_validator_1 = require("class-validator");
const request_1 = require("../request");
let Mint721BatchBuiltInPrivateKeyValidator = class Mint721BatchBuiltInPrivateKeyValidator {
    constructor() {
        this.message = null;
    }
    defaultMessage(validationArguments) {
        if (this.message) {
            return this.message;
        }
        return 'If you fill signatureId or privateKey/secret/fromPrivateKey, then tokenId, contractAddress must be present.';
    }
    validate(value, validationArguments) {
        const data = validationArguments === null || validationArguments === void 0 ? void 0 : validationArguments.object;
        const chains = [request_1.Currency.BSC, request_1.Currency.ETH, request_1.Currency.CELO, request_1.Currency.ONE, request_1.Currency.MATIC, request_1.Currency.KLAY];
        const isAllowedChain = chains.includes(data.chain);
        if (data.minter) {
            if (!isAllowedChain) {
                this.message = `Chain is not supported for external minters. Minter is available only on these chains - ${chains}`;
                return false;
            }
            if (data.fromPrivateKey || data.signatureId) {
                this.message = `If minter is present, no private key or signatureId must be entered. Minter is available only on these chains - ${chains}`;
                return false;
            }
            if (!this.validateRequiredFields(data)) {
                return false;
            }
            return true;
        }
        if (!this.validateRequiredFields(data)) {
            return false;
        }
        if ((!data.fromPrivateKey && !data.signatureId) || (data.fromPrivateKey && data.signatureId)) {
            this.message = 'Field fromPrivateKey or signatureId must be filled.';
            return false;
        }
        return true;
    }
    validateRequiredFields(data) {
        if (data.chain === request_1.Currency.CELO && (!data.feeCurrency || ![request_1.Currency.CELO, request_1.Currency.CUSD, request_1.Currency.CEUR].includes(data.feeCurrency))) {
            this.message = 'CELO chain must have assigned feeCurrency field.';
            return false;
        }
        return true;
    }
};
Mint721BatchBuiltInPrivateKeyValidator = __decorate([
    class_validator_1.ValidatorConstraint({ name: 'builtInPrivateKey', async: false })
], Mint721BatchBuiltInPrivateKeyValidator);
exports.Mint721BatchBuiltInPrivateKeyValidator = Mint721BatchBuiltInPrivateKeyValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWludDcyMUJhdGNoQnVpbHRJblByaXZhdGVLZXlWYWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWwvdmFsaWRhdGlvbi9NaW50NzIxQmF0Y2hCdWlsdEluUHJpdmF0ZUtleVZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFBeUc7QUFDekcsd0NBQXNDO0FBR3RDLElBQWEsc0NBQXNDLEdBQW5ELE1BQWEsc0NBQXNDO0lBQW5EO1FBRVUsWUFBTyxHQUFrQixJQUFJLENBQUM7SUE2Q3hDLENBQUM7SUEzQ1EsY0FBYyxDQUFDLG1CQUF5QztRQUM3RCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyw2R0FBNkcsQ0FBQztJQUN2SCxDQUFDO0lBRU0sUUFBUSxDQUFDLEtBQVUsRUFBRSxtQkFBeUM7UUFDbkUsTUFBTSxJQUFJLEdBQUcsbUJBQW1CLGFBQW5CLG1CQUFtQix1QkFBbkIsbUJBQW1CLENBQUUsTUFBYSxDQUFDO1FBQ2hELE1BQU0sTUFBTSxHQUFHLENBQUMsa0JBQVEsQ0FBQyxHQUFHLEVBQUUsa0JBQVEsQ0FBQyxHQUFHLEVBQUUsa0JBQVEsQ0FBQyxJQUFJLEVBQUUsa0JBQVEsQ0FBQyxHQUFHLEVBQUUsa0JBQVEsQ0FBQyxLQUFLLEVBQUUsa0JBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2RyxNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLDJGQUEyRixNQUFNLEVBQUUsQ0FBQTtnQkFDbEgsT0FBTyxLQUFLLENBQUE7YUFDYjtZQUNELElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLG1IQUFtSCxNQUFNLEVBQUUsQ0FBQTtnQkFDMUksT0FBTyxLQUFLLENBQUE7YUFDYjtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3RDLE9BQU8sS0FBSyxDQUFBO2FBQ2I7WUFDRCxPQUFPLElBQUksQ0FBQTtTQUNaO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxPQUFPLEtBQUssQ0FBQTtTQUNiO1FBQ0QsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzVGLElBQUksQ0FBQyxPQUFPLEdBQUcscURBQXFELENBQUM7WUFDckUsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUVPLHNCQUFzQixDQUFDLElBQVM7UUFDdEMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLGtCQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxrQkFBUSxDQUFDLElBQUksRUFBRSxrQkFBUSxDQUFDLElBQUksRUFBRSxrQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRTtZQUNwSSxJQUFJLENBQUMsT0FBTyxHQUFHLGtEQUFrRCxDQUFBO1lBQ2pFLE9BQU8sS0FBSyxDQUFBO1NBQ2I7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7Q0FDRixDQUFBO0FBL0NZLHNDQUFzQztJQURsRCxxQ0FBbUIsQ0FBQyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7R0FDcEQsc0NBQXNDLENBK0NsRDtBQS9DWSx3RkFBc0MifQ==