"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_1 = require("../request");
const tatum_1 = require("../../connector/tatum");
describe('SignatureId validator tests', () => {
    describe('Validations with PK', () => {
        it('should test mint ETH with private key', async () => {
            await tatum_1.validateBody({
                'chain': request_1.Currency.ETH,
                batchCount: 1,
                'fromPrivateKey': '89f09a62c9601d660dcdbeab15fbecfc07933971465fab3ba9fe1354035d805d',
                'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
            }, request_1.GenerateCustodialAddressBatch);
        });
        it('should test mint ETH with private key - feesCovered false', async () => {
            await tatum_1.validateBody({
                'chain': request_1.Currency.ETH,
                feesCovered: false,
                batchCount: 1,
                'fromPrivateKey': '89f09a62c9601d660dcdbeab15fbecfc07933971465fab3ba9fe1354035d805d',
                'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
            }, request_1.GenerateCustodialAddressBatch);
        });
        it('should not test mint ETH with private key - wrong PK length', async () => {
            try {
                await tatum_1.validateBody({
                    'chain': request_1.Currency.ETH,
                    'url': 'https://www.seznam.cz',
                    batchCount: 1,
                    'fromPrivateKey': '89f09a62c9601d660dcdbeab15fbecfc07933971465fab3ba9fe1354035d805dasdasd89f09a62c9601d660dcdbeab15fbecfc07933971465fab3ba9fe1354035d805dasdasd',
                    'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
                }, request_1.GenerateCustodialAddressBatch);
                fail('Wrong validation');
            }
            catch (e) {
                console.log(e);
            }
        });
        it('should not test mint ETH with private key - signatureId present', async () => {
            try {
                await tatum_1.validateBody({
                    'chain': request_1.Currency.ETH,
                    'url': 'https://www.seznam.cz',
                    batchCount: 1,
                    'fromPrivateKey': '0x89f09a62c9601d660dcdbeab15fbecfc07933971465fab3ba9fe1354035d805',
                    'signatureId': '0x89f09a62c9601d660dcdbeab15fbecfc07933971465fab3ba9fe1354035d805',
                    'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
                }, request_1.GenerateCustodialAddressBatch);
                fail('Wrong validation');
            }
            catch (e) {
                console.log(e);
            }
        });
    });
    describe('Validations with signature ID', () => {
        it('should test mint ETH', async () => {
            await tatum_1.validateBody({
                'chain': request_1.Currency.ETH,
                'url': 'https://www.seznam.cz',
                batchCount: 1,
                'signatureId': 'e23c9cb0-0650-4d41-b8c1-dfa3f9b76fad',
                'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
            }, request_1.GenerateCustodialAddressBatch);
        });
        it('should not test mint ETH - wrong contractAddress length', async () => {
            try {
                await tatum_1.validateBody({
                    'chain': request_1.Currency.ETH,
                    'url': 'https://www.seznam.cz',
                    batchCount: 1,
                    'signatureId': 'e23c9cb0-0650-4d41-b8c1-dfa3f9b76fad',
                    'contractAddress': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
                }, request_1.GenerateCustodialAddressBatch);
                fail('Wrong validation');
            }
            catch (e) {
                console.log(e);
            }
        });
        it('should not test mint ETH - wrong signatureId format', async () => {
            try {
                await tatum_1.validateBody({
                    'chain': request_1.Currency.ETH,
                    'url': 'https://www.seznam.cz',
                    batchCount: 1,
                    'signatureId': 'e23c9cb0-0650-4d41-b8c1-dfa3f9b76fada',
                    'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
                }, request_1.GenerateCustodialAddressBatch);
                fail('Wrong validation');
            }
            catch (e) {
                console.log(e);
            }
        });
    });
    describe('Validations with feesCovered', () => {
        it('should mint without PK or signatureID', async () => {
            await tatum_1.validateBody({
                'chain': request_1.Currency.ETH,
                'url': 'https://www.seznam.cz',
                feesCovered: true,
                batchCount: 1,
                'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
            }, request_1.GenerateCustodialAddressBatch);
        });
        it('should not mint - PK present', async () => {
            try {
                await tatum_1.validateBody({
                    'chain': request_1.Currency.ETH,
                    'url': 'https://www.seznam.cz',
                    feesCovered: true,
                    batchCount: 1,
                    'fromPrivateKey': '89f09a62c9601d660dcdbeab15fbecfc07933971465fab3ba9fe1354035d805d',
                    'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
                }, request_1.GenerateCustodialAddressBatch);
                fail('Should not pass');
            }
            catch (e) {
                console.log(e);
            }
        });
        it('should not mint - signatureId present', async () => {
            try {
                await tatum_1.validateBody({
                    'chain': request_1.Currency.ETH,
                    'url': 'https://www.seznam.cz',
                    feesCovered: true,
                    batchCount: 1,
                    'signatureId': 'e23c9cb0-0650-4d41-b8c1-dfa3f9b76fad',
                    'owner': '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
                }, request_1.GenerateCustodialAddressBatch);
                fail('Should not pass');
            }
            catch (e) {
                console.log(e);
            }
        });
    });
    it('should not mint - feesCovered not present', async () => {
        try {
            await tatum_1.validateBody({
                'chain': request_1.Currency.ETH,
                'url': 'https://www.seznam.cz',
                owner: '0x45871ED5F15203C0ce791eFE5f4B5044833aE10e',
                batchCount: 1,
            }, request_1.GenerateCustodialAddressBatch);
            fail('Should not pass');
        }
        catch (e) {
            console.log(e);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlSWRWYWxpZGF0b3Iuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbC92YWxpZGF0aW9uL3NpZ25hdHVyZUlkVmFsaWRhdG9yLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBb0U7QUFDcEUsaURBQW9EO0FBRXBELFFBQVEsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7SUFDM0MsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxFQUFFLENBQUMsdUNBQXVDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDckQsTUFBTSxvQkFBWSxDQUFDO2dCQUNqQixPQUFPLEVBQUUsa0JBQVEsQ0FBQyxHQUFHO2dCQUVyQixVQUFVLEVBQUUsQ0FBQztnQkFDYixnQkFBZ0IsRUFBRSxrRUFBa0U7Z0JBQ3BGLE9BQU8sRUFBRSw0Q0FBNEM7YUFDdEQsRUFBRSx1Q0FBNkIsQ0FBQyxDQUFBO1FBQ25DLENBQUMsQ0FBQyxDQUFBO1FBQ0YsRUFBRSxDQUFDLDJEQUEyRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pFLE1BQU0sb0JBQVksQ0FBQztnQkFDakIsT0FBTyxFQUFFLGtCQUFRLENBQUMsR0FBRztnQkFDckIsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLFVBQVUsRUFBRSxDQUFDO2dCQUNiLGdCQUFnQixFQUFFLGtFQUFrRTtnQkFDcEYsT0FBTyxFQUFFLDRDQUE0QzthQUN0RCxFQUFFLHVDQUE2QixDQUFDLENBQUE7UUFDbkMsQ0FBQyxDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsNkRBQTZELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDM0UsSUFBSTtnQkFDRixNQUFNLG9CQUFZLENBQUM7b0JBQ2pCLE9BQU8sRUFBRSxrQkFBUSxDQUFDLEdBQUc7b0JBQ3JCLEtBQUssRUFBRSx1QkFBdUI7b0JBRTlCLFVBQVUsRUFBRSxDQUFDO29CQUNiLGdCQUFnQixFQUFFLDhJ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