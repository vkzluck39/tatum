"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBtcBasedBlockchain = exports.To = exports.FromUTXO = exports.FromAddress = void 0;
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const SignatureIdValidator_1 = require("../validation/SignatureIdValidator");
const TransferBtcValidator_1 = require("../validation/TransferBtcValidator");
class PrivateKeyOrSignatureIdBtcBased {
}
__decorate([
    class_validator_1.ValidateIf(o => o.privateKey || !o.signatureId),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Length(52, 256),
    __metadata("design:type", String)
], PrivateKeyOrSignatureIdBtcBased.prototype, "privateKey", void 0);
__decorate([
    class_validator_1.ValidateIf(o => o.signatureId || !o.privateKey),
    class_validator_1.Validate(SignatureIdValidator_1.SignatureIdValidator),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Length(36, 36),
    class_validator_1.IsUUID('4'),
    __metadata("design:type", String)
], PrivateKeyOrSignatureIdBtcBased.prototype, "signatureId", void 0);
class FromAddress extends PrivateKeyOrSignatureIdBtcBased {
}
__decorate([
    class_validator_1.IsNotEmpty(),
    class_validator_1.Length(30, 110),
    __metadata("design:type", String)
], FromAddress.prototype, "address", void 0);
exports.FromAddress = FromAddress;
class FromUTXO extends PrivateKeyOrSignatureIdBtcBased {
}
__decorate([
    class_validator_1.IsNotEmpty(),
    class_validator_1.Length(64, 64),
    __metadata("design:type", String)
], FromUTXO.prototype, "txHash", void 0);
__decorate([
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(0),
    class_validator_1.Max(4294967295),
    __metadata("design:type", Number)
], FromUTXO.prototype, "index", void 0);
exports.FromUTXO = FromUTXO;
class To {
}
__decorate([
    class_validator_1.IsNotEmpty(),
    class_validator_1.Length(30, 110),
    __metadata("design:type", String)
], To.prototype, "address", void 0);
__decorate([
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(0),
    __metadata("design:type", Number)
], To.prototype, "value", void 0);
exports.To = To;
/**
 * Transfer BTC based blockchain.
 *
 * This class is used for transferring assets of all BTC based blockchains.
 */
class TransferBtcBasedBlockchain {
}
__decorate([
    class_validator_1.ValidateIf(o => (o.fromUTXO && o.fromAddress) || !o.fromUTXO),
    class_validator_1.Validate(TransferBtcValidator_1.TransferBtcValidator),
    class_validator_1.IsNotEmpty(),
    class_validator_1.ValidateNested({ each: true }),
    class_transformer_1.Type(() => FromAddress),
    __metadata("design:type", Array)
], TransferBtcBasedBlockchain.prototype, "fromAddress", void 0);
__decorate([
    class_validator_1.ValidateIf(o => (o.fromUTXO && o.fromAddress) || !o.fromAddress),
    class_validator_1.Validate(TransferBtcValidator_1.TransferBtcValidator),
    class_validator_1.IsNotEmpty(),
    class_validator_1.ValidateNested({ each: true }),
    class_transformer_1.Type(() => FromUTXO),
    __metadata("design:type", Array)
], TransferBtcBasedBlockchain.prototype, "fromUTXO", void 0);
__decorate([
    class_validator_1.ArrayNotEmpty(),
    class_validator_1.ValidateNested({ each: true }),
    class_transformer_1.Type(() => To),
    __metadata("design:type", Array)
], TransferBtcBasedBlockchain.prototype, "to", void 0);
exports.TransferBtcBasedBlockchain = TransferBtcBasedBlockchain;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNmZXJCdGNCYXNlZEJsb2NrY2hhaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9kZWwvcmVxdWVzdC9UcmFuc2ZlckJ0Y0Jhc2VkQmxvY2tjaGFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSx5REFBd0M7QUFDeEMscURBU3dCO0FBQ3hCLDZFQUF5RTtBQUN6RSw2RUFBeUU7QUFFekUsTUFBTSwrQkFBK0I7Q0FrQnBDO0FBWEc7SUFIQyw0QkFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDL0MsNEJBQVUsRUFBRTtJQUNaLHdCQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQzs7bUVBQ1c7QUFVM0I7SUFMQyw0QkFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFDL0MsMEJBQVEsQ0FBQywyQ0FBb0IsQ0FBQztJQUM5Qiw0QkFBVSxFQUFFO0lBQ1osd0JBQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2Qsd0JBQU0sQ0FBQyxHQUFHLENBQUM7O29FQUNnQjtBQUdoQyxNQUFhLFdBQVksU0FBUSwrQkFBK0I7Q0FPL0Q7QUFERztJQUZDLDRCQUFVLEVBQUU7SUFDWix3QkFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7OzRDQUNPO0FBTjNCLGtDQU9DO0FBRUQsTUFBYSxRQUFTLFNBQVEsK0JBQStCO0NBZ0I1RDtBQVRHO0lBRkMsNEJBQVUsRUFBRTtJQUNaLHdCQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7d0NBQ087QUFRdEI7SUFIQyw0QkFBVSxFQUFFO0lBQ1oscUJBQUcsQ0FBQyxDQUFDLENBQUM7SUFDTixxQkFBRyxDQUFDLFVBQVUsQ0FBQzs7dUNBQ0s7QUFmekIsNEJBZ0JDO0FBRUQsTUFBYSxFQUFFO0NBY2Q7QUFSRztJQUZDLDRCQUFVLEVBQUU7SUFDWix3QkFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7O21DQUNPO0FBT3ZCO0lBRkMsNEJBQVUsRUFBRTtJQUNaLHFCQUFHLENBQUMsQ0FBQyxDQUFDOztpQ0FDYztBQWJ6QixnQkFjQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFhLDBCQUEwQjtDQWlDdEM7QUFyQkc7SUFMQyw0QkFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDN0QsMEJBQVEsQ0FBQywyQ0FBb0IsQ0FBQztJQUM5Qiw0QkFBVSxFQUFFO0lBQ1osZ0NBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUM5Qix3QkFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQzs7K0RBQ1c7QUFZbkM7SUFMQyw0QkFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDaEUsMEJBQVEsQ0FBQywyQ0FBb0IsQ0FBQztJQUM5Qiw0QkFBVSxFQUFFO0lBQ1osZ0NBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUM5Qix3QkFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7NERBQ1E7QUFRN0I7SUFIQywrQkFBYSxFQUFFO0lBQ2YsZ0NBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUM5Qix3QkFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7c0RBQ0M7QUFoQ3BCLGdFQWlDQyJ9