"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendBscOffchainTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const web3_utils_1 = require("web3-utils");
const tatum_1 = require("../connector/tatum");
const ledger_1 = require("../ledger");
const model_1 = require("../model");
const transaction_1 = require("../transaction");
const wallet_1 = require("../wallet");
const common_1 = require("./common");
const kms_1 = require("./kms");
/**
 * Send Bsc transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
const sendBscOffchainTransaction = async (testnet, body, provider) => {
    if (body.signatureId) {
        return kms_1.offchainTransferBscKMS(body);
    }
    await tatum_1.validateBody(body, model_1.TransferEthOffchain);
    const { mnemonic, index, privateKey, gasLimit, gasPrice, nonce } = body, withdrawal = __rest(body, ["mnemonic", "index", "privateKey", "gasLimit", "gasPrice", "nonce"]);
    const { amount, address } = withdrawal;
    const fromPriv = mnemonic && index !== undefined ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.BSC, testnet, mnemonic, index) : privateKey;
    const account = await ledger_1.getAccountById(withdrawal.senderAccountId);
    let txData;
    const fee = {
        gasLimit: gasLimit || '21000',
        gasPrice: gasPrice || '20',
    };
    if (model_1.BSC_BASED_CURRENCIES.includes(account.currency)) {
        txData = await transaction_1.prepareBscOrBep20SignedTransaction({
            amount,
            fromPrivateKey: fromPriv,
            currency: account.currency,
            fee,
            nonce,
            to: address
        }, provider);
    }
    else {
        fee.gasLimit = '100000';
        const vc = await ledger_1.getVirtualCurrencyByName(account.currency);
        txData = await transaction_1.prepareCustomBep20SignedTransaction({
            amount,
            fee,
            fromPrivateKey: fromPriv,
            to: address,
            digits: vc.precision,
            nonce,
            contractAddress: vc.erc20Address
        }, provider);
    }
    // @ts-ignore
    withdrawal.fee = web3_utils_1.fromWei(new bignumber_js_1.default(fee.gasLimit).multipliedBy(web3_utils_1.toWei(fee.gasPrice, 'gwei')).toString(), 'ether');
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: model_1.Currency.BSC })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
    }
};
exports.sendBscOffchainTransaction = sendBscOffchainTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnNjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL29mZmNoYWluL2JzYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdFQUFvQztBQUNwQywyQ0FBeUM7QUFDekMsOENBQStDO0FBQy9DLHNDQUFrRTtBQUNsRSxvQ0FBNEU7QUFDNUUsZ0RBQXNHO0FBQ3RHLHNDQUF3RDtBQUN4RCxxQ0FBNkY7QUFDN0YsK0JBQThDO0FBRTlDOzs7Ozs7O0dBT0c7QUFDSSxNQUFNLDBCQUEwQixHQUFHLEtBQUssRUFBRSxPQUFnQixFQUFFLElBQXlCLEVBQUUsUUFBaUIsRUFBRSxFQUFFO0lBQy9HLElBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNqQixPQUFPLDRCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFBO0tBQ3RDO0lBQ0QsTUFBTSxvQkFBWSxDQUFDLElBQUksRUFBRSwyQkFBbUIsQ0FBQyxDQUFBO0lBQzdDLE1BQU0sRUFDRixRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssS0FDdEQsSUFBSSxFQUR1RCxVQUFVLFVBQ3JFLElBQUksRUFGRixvRUFFTCxDQUFPLENBQUE7SUFDUixNQUFNLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBQyxHQUFHLFVBQVUsQ0FBQTtJQUVwQyxNQUFNLFFBQVEsR0FBRyxRQUFRLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSx1Q0FBOEIsQ0FBQyxnQkFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFvQixDQUFBO0lBRXRKLE1BQU0sT0FBTyxHQUFHLE1BQU0sdUJBQWMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDaEUsSUFBSSxNQUFNLENBQUE7SUFDVixNQUFNLEdBQUcsR0FBRztRQUNSLFFBQVEsRUFBRSxRQUFRLElBQUksT0FBTztRQUM3QixRQUFRLEVBQUUsUUFBUSxJQUFJLElBQUk7S0FDN0IsQ0FBQTtJQUNELElBQUksNEJBQW9CLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxNQUFNLEdBQUcsTUFBTSxnREFBa0MsQ0FBQztZQUM5QyxNQUFNO1lBQ04sY0FBYyxFQUFFLFFBQVE7WUFDeEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFvQjtZQUN0QyxHQUFHO1lBQ0gsS0FBSztZQUNMLEVBQUUsRUFBRSxPQUFPO1NBQ2QsRUFBRSxRQUFRLENBQUMsQ0FBQTtLQUNmO1NBQU07UUFDSCxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN2QixNQUFNLEVBQUUsR0FBRyxNQUFNLGlDQUF3QixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMzRCxNQUFNLEdBQUcsTUFBTSxpREFBbUMsQ0FBQztZQUMvQyxNQUFNO1lBQ04sR0FBRztZQUNILGNBQWMsRUFBRSxRQUFRO1lBQ3hCLEVBQUUsRUFBRSxPQUFPO1lBQ1gsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFtQjtZQUM5QixLQUFLO1lBQ0wsZUFBZSxFQUFFLEVBQUUsQ0FBQyxZQUFzQjtTQUM3QyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0tBQ2Y7SUFDRCxhQUFhO0lBQ2IsVUFBVSxDQUFDLEdBQUcsR0FBRyxvQkFBTyxDQUFDLElBQUksc0JBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLGtCQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ25ILE1BQU0sRUFBQyxFQUFFLEVBQUMsR0FBRyxNQUFNLGdDQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3RELElBQUk7UUFDQSx1Q0FBVyxNQUFNLDBCQUFpQixDQUFDLEVBQUMsTUFBTSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLGdCQUFRLENBQUMsR0FBRyxFQUFDLENBQUMsS0FBRSxFQUFFLElBQUM7S0FDOUY7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDaEIsSUFBSTtZQUNBLE1BQU0saUNBQXdCLENBQUMsRUFBRSxDQUFDLENBQUE7U0FDckM7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDZCxPQUFPLEVBQUMsRUFBRSxFQUFDLENBQUE7U0FDZDtLQUNKO0FBQ0wsQ0FBQyxDQUFBO0FBdERZLFFBQUEsMEJBQTBCLDhCQXNEdEMifQ==