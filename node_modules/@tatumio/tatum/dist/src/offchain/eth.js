"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareEthErc20SignedOffchainTransaction = exports.prepareEthSignedOffchainTransaction = exports.signEthOffchainKMSTransaction = exports.sendEthErc20OffchainTransaction = exports.sendEthOffchainTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const constants_1 = require("../constants");
const token_abi_1 = __importDefault(require("../contracts/erc20/token_abi"));
const ledger_1 = require("../ledger");
const model_1 = require("../model");
const transaction_1 = require("../transaction");
const wallet_1 = require("../wallet");
const common_1 = require("./common");
const kms_1 = require("./kms");
/**
 * Send Ethereum transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
const sendEthOffchainTransaction = async (testnet, body, provider) => {
    if (body.signatureId) {
        return kms_1.offchainTransferEthKMS(body);
    }
    await tatum_1.validateBody(body, model_1.TransferEthOffchain);
    const { mnemonic, index, privateKey, nonce } = body, withdrawal = __rest(body, ["mnemonic", "index", "privateKey", "nonce"]);
    const { amount, address } = withdrawal;
    let fromPriv;
    if (mnemonic && index !== undefined) {
        fromPriv = mnemonic && index ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ETH, testnet, mnemonic, index) : privateKey;
    }
    else if (privateKey) {
        fromPriv = privateKey;
    }
    else {
        throw new Error('No mnemonic or private key is present.');
    }
    const web3 = await transaction_1.getClient(provider, fromPriv);
    const gasPrice = body.gasPrice ? web3.utils.toWei(body.gasPrice, 'gwei') : await transaction_1.ethGetGasPriceInWei();
    const account = await ledger_1.getAccountById(withdrawal.senderAccountId);
    const { txData, gasLimit } = await exports.prepareEthSignedOffchainTransaction({
        amount,
        privateKey: fromPriv,
        address,
        currency: account.currency,
        web3,
        gasPrice,
        nonce,
        gasLimit: body.gasLimit
    });
    // @ts-ignore
    withdrawal.fee = new bignumber_js_1.default(web3.utils.fromWei(new bignumber_js_1.default(body.gasLimit || gasLimit).multipliedBy(gasPrice).toString(), 'ether')).toString();
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: model_1.Currency.ETH })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
        throw e;
    }
};
exports.sendEthOffchainTransaction = sendEthOffchainTransaction;
/**
 * Send Ethereum ERC20 transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
 */
const sendEthErc20OffchainTransaction = async (testnet, body, provider) => {
    await tatum_1.validateBody(body, model_1.TransferEthOffchain);
    const { mnemonic, index, privateKey, nonce } = body, withdrawal = __rest(body, ["mnemonic", "index", "privateKey", "nonce"]);
    const { amount, address } = withdrawal;
    let fromPriv;
    if (mnemonic && index !== undefined) {
        fromPriv = mnemonic && index ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.ETH, testnet, mnemonic, index) : privateKey;
    }
    else if (privateKey) {
        fromPriv = privateKey;
    }
    else {
        throw new Error('No mnemonic or private key is present.');
    }
    const web3 = await transaction_1.getClient(provider, fromPriv);
    const gasPrice = body.gasPrice ? web3.utils.toWei(body.gasPrice, 'gwei') : await transaction_1.ethGetGasPriceInWei();
    const account = await ledger_1.getAccountById(withdrawal.senderAccountId);
    if (model_1.ETH_BASED_CURRENCIES.includes(account.currency)) {
        return exports.sendEthOffchainTransaction(testnet, body, provider);
    }
    const vc = await ledger_1.getVirtualCurrencyByName(account.currency);
    const { txData, gasLimit } = await exports.prepareEthErc20SignedOffchainTransaction({
        amount,
        privateKey: fromPriv,
        address,
        web3,
        tokenAddress: vc.erc20Address,
        gasPrice,
        nonce,
        gasLimit: body.gasLimit
    });
    // @ts-ignore
    withdrawal.fee = new bignumber_js_1.default(web3.utils.fromWei(new bignumber_js_1.default(gasLimit).multipliedBy(gasPrice).toString(), 'ether')).toString();
    const { id } = await common_1.offchainStoreWithdrawal(withdrawal);
    try {
        return Object.assign(Object.assign({}, await common_1.offchainBroadcast({ txData, withdrawalId: id, currency: model_1.Currency.ETH })), { id });
    }
    catch (e) {
        console.error(e);
        try {
            await common_1.offchainCancelWithdrawal(id);
        }
        catch (e1) {
            console.log(e);
            return { id };
        }
        throw e;
    }
};
exports.sendEthErc20OffchainTransaction = sendEthErc20OffchainTransaction;
/**
 * Sign Ethereum pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const signEthOffchainKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {
    if (tx.chain !== model_1.Currency.ETH) {
        throw Error('Unsupported chain.');
    }
    const client = await transaction_1.getClient(provider, fromPrivateKey);
    const transactionConfig = JSON.parse(tx.serializedTransaction);
    transactionConfig.gas = await client.eth.estimateGas(transactionConfig);
    if (!transactionConfig.nonce) {
        transactionConfig.nonce = await blockchain_1.ethGetTransactionsCount(client.eth.defaultAccount);
    }
    if (!transactionConfig.gasPrice || transactionConfig.gasPrice === '0' || transactionConfig.gasPrice === 0 || transactionConfig.gasPrice === '0x0') {
        transactionConfig.gasPrice = await transaction_1.ethGetGasPriceInWei();
    }
    return (await client.eth.accounts.signTransaction(transactionConfig, fromPrivateKey)).rawTransaction;
};
exports.signEthOffchainKMSTransaction = signEthOffchainKMSTransaction;
/**
 * Sign Ethereum transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @returns transaction data to be broadcast to blockchain.
 * @param body
 */
const prepareEthSignedOffchainTransaction = async (body) => {
    await tatum_1.validateBody(body, model_1.PrepareEthSignedOffchainTransaction);
    const { currency, address, amount, gasLimit, gasPrice, nonce, privateKey, web3, } = body;
    let tx;
    if (currency === model_1.Currency.ETH) {
        tx = {
            from: 0,
            to: address.trim(),
            value: web3.utils.toWei(amount, 'ether'),
            gasPrice,
            nonce,
        };
    }
    else {
        if (!Object.keys(constants_1.CONTRACT_ADDRESSES).includes(currency)) {
            throw new Error('Unsupported ETH ERC20 blockchain.');
        }
        // @ts-ignore
        const contract = new web3.eth.Contract(token_abi_1.default, constants_1.CONTRACT_ADDRESSES[currency]);
        tx = {
            from: 0,
            to: constants_1.CONTRACT_ADDRESSES[currency],
            data: contract.methods.transfer(address.trim(), `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(constants_1.CONTRACT_DECIMALS[currency])).toString(16)}`).encodeABI(),
            gasPrice,
            nonce,
        };
    }
    tx.gas = gasLimit || await web3.eth.estimateGas(tx);
    return {
        txData: (await web3.eth.accounts.signTransaction(tx, privateKey)).rawTransaction,
        gasLimit: tx.gas,
    };
};
exports.prepareEthSignedOffchainTransaction = prepareEthSignedOffchainTransaction;
/**
 * Sign Ethereum custom ERC20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @returns transaction data to be broadcast to blockchain.
 * @param body
 */
const prepareEthErc20SignedOffchainTransaction = async (body) => {
    await tatum_1.validateBody(body, model_1.PrepareEthErc20SignedOffchainTransaction);
    const { amount, privateKey, address, gasPrice, nonce, tokenAddress, web3, gasLimit, } = body;
    // @ts-ignore
    const contract = new web3.eth.Contract(token_abi_1.default, tokenAddress);
    const tx = {
        from: 0,
        to: tokenAddress.trim(),
        data: contract.methods.transfer(address.trim(), `0x${new bignumber_js_1.default(amount).multipliedBy(new bignumber_js_1.default(10).pow(18)).toString(16)}`).encodeABI(),
        gasPrice,
        nonce,
    };
    tx.gas = gasLimit || await web3.eth.estimateGas(tx);
    return {
        txData: (await web3.eth.accounts.signTransaction(tx, privateKey)).rawTransaction,
        gasLimit: tx.gas,
    };
};
exports.prepareEthErc20SignedOffchainTransaction = prepareEthErc20SignedOffchainTransaction;
//# sourceMappingURL=data:application/json;base64,