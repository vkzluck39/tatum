"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.offchainCompleteWithdrawal = exports.offchainCancelWithdrawal = exports.offchainStoreWithdrawal = exports.offchainBroadcast = exports.getDepositAddressesForAccount = exports.removeDepositAddress = exports.registerTronTrc = exports.storeTrcContractAddress = exports.storeErc20ContractAddress = exports.registerEthereumErc20 = exports.assignDepositAddress = exports.getWithdrawals = exports.checkAddressExists = exports.generateDepositAddresses = exports.generateDepositAddress = void 0;
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
const CreateOffchainAddressesBatch_1 = require("../model/request/CreateOffchainAddressesBatch");
const CreateTrcOffchain_1 = require("../model/request/CreateTrcOffchain");
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/generateDepositAddress" target="_blank">Tatum API documentation</a>
 */
const generateDepositAddress = async (id, index) => {
    const url = `/v3/offchain/account/${id}/address`;
    return tatum_1.post(index === undefined ? url : `${url}?index=${index}`);
};
exports.generateDepositAddress = generateDepositAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/generateDepositAddressesBatch" target="_blank">Tatum API documentation</a>
 */
const generateDepositAddresses = async (batch) => tatum_1.post(`/v3/offchain/account/address/batch`, batch, CreateOffchainAddressesBatch_1.AddressBatch);
exports.generateDepositAddresses = generateDepositAddresses;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/addressExists" target="_blank">Tatum API documentation</a>
 */
const checkAddressExists = async (address, currency, index) => {
    const url = `/v3/offchain/account/address/${address}/${currency}`;
    return tatum_1.get(index === undefined ? url : `${url}?index=${index}`);
};
exports.checkAddressExists = checkAddressExists;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/GetWithdrawals" target="_blank">Tatum API documentation</a>
 */
const getWithdrawals = async (status, currency, pageSize = 50, offset = 0) => {
    let url = `/v3/offchain/withdrawal?pageSize=${pageSize}&offset=${offset}`;
    if (status) {
        url += `&status=${status}`;
    }
    if (currency) {
        url += `&currency=${currency}`;
    }
    return tatum_1.get(url);
};
exports.getWithdrawals = getWithdrawals;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/assignAddress" target="_blank">Tatum API documentation</a>
 */
const assignDepositAddress = async (id, address) => tatum_1.post(`/v3/offchain/account/${id}/address/${address}`);
exports.assignDepositAddress = assignDepositAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/createErc20" target="_blank">Tatum API documentation</a>
 */
const registerEthereumErc20 = async (data) => tatum_1.post(`/v3/offchain/ethereum/erc20`, data, model_1.CreateErc20Offchain);
exports.registerEthereumErc20 = registerEthereumErc20;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/storeErc20Address" target="_blank">Tatum API documentation</a>
 */
const storeErc20ContractAddress = async (name, address) => tatum_1.post(`/v3/offchain/ethereum/erc20/${name}/${address}`);
exports.storeErc20ContractAddress = storeErc20ContractAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/storeTrcAddress" target="_blank">Tatum API documentation</a>
 */
const storeTrcContractAddress = async (name, address) => tatum_1.post(`/v3/offchain/tron/trc/${name}/${address}`);
exports.storeTrcContractAddress = storeTrcContractAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/createTrc" target="_blank">Tatum API documentation</a>
 */
const registerTronTrc = async (data) => tatum_1.post(`/v3/offchain/tron/trc`, data, CreateTrcOffchain_1.CreateTrcOffchain);
exports.registerTronTrc = registerTronTrc;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/removeAddress" target="_blank">Tatum API documentation</a>
 */
const removeDepositAddress = async (id, address) => tatum_1.httpDelete(`/v3/offchain/account/${id}/address/${address}`);
exports.removeDepositAddress = removeDepositAddress;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/getAllDepositAddresses" target="_blank">Tatum API documentation</a>
 */
const getDepositAddressesForAccount = async (id) => tatum_1.get(`/v3/offchain/account/${id}/address`);
exports.getDepositAddressesForAccount = getDepositAddressesForAccount;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/broadcastBlockchainTransaction" target="_blank">Tatum API documentation</a>
 */
const offchainBroadcast = async (data) => tatum_1.post(`/v3/offchain/withdrawal/broadcast`, data, model_1.BroadcastWithdrawal);
exports.offchainBroadcast = offchainBroadcast;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/storeWithdrawal" target="_blank">Tatum API documentation</a>
 */
const offchainStoreWithdrawal = async (data) => tatum_1.post(`/v3/offchain/withdrawal`, data);
exports.offchainStoreWithdrawal = offchainStoreWithdrawal;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/cancelInProgressWithdrawal" target="_blank">Tatum API documentation</a>
 */
const offchainCancelWithdrawal = async (id, revert = true) => tatum_1.httpDelete(`/v3/offchain/withdrawal/${id}?revert=${revert}`);
exports.offchainCancelWithdrawal = offchainCancelWithdrawal;
/**
 * For more details, see <a href="https://tatum.io/apidoc#operation/completeWithdrawal" target="_blank">Tatum API documentation</a>
 */
const offchainCompleteWithdrawal = async (id, txId) => tatum_1.put(`/v3/offchain/withdrawal/${id}/${txId}`);
exports.offchainCompleteWithdrawal = offchainCompleteWithdrawal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL29mZmNoYWluL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBK0Q7QUFDL0Qsb0NBUWlCO0FBQ2pCLGdHQUEwRTtBQUMxRSwwRUFBb0U7QUFFcEU7O0dBRUc7QUFDSSxNQUFNLHNCQUFzQixHQUFHLEtBQUssRUFBRSxFQUFVLEVBQUUsS0FBYyxFQUFvQixFQUFFO0lBQ3pGLE1BQU0sR0FBRyxHQUFHLHdCQUF3QixFQUFFLFVBQVUsQ0FBQTtJQUNoRCxPQUFPLFlBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxVQUFVLEtBQUssRUFBRSxDQUFDLENBQUE7QUFDcEUsQ0FBQyxDQUFBO0FBSFksUUFBQSxzQkFBc0IsMEJBR2xDO0FBRUQ7O0dBRUc7QUFDSSxNQUFNLHdCQUF3QixHQUFHLEtBQUssRUFBRSxLQUFtQixFQUFzQixFQUFFLENBQUMsWUFBSSxDQUFDLG9DQUFvQyxFQUFFLEtBQUssRUFBRSwyQ0FBWSxDQUFDLENBQUE7QUFBN0ksUUFBQSx3QkFBd0IsNEJBQXFIO0FBRTFKOztHQUVHO0FBQ0ksTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLFFBQWdCLEVBQUUsS0FBYyxFQUFvQixFQUFFO0lBQzVHLE1BQU0sR0FBRyxHQUFHLGdDQUFnQyxPQUFPLElBQUksUUFBUSxFQUFFLENBQUE7SUFDakUsT0FBTyxXQUFHLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsVUFBVSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0FBQ25FLENBQUMsQ0FBQTtBQUhZLFFBQUEsa0JBQWtCLHNCQUc5QjtBQUVEOztHQUVHO0FBQ0ksTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLE1BQWUsRUFBRSxR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