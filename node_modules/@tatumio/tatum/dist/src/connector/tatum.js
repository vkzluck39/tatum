"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateBody = exports.httpDelete = exports.put = exports.postMultiForm = exports.post = exports.get = exports.axios = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_retry_1 = __importStar(require("axios-retry"));
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const constants_1 = require("../constants");
exports.axios = axios_1.default.create({
    httpAgent: new http_1.default.Agent({ keepAlive: true }),
    httpsAgent: new https_1.default.Agent({ keepAlive: true })
});
// In case of 429 Too Many Requests response error, request is triggered again
axios_retry_1.default(exports.axios, {
    retryDelay: () => process.env.TATUM_RETRY_DELAY ? Number(process.env.TATUM_RETRY_DELAY) : constants_1.TATUM_RETRY_DELAY,
    retries: process.env.TATUM_RETRIES ? Number(process.env.TATUM_RETRIES) : constants_1.TATUM_RETRIES,
    retryCondition: (error) => { var _a; return axios_retry_1.isNetworkOrIdempotentRequestError(error) || ((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) === 429; }
});
const baseUrl = () => process.env.TATUM_API_URL || constants_1.TATUM_API_URL;
const headers = () => ({ headers: { 'x-api-key': process.env.TATUM_API_KEY, 'x-testnet-type': process.env.TESTNET_TYPE || 'ethereum-ropsten' } });
const get = async (url) => {
    const { data } = await exports.axios.get(`${baseUrl()}${url}`, headers());
    return data;
};
exports.get = get;
// eslint-disable-next-line @typescript-eslint/ban-types
const post = async (url, body, classType) => {
    await exports.validateBody(body, classType);
    const { data } = await exports.axios.post(`${baseUrl()}${url}`, body, headers());
    return data;
};
exports.post = post;
// eslint-disable-next-line @typescript-eslint/ban-types
const postMultiForm = async (url, body) => {
    const h = headers();
    h.headers = Object.assign(Object.assign({}, h.headers), body.getHeaders());
    const { data } = await exports.axios.post(`${baseUrl()}${url}`, body, h);
    return data;
};
exports.postMultiForm = postMultiForm;
// eslint-disable-next-line @typescript-eslint/ban-types
const put = async (url, body, classType) => {
    await exports.validateBody(body, classType);
    const { data } = await exports.axios.put(`${baseUrl()}${url}`, body, headers());
    return data;
};
exports.put = put;
const httpDelete = async (url) => {
    await exports.axios.delete(`${baseUrl()}${url}`, headers());
};
exports.httpDelete = httpDelete;
// eslint-disable-next-line @typescript-eslint/ban-types
const validateBody = async (body, classType) => {
    if (classType) {
        const classInstance = class_transformer_1.plainToClass(classType, body);
        await class_validator_1.validateOrReject(classInstance);
    }
};
exports.validateBody = validateBody;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGF0dW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29ubmVjdG9yL3RhdHVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrREFBc0I7QUFDdEIsMkRBQTBFO0FBQzFFLHlEQUErQztBQUUvQyxxREFBaUQ7QUFFakQsZ0RBQXdCO0FBQ3hCLGtEQUEwQjtBQUMxQiw0Q0FBNkU7QUFFaEUsUUFBQSxLQUFLLEdBQUcsZUFBQyxDQUFDLE1BQU0sQ0FBQztJQUM1QixTQUFTLEVBQUUsSUFBSSxjQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDO0lBQzVDLFVBQVUsRUFBRSxJQUFJLGVBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUM7Q0FDL0MsQ0FBQyxDQUFDO0FBRUgsOEVBQThFO0FBQzlFLHFCQUFVLENBQUMsYUFBSyxFQUFFO0lBQ2hCLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyw2QkFBaUI7SUFDM0csT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMseUJBQWE7SUFDdEYsY0FBYyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsV0FBQyxPQUFBLCtDQUFpQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUEsTUFBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsUUFBUSwwQ0FBRSxNQUFNLE1BQUssR0FBRyxDQUFBLEVBQUE7Q0FDdkcsQ0FBQyxDQUFDO0FBRUgsTUFBTSxP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