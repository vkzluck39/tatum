"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ipfsDelete = exports.ipfsGet = exports.ipfsUpload = void 0;
const form_data_1 = __importDefault(require("form-data"));
const tatum_1 = require("../connector/tatum");
/**
 * Stores file on the IPFS. This operation is available only for paid plans.
 * For more details, see <a href="https://tatum.io/apidoc#operation/StoreIPFS" target="_blank">Tatum API documentation</a>
 */
/**
 * Upload file to the IPFS storage.
 * @param file Data buffer of the file
 * @param fileName Name of the file to upload.
 */
const ipfsUpload = async (file, fileName) => {
    const body = new form_data_1.default();
    body.append('file', file, fileName);
    return await tatum_1.postMultiForm('/v3/ipfs', body);
};
exports.ipfsUpload = ipfsUpload;
/**
 * Gets data from the IPFS. Every 100 kB of data costs 1 additional credit.
 * For more details, see <a href="https://tatum.io/apidoc#operation/StoreIPFS" target="_blank">Tatum API documentation</a>
 */
const ipfsGet = async (id) => tatum_1.get(`/v3/ipfs/${id}`);
exports.ipfsGet = ipfsGet;
/**
 * Unpin the data from the IPFS. After this operation, credits won't be charged for a storage, but file will keep exists on the IPFS.
 * For more details, see <a href="https://tatum.io/apidoc#operation/StoreIPFS" target="_blank">Tatum API documentation</a>
 */
const ipfsDelete = async (id) => tatum_1.httpDelete(`/v3/ipfs/${id}`);
exports.ipfsDelete = ipfsDelete;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBmcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yYWdlL2lwZnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMERBQWlDO0FBQ2pDLDhDQUFrRTtBQUVsRTs7O0dBR0c7QUFFSDs7OztHQUlHO0FBQ0ksTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLElBQVksRUFBRSxRQUFnQixFQUFpQyxFQUFFO0lBQzlGLE1BQU0sSUFBSSxHQUFHLElBQUksbUJBQVEsRUFBRSxDQUFDO0lBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwQyxPQUFPLE1BQU0scUJBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDO0FBSlcsUUFBQSxVQUFVLGNBSXJCO0FBQ0Y7OztHQUdHO0FBQ0ksTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEVBQVUsRUFBZ0IsRUFBRSxDQUFDLFdBQUcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFBcEUsUUFBQSxPQUFPLFdBQTZEO0FBQ2pGOzs7R0FHRztBQUNJLE1BQU0sVUFBVSxHQUFHLEtBQUssRUFBRSxFQUFVLEVBQWlCLEVBQUUsQ0FBQyxrQkFBVSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUEvRSxRQUFBLFVBQVUsY0FBcUUifQ==