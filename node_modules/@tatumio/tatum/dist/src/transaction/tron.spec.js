"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const blockchain_1 = require("../blockchain");
const token_bytecode_1 = __importDefault(require("../contracts/trc20/token_bytecode"));
const model_1 = require("../model");
const tron_1 = require("./tron");
const IS_TESTNET = true;
const API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
const PRIVATE_KEY = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
const RECEIVER_ADDR = 'TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh';
const SENDER_ADDR = 'TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW';
const TRC20_TOKEN = 'TWgHeettKLgq1hCdEUPaZNCM6hPg8JkG2X';
process.env.TATUM_API_KEY = API_KEY;
process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
describe('Tron transactions', () => {
    jest.setTimeout(9999);
    it('should test valid transaction data', async () => {
        const body = new model_1.TransferTron();
        body.fromPrivateKey = PRIVATE_KEY;
        body.amount = '0.000001';
        body.to = RECEIVER_ADDR;
        const txData = await tron_1.prepareTronSignedTransaction(IS_TESTNET, body);
        expect(JSON.parse(txData).raw_data.contract[0].parameter.value.amount).toBe(1);
    });
    it('should test valid freeze transaction data', async () => {
        const body = new model_1.FreezeTron();
        body.fromPrivateKey = PRIVATE_KEY;
        body.amount = '1';
        body.resource = 'ENERGY';
        body.duration = 3;
        body.receiver = SENDER_ADDR;
        const txData = await tron_1.prepareTronFreezeTransaction(IS_TESTNET, body);
        expect(JSON.parse(txData).raw_data.contract[0].parameter.value.frozen_balance).toBe(1000000);
    });
    it('should test valid TRC20 create transaction data', async () => {
        const body = new model_1.CreateTronTrc20();
        body.fromPrivateKey = PRIVATE_KEY;
        body.decimals = 18;
        body.symbol = 'TTM';
        body.recipient = RECEIVER_ADDR;
        body.name = 'TatumToken';
        body.totalSupply = 10;
        const txData = await tron_1.prepareTronCreateTrc20SignedTransaction(IS_TESTNET, body);
        expect(JSON.parse(txData).raw_data.contract[0].parameter.value.new_contract.bytecode).toContain(token_bytecode_1.default);
    });
    it.skip('should test valid TRC10 transaction data', async () => {
        const body = new model_1.TransferTronTrc10();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.amount = '0.000001';
        body.tokenId = '1000538';
        body.to = 'TVAEYCmc15awaDRAjUZ1kvcHwQQaoPw2CW';
        const txData = await tron_1.prepareTronTrc10SignedTransaction(true, body);
        expect(JSON.parse(txData).raw_data.contract[0].parameter.value.amount).toBe(1);
    });
    it('should test valid TRC20 transaction data', async () => {
        const body = new model_1.TransferTronTrc20();
        body.tokenAddress = TRC20_TOKEN;
        body.fromPrivateKey = PRIVATE_KEY;
        body.amount = '1';
        body.feeLimit = 100;
        body.to = RECEIVER_ADDR;
        const txData = await tron_1.prepareTronTrc20SignedTransaction(IS_TESTNET, body);
        expect(JSON.parse(txData).raw_data.contract[0].parameter.value.data).toBe('a9059cbb000000000000000000000000f4a376310e3b26a57b30d5ff230dcbc8758b84bc00000000000000000000000000000000000000000000000000000000000f4240');
    });
    it.skip('should test valid trc10 create data', async () => {
        const body = new model_1.CreateTronTrc10();
        // 1 account can issue only 1 asset
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.totalSupply = 1000000;
        body.abbreviation = 'TTM';
        body.url = 'TTM';
        body.name = 'TTM';
        body.description = 'TTM';
        body.decimals = 5;
        const txData = await tron_1.prepareTronCreateTrc10SignedTransaction(true, body);
        expect(JSON.parse(txData).raw_data.contract[0].parameter.value.amount).toBe(1);
    });
    it('should not test valid transaction data, to private key assigned', async () => {
        const body = new model_1.TransferTron();
        // body.amount = '0';
        body.amount = '1';
        body.to = 'TFnpwE8jCgtq3QpAhFfF2QpXzdBGmKvKMe';
        try {
            await tron_1.prepareTronSignedTransaction(IS_TESTNET, body);
            fail('Validation did not pass.');
        }
        catch (e) {
            // console.error(e);
        }
    });
    // ERC-721 tests
    it.skip('should test valid deploy 721 transaction', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronDeployTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.name = 'Tatum';
        body.symbol = 'TTM';
        body.feeLimit = 600;
        try {
            const txData = await tron_1.prepareTronDeployTrc721SignedTransaction(true, body);
            expect(JSON.parse(txData).txID).toBeDefined();
            console.log(await blockchain_1.tronBroadcast(txData));
        }
        catch (e) {
            console.error(e);
        }
    });
    it.skip('should test valid mint 721 transaction', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronMintTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.to = 'TFnpwE8jCgtq3QpAhFfF2QpXzdBGmKvKMe';
        body.contractAddress = 'TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ';
        body.tokenId = '3';
        body.url = 'https://google.com';
        body.feeLimit = 50;
        const txData = await tron_1.prepareTronMintTrc721SignedTransaction(true, body);
        expect(JSON.parse(txData).txID).toBeDefined();
        console.log(await blockchain_1.tronBroadcast(txData));
    });
    it.skip('should test valid mint 721 with cashback transaction', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronMintTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.to = 'TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh';
        body.contractAddress = 'TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ';
        body.cashbackValues = ['3'];
        body.authorAddresses = ['TFnpwE8jCgtq3QpAhFfF2QpXzdBGmKvKMe'];
        body.tokenId = '3000';
        body.url = 'https://google.com';
        body.feeLimit = 50;
        const txData = await tron_1.prepareTronMintCashbackTrc721SignedTransaction(true, body);
        expect(JSON.parse(txData).txID).toBeDefined();
        console.log(await blockchain_1.tronBroadcast(txData));
    });
    it.skip('should test valid mint multiple 721 transaction', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronMintMultipleTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.to = ['TFnpwE8jCgtq3QpAhFfF2QpXzdBGmKvKMe', 'TYMwiDu22V6XG3yk6W9cTVBz48okKLRczh'];
        body.contractAddress = 'TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ';
        body.tokenId = ['40', '50'];
        body.url = ['https://google.com', 'https://google.com'];
        body.feeLimit = 50;
        const txData = await tron_1.prepareTronMintMultipleTrc721SignedTransaction(true, body);
        expect(JSON.parse(txData).txID).toBeDefined();
        console.log(await blockchain_1.tronBroadcast(txData));
    });
    it.skip('should test valid update 721 cashback transaction', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronUpdateCashbackTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.contractAddress = 'TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ';
        body.cashbackValue = '0';
        body.tokenId = '11';
        body.feeLimit = 50;
        const txData = await tron_1.prepareTronUpdateCashbackForAuthorTrc721SignedTransaction(true, body);
        expect(JSON.parse(txData).txID).toBeDefined();
        console.log(await blockchain_1.tronBroadcast(txData));
    });
    it.skip('should test valid burn 721 transaction', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronBurnTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.contractAddress = 'TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ';
        body.tokenId = '3';
        body.feeLimit = 50;
        const txData = await tron_1.prepareTronBurnTrc721SignedTransaction(true, body);
        expect(JSON.parse(txData).txID).toBeDefined();
        console.log(await blockchain_1.tronBroadcast(txData));
    });
    it.skip('should test valid transfer 721 transaction without cashback', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronTransferTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.contractAddress = 'TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ';
        body.to = 'TFnpwE8jCgtq3QpAhFfF2QpXzdBGmKvKMe';
        body.tokenId = '50';
        body.value = '0';
        body.feeLimit = 50;
        const txData = await tron_1.prepareTronTransferTrc721SignedTransaction(true, body);
        expect(JSON.parse(txData).txID).toBeDefined();
        console.log(await blockchain_1.tronBroadcast(txData));
    });
    it.skip('should test valid transfer 721 transaction with cashback', async () => {
        process.env.TRON_PRO_API_KEY = 'b35409b4-7d11-491e-8760-32d2506a90b5';
        process.env.TATUM_API_KEY = '4966d428-9507-45cb-9f90-02cca00674bd';
        const body = new model_1.TronTransferTrc721();
        body.fromPrivateKey = '842E09EB40D8175979EFB0071B28163E11AED0F14BDD84090A4CEFB936EF5701';
        body.chain = model_1.Currency.TRON;
        body.contractAddress = 'TCrmdJmvDUPy8qSTgoVStF51yWm6VUh5yQ';
        body.to = 'TFnpwE8jCgtq3QpAhFfF2QpXzdBGmKvKMe';
        body.tokenId = '3000';
        body.value = '30';
        body.feeLimit = 50;
        const txData = await tron_1.prepareTronTransferTrc721SignedTransaction(true, body);
        expect(JSON.parse(txData).txID).toBeDefined();
        console.log(await blockchain_1.tronBroadcast(txData));
    });
});
//# sourceMappingURL=data:application/json;base64,