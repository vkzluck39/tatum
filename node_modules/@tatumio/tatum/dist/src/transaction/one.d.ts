import Web3 from 'web3';
import { CreateRecord, DeployMarketplaceListing, DeployNftAuction, GenerateCustodialAddress, OneBurn20, OneBurn721, OneBurnMultiToken, OneBurnMultiTokenBatch, OneDeploy20, OneDeploy721, OneDeployMultiToken, OneMint20, OneMint721, OneMintMultiple721, OneMintMultiToken, OneMintMultiTokenBatch, OneTransfer, OneTransfer20, OneTransfer721, OneTransferMultiToken, OneTransferMultiTokenBatch, OneUpdateCashback721, SmartContractMethodInvocation, SmartContractReadMethodInvocation, TransactionKMS } from '../model';
/**
 * Send Harmony transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneTransaction: (testnet: boolean, body: OneTransfer, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const prepareOneClient: (testnet: boolean, provider?: string | undefined, fromPrivateKey?: string | undefined) => Web3;
/**
 * Sign Harmony pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const signOneKMSTransaction: (tx: TransactionKMS, fromPrivateKey: string, testnet: boolean, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneSignedTransaction: (testnet: boolean, body: OneTransfer, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony store data transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneStoreDataTransaction: (testnet: boolean, body: CreateRecord, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMint20SignedTransaction: (testnet: boolean, body: OneMint20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony burn erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneBurn20SignedTransaction: (testnet: boolean, body: OneBurn20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony transfer erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneTransfer20SignedTransaction: (testnet: boolean, body: OneTransfer20, provider?: string | undefined) => Promise<string>;
export declare const getOne20ContractDecimals: (testnet: boolean, contractAddress: string, provider?: string | undefined) => Promise<any>;
/**
 * Sign Harmony generate custodial wallet transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneGenerateCustodialWalletSignedTransaction: (testnet: boolean, body: GenerateCustodialAddress, provider?: string | undefined) => Promise<string>;
/**
 * Sign ONE generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the One Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareOneDeployMarketplaceListingSignedTransaction: (testnet: boolean, body: DeployMarketplaceListing, provider?: string | undefined) => Promise<string>;
/**
 * Sign ONE deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the One Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareOneDeployAuctionSignedTransaction: (testnet: boolean, body: DeployNftAuction, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony deploy erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneDeploy20SignedTransaction: (testnet: boolean, body: OneDeploy20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMint721SignedTransaction: (testnet: boolean, body: OneMint721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMint721ProvenanceSignedTransaction: (testnet: boolean, body: OneMint721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint multiple cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMintMultiple721ProvenanceSignedTransaction: (testnet: boolean, body: OneMintMultiple721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMintCashback721SignedTransaction: (testnet: boolean, body: OneMint721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint multiple cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMintMultipleCashback721SignedTransaction: (testnet: boolean, body: OneMintMultiple721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint multiple erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMintMultiple721SignedTransaction: (testnet: boolean, body: OneMintMultiple721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony burn erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneBurn721SignedTransaction: (testnet: boolean, body: OneBurn721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony transfer erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneTransfer721SignedTransaction: (testnet: boolean, body: OneTransfer721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony update cashback for author 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneUpdateCashbackForAuthor721SignedTransaction: (testnet: boolean, body: OneUpdateCashback721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony deploy erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneDeploy721SignedTransaction: (testnet: boolean, body: OneDeploy721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony burn multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneBurnMultiTokenSignedTransaction: (testnet: boolean, body: OneBurnMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony burn multiple tokens batch transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneBurnMultiTokenBatchSignedTransaction: (testnet: boolean, body: OneBurnMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneTransferMultiTokenSignedTransaction: (testnet: boolean, body: OneTransferMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony batch transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneBatchTransferMultiTokenSignedTransaction: (testnet: boolean, body: OneTransferMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMintMultiTokenSignedTransaction: (testnet: boolean, body: OneMintMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony mint multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneMintMultiTokenBatchSignedTransaction: (testnet: boolean, body: OneMintMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony deploy multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneDeployMultiTokenSignedTransaction: (testnet: boolean, body: OneDeployMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Harmony smart contract write method invocation transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareOneSmartContractWriteMethodInvocation: (testnet: boolean, body: SmartContractMethodInvocation, provider?: string | undefined) => Promise<string>;
/**
 * Send Harmony smart contract read method invocation transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneSmartContractReadMethodInvocationTransaction: (testnet: boolean, body: SmartContractReadMethodInvocation, provider?: string | undefined) => Promise<{
    data: any;
}>;
/**
 * Send Harmony store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneStoreDataTransaction: (testnet: boolean, body: CreateRecord, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMint20SignedTransaction: (testnet: boolean, body: OneMint20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony burn erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneBurn20SignedTransaction: (testnet: boolean, body: OneBurn20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony transfer erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneTransfer20SignedTransaction: (testnet: boolean, body: OneTransfer20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony deploy erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneDeploy20SignedTransaction: (testnet: boolean, body: OneDeploy20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMint721SignedTransaction: (testnet: boolean, body: OneMint721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint erc721 Provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMint721ProvenanceSignedTransaction: (testnet: boolean, body: OneMint721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint multiple cashback erc721 provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMintMultiple721ProvenanceSignedTransaction: (testnet: boolean, body: OneMintMultiple721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMintCashback721SignedTransaction: (testnet: boolean, body: OneMint721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint multiple cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMintMultipleCashback721SignedTransaction: (testnet: boolean, body: OneMintMultiple721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMintMultiple721SignedTransaction: (testnet: boolean, body: OneMintMultiple721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony burn erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneBurn721SignedTransaction: (testnet: boolean, body: OneBurn721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony transfer erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneTransfer721SignedTransaction: (testnet: boolean, body: OneTransfer721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony update cashback for author erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneUpdateCashbackForAuthor721SignedTransaction: (testnet: boolean, body: OneUpdateCashback721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony deploy erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneDeploy721SignedTransaction: (testnet: boolean, body: OneDeploy721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony burn multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneBurnMultiTokenSignedTransaction: (testnet: boolean, body: OneBurnMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony burn multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneBurnMultiTokenBatchSignedTransaction: (testnet: boolean, body: OneBurnMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneTransferMultiTokenSignedTransaction: (testnet: boolean, body: OneTransferMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony batch transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneBatchTransferMultiTokenSignedTransaction: (testnet: boolean, body: OneTransferMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMintMultiTokenSignedTransaction: (testnet: boolean, body: OneMintMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneMintMultiTokenBatchSignedTransaction: (testnet: boolean, body: OneMintMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony deploy multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneDeployMultiTokenSignedTransaction: (testnet: boolean, body: OneDeployMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony mint generate custodial wallet signed transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneGenerateCustodialWalletSignedTransaction: (testnet: boolean, body: GenerateCustodialAddress, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
export declare const sendOneDeployMarketplaceListingSignedTransaction: (testnet: boolean, body: DeployMarketplaceListing, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Harmony smart contract method invocation transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendOneSmartContractMethodInvocationTransaction: (testnet: boolean, body: SmartContractMethodInvocation | SmartContractReadMethodInvocation, provider?: string | undefined) => Promise<import("../model").TransactionHash | {
    data: any;
}>;
