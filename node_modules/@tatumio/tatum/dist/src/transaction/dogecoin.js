"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendDogecoinTransaction = exports.prepareDogecoinSignedTransaction = exports.signDogecoinKMSTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
// @ts-ignore
const bitcore_lib_doge_1 = require("bitcore-lib-doge");
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
/**
 * Prepare a signed Doge transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
const prepareSignedTransaction = async (body) => {
    await tatum_1.validateBody(body, model_1.TransferDogeBlockchain);
    const { fromUTXO, to, fee, changeAddress } = body;
    const tx = new bitcore_lib_doge_1.Transaction()
        .fee(Number(new bignumber_js_1.default(fee).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)))
        .change(changeAddress);
    const privateKeysToSign = [];
    for (const item of fromUTXO) {
        tx.from({
            txId: item.txHash,
            outputIndex: item.index,
            script: bitcore_lib_doge_1.Script.fromAddress(item.address).toString(),
            satoshis: Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))
        });
        privateKeysToSign.push(item.signatureId || item.privateKey);
    }
    for (const item of to) {
        tx.to(item.address, Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));
    }
    if (fromUTXO[0].signatureId) {
        return JSON.stringify({ txData: JSON.stringify(tx), privateKeysToSign });
    }
    for (const pk of privateKeysToSign) {
        tx.sign(bitcore_lib_doge_1.PrivateKey.fromWIF(pk));
    }
    return tx.serialize();
};
/**
 * Sign Dogecoin pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param privateKeys private keys to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
const signDogecoinKMSTransaction = async (tx, privateKeys, testnet) => {
    if (tx.chain !== model_1.Currency.DOGE) {
        throw Error('Unsupported chain.');
    }
    const builder = new bitcore_lib_doge_1.Transaction(JSON.parse(tx.serializedTransaction));
    for (const privateKey of privateKeys) {
        builder.sign(bitcore_lib_doge_1.PrivateKey.fromWIF(privateKey));
    }
    return builder.serialize();
};
exports.signDogecoinKMSTransaction = signDogecoinKMSTransaction;
/**
 * Sign Dogecoin transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareDogecoinSignedTransaction = async (body) => {
    return prepareSignedTransaction(body);
};
exports.prepareDogecoinSignedTransaction = prepareDogecoinSignedTransaction;
/**
 * Send Dogecoin transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
const sendDogecoinTransaction = async (body) => {
    return blockchain_1.dogeBroadcast(await exports.prepareDogecoinSignedTransaction(body));
};
exports.sendDogecoinTransaction = sendDogecoinTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9nZWNvaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdHJhbnNhY3Rpb24vZG9nZWNvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0VBQW9DO0FBQ3BDLGFBQWE7QUFDYix1REFBZ0U7QUFDaEUsOENBQTJDO0FBQzNDLDhDQUErQztBQUMvQyxvQ0FBeUU7QUFFekU7OztHQUdHO0FBQ0gsTUFBTSx3QkFBd0IsR0FBRyxLQUFLLEVBQUUsSUFBNEIsRUFBRSxFQUFFO0lBQ3BFLE1BQU0sb0JBQVksQ0FBQyxJQUFJLEVBQUUsOEJBQXNCLENBQUMsQ0FBQTtJQUNoRCxNQUFNLEVBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFDLEdBQUcsSUFBSSxDQUFBO0lBQy9DLE1BQU0sRUFBRSxHQUFHLElBQUksOEJBQVcsRUFBRTtTQUN2QixHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksc0JBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxzQkFBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDekYsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzFCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFBO0lBQzVCLEtBQUssTUFBTSxJQUFJLElBQUksUUFBUSxFQUFFO1FBQ3pCLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDakIsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3ZCLE1BQU0sRUFBRSx5QkFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ25ELFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxzQkFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxzQkFBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3hHLENBQUMsQ0FBQTtRQUNGLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtLQUM5RDtJQUNELEtBQUssTUFBTSxJQUFJLElBQUksRUFBRSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxzQkFBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxzQkFBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNuSDtJQUVELElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRTtRQUN6QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxpQkFBaUIsRUFBQyxDQUFDLENBQUE7S0FDekU7SUFDRCxLQUFLLE1BQU0sRUFBRSxJQUFJLGlCQUFpQixFQUFFO1FBQ2hDLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkJBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtLQUNsQztJQUNELE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFBO0FBQ3pCLENBQUMsQ0FBQTtBQUVEOzs7Ozs7R0FNRztBQUNJLE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxFQUFFLEVBQWtCLEVBQUUsV0FBcUIsRUFBRSxPQUFnQixFQUFFLEVBQUU7SUFDNUcsSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLGdCQUFRLENBQUMsSUFBSSxFQUFFO1FBQzVCLE1BQU0sS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUE7S0FDcEM7SUFDRCxNQUFNLE9BQU8sR0FBRyxJQUFJLDhCQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFBO0lBQ3JFLEtBQUssTUFBTSxVQUFVLElBQUksV0FBVyxFQUFFO1FBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkJBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtLQUMvQztJQUNELE9BQU8sT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0FBQzlCLENBQUMsQ0FBQTtBQVRZLFFBQUEsMEJBQTBCLDhCQVN0QztBQUVEOzs7O0dBSUc7QUFDSSxNQUFNLGdDQUFnQyxHQUFHLEtBQUssRUFBRSxJQUE0QixFQUFFLEVBQUU7SUFDbkYsT0FBTyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUN6QyxDQUFDLENBQUE7QUFGWSxRQUFBLGdDQUFnQyxvQ0FFNUM7QUFFRDs7Ozs7R0FLRztBQUNJLE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxFQUFFLElBQTRCLEVBQUUsRUFBRTtJQUMxRSxPQUFPLDBCQUFhLENBQUMsTUFBTSx3Q0FBZ0MsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3RFLENBQUMsQ0FBQTtBQUZZLFFBQUEsdUJBQXVCLDJCQUVuQyJ9