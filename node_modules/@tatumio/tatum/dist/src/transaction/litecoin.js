"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendLitecoinTransaction = exports.prepareLitecoinSignedTransaction = exports.signLitecoinKMSTransaction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
// @ts-ignore
const bitcore_lib_ltc_1 = require("bitcore-lib-ltc");
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
/**
 * Prepare a signed Ltc transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
const prepareSignedTransaction = async (body) => {
    var _a, _b;
    await tatum_1.validateBody(body, model_1.TransferBtcBasedBlockchain);
    const { fromUTXO, fromAddress, to } = body;
    const tx = new bitcore_lib_ltc_1.Transaction();
    const privateKeysToSign = [];
    if (fromAddress) {
        for (const item of fromAddress) {
            const txs = await blockchain_1.ltcGetTxForAccount(item.address);
            for (const t of txs) {
                for (const [i, o] of t.outputs.entries()) {
                    if (o.address !== item.address) {
                        continue;
                    }
                    try {
                        await blockchain_1.ltcGetUTXO(t.hash, i);
                        tx.from({
                            txId: t.hash,
                            outputIndex: i,
                            script: bitcore_lib_ltc_1.Script.fromAddress(item.address).toString(),
                            satoshis: Number(new bignumber_js_1.default(o.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))
                        });
                        privateKeysToSign.push(item.signatureId || item.privateKey);
                    }
                    catch (e) {
                        console.error(e.toString());
                    }
                }
            }
        }
    }
    else if (fromUTXO) {
        for (const item of fromUTXO) {
            const t = await blockchain_1.ltcGetTransaction(item.txHash);
            const address = t.outputs ? t.outputs[item.index].address : (_a = t.vout) === null || _a === void 0 ? void 0 : _a[item.index].scriptPubKey.addresses[0];
            const value = t.outputs ? t.outputs[item.index].value : ((_b = t.vout) === null || _b === void 0 ? void 0 : _b[item.index].value) || 0;
            tx.from({
                txId: item.txHash,
                outputIndex: item.index,
                script: bitcore_lib_ltc_1.Script.fromAddress(address).toString(),
                satoshis: Number(new bignumber_js_1.default(value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR))
            });
            privateKeysToSign.push(item.signatureId || item.privateKey);
        }
    }
    for (const item of to) {
        tx.to(item.address, Number(new bignumber_js_1.default(item.value).multipliedBy(100000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR)));
    }
    if ((fromAddress && fromAddress[0].signatureId) || (fromUTXO && fromUTXO[0].signatureId)) {
        return JSON.stringify({ txData: JSON.stringify(tx), privateKeysToSign });
    }
    for (const item of privateKeysToSign) {
        tx.sign(bitcore_lib_ltc_1.PrivateKey.fromWIF(item));
    }
    return tx.serialize(true);
};
/**
 * Sign Litecoin pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param privateKeys private keys to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
const signLitecoinKMSTransaction = async (tx, privateKeys, testnet) => {
    if (tx.chain !== model_1.Currency.LTC) {
        throw Error('Unsupported chain.');
    }
    const builder = new bitcore_lib_ltc_1.Transaction(JSON.parse(tx.serializedTransaction));
    for (const privateKey of privateKeys) {
        builder.sign(bitcore_lib_ltc_1.PrivateKey.fromWIF(privateKey));
    }
    return builder.serialize(true);
};
exports.signLitecoinKMSTransaction = signLitecoinKMSTransaction;
/**
 * Sign Litcoin transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareLitecoinSignedTransaction = async (testnet, body) => {
    return prepareSignedTransaction(body);
};
exports.prepareLitecoinSignedTransaction = prepareLitecoinSignedTransaction;
/**
 * Send Litecoin transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
const sendLitecoinTransaction = async (testnet, body) => {
    return blockchain_1.ltcBroadcast(await exports.prepareLitecoinSignedTransaction(testnet, body));
};
exports.sendLitecoinTransaction = sendLitecoinTransaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl0ZWNvaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdHJhbnNhY3Rpb24vbGl0ZWNvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0VBQW9DO0FBQ3BDLGFBQWE7QUFDYixxREFBK0Q7QUFDL0QsOENBQTZGO0FBQzdGLDhDQUErQztBQUMvQyxvQ0FBMkY7QUFFM0Y7OztHQUdHO0FBQ0gsTUFBTSx3QkFBd0IsR0FBRyxLQUFLLEVBQUUsSUFBZ0MsRUFBRSxFQUFFOztJQUN4RSxNQUFNLG9CQUFZLENBQUMsSUFBSSxFQUFFLGtDQUEwQixDQUFDLENBQUE7SUFDcEQsTUFBTSxFQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFDLEdBQUcsSUFBSSxDQUFBO0lBQ3hDLE1BQU0sRUFBRSxHQUFHLElBQUksNkJBQVcsRUFBRSxDQUFBO0lBQzVCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFBO0lBQzVCLElBQUksV0FBVyxFQUFFO1FBQ2IsS0FBSyxNQUFNLElBQUksSUFBSSxXQUFXLEVBQUU7WUFDNUIsTUFBTSxHQUFHLEdBQUcsTUFBTSwrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDbEQsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7Z0JBQ2pCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSyxDQUFDLENBQUMsT0FBMEIsQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDMUQsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7d0JBQzVCLFNBQVE7cUJBQ1g7b0JBQ0QsSUFBSTt3QkFDQSxNQUFNLHVCQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTt3QkFDM0IsRUFBRSxDQUFDLElBQUksQ0FBQzs0QkFDSixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7NEJBQ1osV0FBVyxFQUFF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