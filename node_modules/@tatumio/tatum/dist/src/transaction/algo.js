"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAlgoBurnFTSignedTransaction = exports.prepareAlgoBurnFTSignedTransaction = exports.sendAlgoTransferFTSignedTransaction = exports.prepareAlgoTransferFTSignedTransaction = exports.sendAlgoCreateFTSignedTransaction = exports.prepareAlgoCreateFTSignedTransaction = exports.sendAlgoBurnFractionalNFTSignedTransaction = exports.prepareAlgoBurnFractionalNFTSignedTransaction = exports.sendAlgoTransferFractionalNFTSignedTransaction = exports.prepareAlgoTransferFractionalNFTSignedTransaction = exports.sendAlgoCreateFractionalNFTSignedTransaction = exports.prepareAlgoCreateFractionalNFTSignedTransaction = exports.sendAlgoBurnNFTSignedTransaction = exports.prepareAlgoBurnNFTSignedTransaction = exports.sendAlgoReceiveNFTSignedTransaction = exports.sendAlgoTransferNFTSignedTransaction = exports.prepareAlgoReceiveNFTSignedTransaction = exports.prepareAlgoTransferNFTSignedTransaction = exports.sendAlgoCreateNFTSignedTransaction = exports.prepareAlgoCreateNFTSignedTransaction = exports.signAlgoKMSTransaction = exports.sendAlgoSignedTransaction = exports.prepareAlgoSignedTransaction = exports.getAlgoIndexerClient = exports.getAlgoClient = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const util_1 = require("util");
const blockchain_1 = require("../blockchain");
const model_1 = require("../model");
const wallet_1 = require("../wallet");
const algosdk = require('algosdk');
const base32 = require('base32.js');
const Url = require('url-parse');
/**
 * Algod V2 Client
 * @param testnet if the algorand node is testnet or not
 * @param provider url of the algorand server endpoint
 * @returns algorand Client
 */
const getAlgoClient = (testnet, provider) => {
    if (provider) {
        return new algosdk.Algodv2(`${(testnet ? process.env.TATUM_ALGORAND_TESTNET_TOKEN : process.env.TATUM_ALGORAND_MAINNET_TOKEN) || 'DUMMYTOKEN'}`, provider, Url(provider).port);
    }
    else {
        return new algosdk.Algodv2({ 'X-API-Key': testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_KEY}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_KEY}` }, testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_ALGOD_URL}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_ALGOD_URL}`, '');
    }
};
exports.getAlgoClient = getAlgoClient;
/**
 * Algo Indexer Client
 * @param testnet if the algorand node is testnet or not
 * @param provider url of the algorand server endpoint
 * @returns algorand Indexer Client
 */
const getAlgoIndexerClient = (testnet, provider) => {
    if (provider) {
        return new algosdk.Indexer(`${(testnet ? process.env.TATUM_ALGORAND_TESTNET_TOKEN : process.env.TATUM_ALGORAND_MAINNET_TOKEN) || 'DUMMYTOKEN'}`, provider, Url(provider).port);
    }
    else {
        return new algosdk.Indexer({ 'X-API-Key': testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_KEY}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_KEY}` }, testnet ? `${process.env.TATUM_ALGORAND_TESTNET_THIRD_API_INDEXER_URL}` : `${process.env.TATUM_ALGORAND_MAINNET_THIRD_API_INDEXER_URL}`, '');
    }
};
exports.getAlgoIndexerClient = getAlgoIndexerClient;
/**
 * Algorand transaction signing
 * @param testnet if the algorand node is testnet or not
 * @param tx content of the transaction to broadcast
 * @param provider url of the algorand server endpoint for purestake.io restapi
 * @returns transaction data to be broadcast to blockchain
 */
const prepareAlgoSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const enc = new util_1.TextEncoder();
    const note = enc.encode(tx.note ? tx.note : '');
    const txn = algosdk.makePaymentTxnWithSuggestedParams(tx.from, tx.to, new bignumber_js_1.default(tx.amount).multipliedBy(1000000).toNumber(), undefined, note, Object.assign(Object.assign({}, params), { fee: new bignumber_js_1.default(tx.fee).multipliedBy(1000000).toNumber(), flatFee: true }));
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoSignedTransaction = prepareAlgoSignedTransaction;
/**
 * Send Algorand transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
const sendAlgoSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoSignedTransaction = sendAlgoSignedTransaction;
/**
 * Sign Algorand pending transaction from Tatum KMS
 * @param tx pendding transaction from Tatum KMS
 * @param fromPrivateKey private key to sign transaction with
 * @param testnet mainnet or testnet version
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const signAlgoKMSTransaction = async (tx, fromPrivateKey, testnet, provider) => {
    if (tx.chain !== model_1.Currency.ALGO) {
        throw Error('Unsupported chain.');
    }
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = JSON.parse(tx.serializedTransaction);
    txn.from = algosdk.encodeAddress(new Uint8Array(Object.values(txn.from.publicKey)));
    txn.to = algosdk.encodeAddress(new Uint8Array(Object.values(txn.to.publicKey)));
    txn.note = new Uint8Array(Object.values(txn.note || ''));
    txn.lease = undefined;
    if (txn.tag) {
        if (txn.tag.data) {
            txn.tag = Buffer.from(txn.tag.data);
        }
    }
    txn.genesisHash = Buffer.from(txn.genesisHash.data);
    if (txn.assetManager) {
        txn.assetManager = algosdk.encodeAddress(new Uint8Array(Object.values(txn.assetManager.publicKey)));
    }
    if (txn.assetReserve) {
        txn.assetReserve = undefined;
    }
    if (txn.assetFreeze) {
        txn.assetFreeze = undefined;
    }
    if (txn.assetClawback) {
        txn.assetClawback = undefined;
    }
    if (txn.assetRevocationTarget) {
        txn.assetRevocationTarget = undefined;
    }
    if (txn.reKeyTo) {
        txn.reKeyTo = undefined;
    }
    if (txn.assetMetadataHash) {
        txn.assetMetadataHash = new Uint8Array(Object.values(txn.assetMetadataHash));
    }
    const _txn = new (algosdk.Transaction)(txn);
    const secretKey = new Uint8Array(decoder.write(fromPrivateKey).buf);
    return Buffer.from(_txn.signTxn(secretKey)).toString('hex');
};
exports.signAlgoKMSTransaction = signAlgoKMSTransaction;
/**
 * Sign Algorand create NFT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain
 */
const prepareAlgoCreateNFTSignedTransaction = async (testnet, tx, provider) => {
    var _a, _b, _c, _d, _e;
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, 1, 0, false, (_a = tx.attr) === null || _a === void 0 ? void 0 : _a.manager, (_b = tx.attr) === null || _b === void 0 ? void 0 : _b.reserve, (_c = tx.attr) === null || _c === void 0 ? void 0 : _c.freeze, (_d = tx.attr) === null || _d === void 0 ? void 0 : _d.clawback, (_e = tx.attr) === null || _e === void 0 ? void 0 : _e.assetUnit, tx.name, tx.url, undefined, params);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoCreateNFTSignedTransaction = prepareAlgoCreateNFTSignedTransaction;
/**
 * Send Algorand create NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
const sendAlgoCreateNFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateNFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoCreateNFTSignedTransaction = sendAlgoCreateNFTSignedTransaction;
/**
 * Sign Algorand transfer NFT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoTransferNFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, 1, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoTransferNFTSignedTransaction = prepareAlgoTransferNFTSignedTransaction;
/**
 * Sign Algorand receive NFT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoReceiveNFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const from = tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from;
    const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(from, from, undefined, undefined, 0, undefined, tx.assetId, params);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoReceiveNFTSignedTransaction = prepareAlgoReceiveNFTSignedTransaction;
/**
 * Send Algorand Transfer NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoTransferNFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferNFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoTransferNFTSignedTransaction = sendAlgoTransferNFTSignedTransaction;
/**
 * Send Algorand Receive NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoReceiveNFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoReceiveNFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoReceiveNFTSignedTransaction = sendAlgoReceiveNFTSignedTransaction;
/**
 * Sign Algorand burn NFT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoBurnNFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoBurnNFTSignedTransaction = prepareAlgoBurnNFTSignedTransaction;
/**
 * Send Algorand burn NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoBurnNFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnNFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoBurnNFTSignedTransaction = sendAlgoBurnNFTSignedTransaction;
/**
 * Sign Algorand create Fractional NFT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoCreateFractionalNFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const v = Math.floor(Math.log10(new bignumber_js_1.default(tx.amount).toNumber()));
    const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(10).pow(v).toNumber(), v, false, tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, undefined, undefined, tx.tokenId, tx.contractAddress, tx.url, undefined, params);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoCreateFractionalNFTSignedTransaction = prepareAlgoCreateFractionalNFTSignedTransaction;
/**
 * Send Algorand create Fractinoal NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoCreateFractionalNFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateFractionalNFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoCreateFractionalNFTSignedTransaction = sendAlgoCreateFractionalNFTSignedTransaction;
/**
 * Sign Algorand transfer Fractional NFT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoTransferFractionalNFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, new bignumber_js_1.default(tx.amount).toNumber(), undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoTransferFractionalNFTSignedTransaction = prepareAlgoTransferFractionalNFTSignedTransaction;
/**
 * Send Algorand transfer Fractinoal NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoTransferFractionalNFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferFractionalNFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoTransferFractionalNFTSignedTransaction = sendAlgoTransferFractionalNFTSignedTransaction;
/**
 * Sign Algorand burn Fracational NFT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connecto to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoBurnFractionalNFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoBurnFractionalNFTSignedTransaction = prepareAlgoBurnFractionalNFTSignedTransaction;
/**
 * Send Algorand burn Fractional NFT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoBurnFractionalNFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnFractionalNFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoBurnFractionalNFTSignedTransaction = sendAlgoBurnFractionalNFTSignedTransaction;
/**
 * Sign Algorand create FT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connnect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoCreateFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetCreateTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.supply).shiftedBy(new bignumber_js_1.default(tx.digits).toNumber()).toNumber(), new bignumber_js_1.default(tx.digits).toNumber(), false, tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, undefined, undefined, tx.symbol, tx.name, tx.url, undefined, params);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoCreateFTSignedTransaction = prepareAlgoCreateFTSignedTransaction;
/**
 * Send Algorand create FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoCreateFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoCreateFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoCreateFTSignedTransaction = sendAlgoCreateFTSignedTransaction;
/**
 * Sign Algorand transfer FT transaction with private kwy locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoTransferFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetTransferTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, tx.to, undefined, undefined, new bignumber_js_1.default(tx.amount).shiftedBy(tx.digits || 1).toNumber(), undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoTransferFTSignedTransaction = prepareAlgoTransferFTSignedTransaction;
/**
 * Send Algorand transfer FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoTransferFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoTransferFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoTransferFTSignedTransaction = sendAlgoTransferFTSignedTransaction;
/**
 * Sign ALgorand burn FT transaction with private key locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
const prepareAlgoBurnFTSignedTransaction = async (testnet, tx, provider) => {
    const algodClient = exports.getAlgoClient(testnet, provider);
    const params = await algodClient.getTransactionParams().do();
    const decoder = new base32.Decoder({ type: 'rfc4648' });
    const txn = algosdk.makeAssetDestroyTxnWithSuggestedParams(tx.fromPrivateKey ? wallet_1.generateAlgodAddressFromPrivatetKey(tx.fromPrivateKey) : tx.from, undefined, new bignumber_js_1.default(tx.contractAddress).toNumber(), params, undefined);
    if (tx.signatureId) {
        return JSON.stringify(txn);
    }
    const secretKey = new Uint8Array(decoder.write(tx.fromPrivateKey).buf);
    return Buffer.from(txn.signTxn(secretKey)).toString('hex');
};
exports.prepareAlgoBurnFTSignedTransaction = prepareAlgoBurnFTSignedTransaction;
/**
 * Sned Algorand burn FT transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * @param testnet mainnet or testnet version
 * @param tx content of the transaction to broadcast
 * @param provider url of the Algorand Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain.
 */
const sendAlgoBurnFTSignedTransaction = async (testnet, tx, provider) => {
    return (await blockchain_1.algorandBroadcast(await exports.prepareAlgoBurnFTSignedTransaction(testnet, tx, provider)));
};
exports.sendAlgoBurnFTSignedTransaction = sendAlgoBurnFTSignedTransaction;
//# sourceMappingURL=data:application/json;base64,