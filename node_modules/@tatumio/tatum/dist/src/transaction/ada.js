"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaToLovelace = exports.lovelaceToAda = exports.signTransaction = exports.processFeeAndRest = exports.makeWitness = exports.createWitnesses = exports.initTransactionBuilder = exports.addInput = exports.addOutputAda = exports.addOutputLovelace = exports.addUtxoInputs = exports.addInputsPrivateKeys = exports.addAddressInputsWithoutPrivateKey = exports.addAddressInputs = exports.addInputs = exports.addChangeIfNeeded = exports.addFee = exports.addOutputs = exports.signAdaKMSTransaction = exports.sendAdaTransaction = exports.prepareAdaTransaction = void 0;
const cardano_serialization_lib_nodejs_1 = require("@emurgo/cardano-serialization-lib-nodejs");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ada_1 = require("../blockchain/ada");
const tatum_1 = require("../connector/tatum");
const model_1 = require("../model");
/**
 * Prepare a signed Ada transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @param transferAdaBlockchain content of the transaction to prepare.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
const prepareAdaTransaction = async (transferAdaBlockchain) => {
    await tatum_1.validateBody(transferAdaBlockchain, model_1.TransferAdaBlockchain);
    const txBuilder = await exports.initTransactionBuilder();
    const { to } = transferAdaBlockchain;
    const { privateKeysToSign, amount: fromAmount } = await exports.addInputs(txBuilder, transferAdaBlockchain);
    const toAmount = exports.addOutputs(txBuilder, to);
    await exports.processFeeAndRest(txBuilder, fromAmount, toAmount, transferAdaBlockchain);
    return exports.signTransaction(txBuilder, transferAdaBlockchain, privateKeysToSign);
};
exports.prepareAdaTransaction = prepareAdaTransaction;
/**
 * Send Ada transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
const sendAdaTransaction = async (body) => {
    return ada_1.adaBroadcast(await exports.prepareAdaTransaction(body));
};
exports.sendAdaTransaction = sendAdaTransaction;
/**
 * Sign Ada pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param privateKeys private keys to sign transaction with.
 * @returns transaction data to be broadcast to blockchain.
 */
const signAdaKMSTransaction = async (tx, privateKeys) => {
    if (tx.chain !== model_1.Currency.ADA) {
        throw Error('Unsupported chain.');
    }
    const transferAdaBlockchain = JSON.parse(tx.serializedTransaction).txData;
    const txBuilder = await exports.initTransactionBuilder();
    const { to } = transferAdaBlockchain;
    const { amount: fromAmount } = await exports.addInputs(txBuilder, transferAdaBlockchain);
    const toAmount = exports.addOutputs(txBuilder, to);
    await exports.processFeeAndRest(txBuilder, fromAmount, toAmount, transferAdaBlockchain);
    const txBody = txBuilder.build();
    const txHash = cardano_serialization_lib_nodejs_1.hash_transaction(txBody);
    const vKeyWitnesses = cardano_serialization_lib_nodejs_1.Vkeywitnesses.new();
    for (const key of privateKeys) {
        exports.makeWitness(key, txHash, vKeyWitnesses);
    }
    const witnesses = cardano_serialization_lib_nodejs_1.TransactionWitnessSet.new();
    witnesses.set_vkeys(vKeyWitnesses);
    return Buffer.from(cardano_serialization_lib_nodejs_1.Transaction.new(txBody, witnesses).to_bytes()).toString('hex');
};
exports.signAdaKMSTransaction = signAdaKMSTransaction;
const addOutputs = (transactionBuilder, tos) => {
    let amount = new bignumber_js_1.default(0);
    for (const to of tos) {
        const valueAdded = exports.addOutputAda(transactionBuilder, to.address, to.value);
        amount = amount.plus(valueAdded);
    }
    return amount;
};
exports.addOutputs = addOutputs;
const addFee = (txBuilder, feeInLovelace) => {
    txBuilder.set_fee(cardano_serialization_lib_nodejs_1.BigNum.from_str(feeInLovelace.toString()));
};
exports.addFee = addFee;
const addChangeIfNeeded = (txBuilder, changeAddress) => {
    txBuilder.add_change_if_needed(cardano_serialization_lib_nodejs_1.Address.from_bech32(changeAddress));
};
exports.addChangeIfNeeded = addChangeIfNeeded;
const addInputs = async (transactionBuilder, transferAdaBlockchain) => {
    const { fromUTXO, fromAddress } = transferAdaBlockchain;
    if (fromAddress) {
        return exports.addAddressInputs(transactionBuilder, fromAddress);
    }
    if (fromUTXO) {
        return exports.addUtxoInputs(transactionBuilder, fromUTXO);
    }
    throw new Error('Field fromAddress or fromUTXO is not filled.');
};
exports.addInputs = addInputs;
const addAddressInputs = async (transactionBuilder, fromAddresses) => {
    const amount = await exports.addAddressInputsWithoutPrivateKey(transactionBuilder, fromAddresses);
    const privateKeysToSign = await exports.addInputsPrivateKeys(fromAddresses);
    return { amount, privateKeysToSign };
};
exports.addAddressInputs = addAddressInputs;
const addAddressInputsWithoutPrivateKey = async (transactionBuilder, fromAddresses) => {
    let amount = new bignumber_js_1.default(0);
    for (const fromAddress of fromAddresses) {
        const { address } = fromAddress;
        const utxos = await ada_1.adaGetUtxos(address);
        for (const utxo of utxos) {
            amount = amount.plus(utxo.value);
            exports.addInput(transactionBuilder, utxo, address);
        }
    }
    return amount;
};
exports.addAddressInputsWithoutPrivateKey = addAddressInputsWithoutPrivateKey;
const addInputsPrivateKeys = async (froms) => {
    const privateKeysToSign = [];
    for (const from of froms) {
        privateKeysToSign.push(from.signatureId || from.privateKey);
    }
    return privateKeysToSign;
};
exports.addInputsPrivateKeys = addInputsPrivateKeys;
const addUtxoInputs = async (transactionBuilder, fromUTXOs) => {
    let amount = new bignumber_js_1.default(0);
    const privateKeysToSign = [];
    for (const utxo of fromUTXOs) {
        const transaction = await ada_1.adaGetTransaction(utxo.txHash);
        const output = transaction.outputs.find(output => output.index === utxo.index);
        if (output) {
            const value = output.value;
            amount = amount.plus(value);
            exports.addInput(transactionBuilder, Object.assign({ value }, utxo), output.address);
            privateKeysToSign.push(utxo.signatureId || utxo.privateKey);
        }
    }
    return { amount, privateKeysToSign };
};
exports.addUtxoInputs = addUtxoInputs;
const addOutputLovelace = (transactionBuilder, address, amount) => {
    transactionBuilder.add_output(cardano_serialization_lib_nodejs_1.TransactionOutput.new(cardano_serialization_lib_nodejs_1.Address.from_bech32(address), cardano_serialization_lib_nodejs_1.Value.new(cardano_serialization_lib_nodejs_1.BigNum.from_str(amount))));
};
exports.addOutputLovelace = addOutputLovelace;
const addOutputAda = (transactionBuilder, address, amount) => {
    const amountLovelace = exports.adaToLovelace(amount);
    exports.addOutputLovelace(transactionBuilder, address, amountLovelace);
    return amountLovelace;
};
exports.addOutputAda = addOutputAda;
const addInput = (transactionBuilder, utxo, address) => {
    transactionBuilder.add_input(cardano_serialization_lib_nodejs_1.Address.from_bech32(address), cardano_serialization_lib_nodejs_1.TransactionInput.new(cardano_serialization_lib_nodejs_1.TransactionHash.from_bytes(Buffer.from(utxo.txHash, 'hex')), utxo.index), cardano_serialization_lib_nodejs_1.Value.new(cardano_serialization_lib_nodejs_1.BigNum.from_str(utxo.value)));
};
exports.addInput = addInput;
const initTransactionBuilder = async () => {
    const txBuilder = cardano_serialization_lib_nodejs_1.TransactionBuilder.new(cardano_serialization_lib_nodejs_1.LinearFee.new(cardano_serialization_lib_nodejs_1.BigNum.from_str('44'), cardano_serialization_lib_nodejs_1.BigNum.from_str('155381')), cardano_serialization_lib_nodejs_1.BigNum.from_str('1000000'), cardano_serialization_lib_nodejs_1.BigNum.from_str('500000000'), cardano_serialization_lib_nodejs_1.BigNum.from_str('2000000'));
    const { tip: { slotNo } } = await ada_1.adaGetBlockChainInfo();
    txBuilder.set_ttl(slotNo + 50000);
    return txBuilder;
};
exports.initTransactionBuilder = initTransactionBuilder;
const createWitnesses = (transactionBody, transferAdaBlockchain) => {
    const { fromAddress, fromUTXO } = transferAdaBlockchain;
    const txHash = cardano_serialization_lib_nodejs_1.hash_transaction(transactionBody);
    const vKeyWitnesses = cardano_serialization_lib_nodejs_1.Vkeywitnesses.new();
    if (fromAddress) {
        for (const address of fromAddress) {
            if (address.privateKey) {
                exports.makeWitness(address.privateKey, txHash, vKeyWitnesses);
            }
        }
    }
    else if (fromUTXO) {
        for (const utxo of fromUTXO) {
            if (utxo.privateKey) {
                exports.makeWitness(utxo.privateKey, txHash, vKeyWitnesses);
            }
        }
    }
    else {
        throw new Error('No private key for witness found.');
    }
    const witnesses = cardano_serialization_lib_nodejs_1.TransactionWitnessSet.new();
    witnesses.set_vkeys(vKeyWitnesses);
    return witnesses;
};
exports.createWitnesses = createWitnesses;
const makeWitness = (privateKey, txHash, vKeyWitnesses) => {
    const privateKeyCardano = cardano_serialization_lib_nodejs_1.Bip32PrivateKey.from_128_xprv(Buffer.from(privateKey, 'hex')).to_raw_key();
    vKeyWitnesses.add(cardano_serialization_lib_nodejs_1.make_vkey_witness(txHash, privateKeyCardano));
};
exports.makeWitness = makeWitness;
const processFeeAndRest = async (transactionBuilder, fromAmountInLovelace, toAmountInLovelace, transferAdaBlockchain) => {
    const feeInLovelace = new bignumber_js_1.default(exports.adaToLovelace((transferAdaBlockchain === null || transferAdaBlockchain === void 0 ? void 0 : transferAdaBlockchain.fee) || 0));
    const changeAddress = transferAdaBlockchain.changeAddress;
    if (feeInLovelace.isEqualTo(0)) {
        exports.addChangeIfNeeded(transactionBuilder, changeAddress);
    }
    else {
        const changeInLovelace = fromAmountInLovelace.minus(toAmountInLovelace).minus(feeInLovelace);
        if (changeInLovelace.gt(0))
            exports.addOutputLovelace(transactionBuilder, changeAddress, changeInLovelace.toString());
        exports.addFee(transactionBuilder, feeInLovelace);
    }
};
exports.processFeeAndRest = processFeeAndRest;
const signTransaction = (transactionBuilder, transferAdaBlockchain, privateKeysToSign) => {
    const txBody = transactionBuilder.build();
    const { fromAddress, fromUTXO } = transferAdaBlockchain;
    if ((fromAddress && fromAddress[0].signatureId) || (fromUTXO && fromUTXO[0].signatureId)) {
        return JSON.stringify({ txData: transferAdaBlockchain, privateKeysToSign });
    }
    const witnesses = exports.createWitnesses(txBody, transferAdaBlockchain);
    return Buffer.from(cardano_serialization_lib_nodejs_1.Transaction.new(txBody, witnesses).to_bytes()).toString('hex');
};
exports.signTransaction = signTransaction;
const lovelaceToAda = (lovelace) => new bignumber_js_1.default(lovelace).dividedBy(1000000).toFixed(8, bignumber_js_1.default.ROUND_FLOOR).toString();
exports.lovelaceToAda = lovelaceToAda;
const adaToLovelace = (ada) => new bignumber_js_1.default(ada).times(1000000).toString();
exports.adaToLovelace = adaToLovelace;
//# sourceMappingURL=data:application/json;base64,