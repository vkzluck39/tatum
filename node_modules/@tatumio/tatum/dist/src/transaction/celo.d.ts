import Web3 from 'web3';
import { BurnCeloErc20, CeloBurnErc721, CeloBurnMultiToken, CeloBurnMultiTokenBatch, CeloDeployErc721, CeloDeployMultiToken, CeloMintErc721, CeloMintMultipleErc721, CeloMintMultiToken, CeloMintMultiTokenBatch, CeloSmartContractMethodInvocation, CeloTransferErc721, CeloTransferMultiToken, CeloTransferMultiTokenBatch, CeloUpdateCashbackErc721, CreateRecord, DeployCeloErc20, DeployMarketplaceListing, DeployNftAuction, GenerateCustodialAddress, MintCeloErc20, SmartContractReadMethodInvocation, TransactionKMS, TransferCeloOrCeloErc20Token } from '../model';
/**
 * Sign CELO generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareCeloGenerateCustodialWalletSignedTransaction: (testnet: boolean, body: GenerateCustodialAddress, provider?: string | undefined) => Promise<string>;
/**
 * Sign CELO generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareCeloDeployMarketplaceListingSignedTransaction: (testnet: boolean, body: DeployMarketplaceListing, provider?: string | undefined) => Promise<string>;
/**
 * Sign CELO deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Bsc Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareCeloDeployAuctionSignedTransaction: (testnet: boolean, body: DeployNftAuction, provider?: string | undefined) => Promise<string>;
/**
 * Sign Celo pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @param provider url of the Ethereum Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const signCeloKMSTransaction: (tx: TransactionKMS, fromPrivateKey: string, testnet: boolean, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo deploy multi token transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloDeployMultiTokenSignedTransaction: (testnet: boolean, body: CeloDeployMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo deploy erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloDeployErc721SignedTransaction: (testnet: boolean, body: CeloDeployErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint cashback erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintCashbackErc721SignedTransaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint provenance erc732 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintErc721ProvenanceSignedTransaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint multiple provenance cashback erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintMultipleErc721ProvenanceSignedTransaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint erc732 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintErc721SignedTransaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo transfer erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloTransferErc721SignedTransaction: (testnet: boolean, body: CeloTransferErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo burn erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloBurnErc721SignedTransaction: (testnet: boolean, body: CeloBurnErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo deploy erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloDeployErc20SignedTransaction: (testnet: boolean, body: DeployCeloErc20, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintErc20SignedTransaction: (testnet: boolean, body: MintCeloErc20, provider?: string | undefined) => Promise<string>;
export declare const getCeloClient: (provider?: string | undefined) => Web3;
/**
 * Prepare a smart contract write method invocation transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloSmartContractWriteMethodInvocation: (testnet: boolean, body: CeloSmartContractMethodInvocation, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo smart contract read method invocation transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const sendCeloSmartContractReadMethodInvocationTransaction: (testnet: boolean, body: SmartContractReadMethodInvocation, provider?: string | undefined) => Promise<{
    data: any;
}>;
export declare const sendCeloDeployErc20Transaction: (testnet: boolean, body: DeployCeloErc20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const sendCeloStoreDataSignedTransaction: (testnet: boolean, body: CreateRecord, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo smart contract method invocation transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloSmartContractMethodInvocationTransaction: (testnet: boolean, body: CeloSmartContractMethodInvocation | SmartContractReadMethodInvocation, provider?: string | undefined) => Promise<import("../model").TransactionHash | {
    data: any;
}>;
export declare const getCeloErc20ContractDecimals: (testnet: boolean, contractAddress: string, provider?: string | undefined) => Promise<any>;
/**
 * Prepare a signed Celo transfer erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloTransferErc20SignedTransaction: (testnet: boolean, body: TransferCeloOrCeloErc20Token, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo burn erc20 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloBurnErc20SignedTransaction: (testnet: boolean, body: BurnCeloErc20, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint multiple cashback erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintMultipleCashbackErc721SignedTransaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint multiple erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintMultipleErc721SignedTransaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo update cashback for author erc721 transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloUpdateCashbackForAuthorErc721SignedTransaction: (testnet: boolean, body: CeloUpdateCashbackErc721, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintMultiTokenSignedTransaction: (testnet: boolean, body: CeloMintMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo mint multiple tokens batch transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloMintMultiTokenBatchSignedTransaction: (testnet: boolean, body: CeloMintMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo transfer multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloTransferMultiTokenSignedTransaction: (testnet: boolean, body: CeloTransferMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo batch transfer multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloBatchTransferMultiTokenSignedTransaction: (testnet: boolean, body: CeloTransferMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo burn multiple tokens batch transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloBurnMultiTokenBatchSignedTransaction: (testnet: boolean, body: CeloBurnMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Prepare a signed Celo burn multiple tokens transaction with the private key locally. Nothing is broadcasted to the blockchain.
 * @returns raw transaction data in hex, to be broadcasted to blockchain.
 */
export declare const prepareCeloBurnMultiTokenSignedTransaction: (testnet: boolean, body: CeloBurnMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Celo, cUsd or cEur transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareCeloOrCUsdSignedTransaction: (testnet: boolean, body: TransferCeloOrCeloErc20Token, provider?: string | undefined) => Promise<string>;
/**
 * Sign store data transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareCeloStoreDataSignedTransaction: (testnet: boolean, body: CreateRecord, provider?: string | undefined) => Promise<string>;
/**
 * Send Celo or cUsd transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloOrcUsdTransaction: (testnet: boolean, body: TransferCeloOrCeloErc20Token, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo or cUsd transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloErc20Transaction: (testnet: boolean, body: TransferCeloOrCeloErc20Token, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintErc721Transaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintCashbackErc721Transaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint provenance cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintErc721ProvenanceTransaction: (testnet: boolean, body: CeloMintErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint multiple provenance erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintMultipleErc721ProvenanceTransaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintMultipleErc721Transaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint multiple cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintMultipleCashbackErc721Transaction: (testnet: boolean, body: CeloMintMultipleErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo burn erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloBurnErc721Transaction: (testnet: boolean, body: CeloBurnErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo update cashback for author erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloUpdateCashbackForAuthorErc721Transaction: (testnet: boolean, body: CeloUpdateCashbackErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo transfer nft transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloTransferErc721Transaction: (testnet: boolean, body: CeloTransferErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo deploy erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloDeployErc721Transaction: (testnet: boolean, body: CeloDeployErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo deploy multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloDeployMultiTokenTransaction: (testnet: boolean, body: CeloDeployMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintMultiTokenTransaction: (testnet: boolean, body: CeloMintMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo mint multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloMintMultiTokenBatchTransaction: (testnet: boolean, body: CeloMintMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloTransferMultiTokenTransaction: (testnet: boolean, body: CeloTransferMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo transfer multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloTransferMultiTokenBatchTransaction: (testnet: boolean, body: CeloTransferMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo burn multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloBurnMultiTokenTransaction: (testnet: boolean, body: CeloBurnMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Celo burn multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloBurnMultiTokenBatchTransaction: (testnet: boolean, body: CeloBurnMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send generate custodial wallet transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Celo Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendCeloGenerateCustodialWalletSignedTransaction: (testnet: boolean, body: GenerateCustodialAddress, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
export declare const sendCeloDeployMarketplaceListingSignedTransaction: (testnet: boolean, body: DeployMarketplaceListing, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
