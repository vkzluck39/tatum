"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.flowSendTransaction = exports.flowSendCustomTransaction = exports.sendFlowNftBurnToken = exports.sendFlowNftTransferToken = exports.sendFlowNftMintMultipleToken = exports.sendFlowNftMintToken = exports.getFlowNftTokenByAddress = exports.getFlowNftMetadata = exports.flowAddPublicKeyToAccount = exports.flowCreateAccountFromPublicKey = exports.flowSignKMSTransaction = exports.getFlowApiSigner = exports.getFlowSigner = exports.flowSign = exports.FlowTxType = void 0;
// @ts-ignore
const fcl = __importStar(require("@onflow/fcl"));
// @ts-ignore
const types = __importStar(require("@onflow/types"));
// @ts-ignore
const util_encode_key_1 = require("@onflow/util-encode-key");
const elliptic = __importStar(require("elliptic"));
const sha3_1 = require("sha3");
const blockchain_1 = require("../blockchain");
const tatum_1 = require("../connector/tatum");
const constants_1 = require("../constants");
const model_1 = require("../model");
const wallet_1 = require("../wallet");
const flowTransaction_1 = require("./flowTransaction");
var FlowTxType;
(function (FlowTxType) {
    FlowTxType[FlowTxType["CREATE_ACCOUNT"] = 0] = "CREATE_ACCOUNT";
    FlowTxType[FlowTxType["ADD_PK_TO_ACCOUNT"] = 1] = "ADD_PK_TO_ACCOUNT";
    FlowTxType[FlowTxType["TRANSFER"] = 2] = "TRANSFER";
    FlowTxType[FlowTxType["DEPLOY_NFT"] = 3] = "DEPLOY_NFT";
    FlowTxType[FlowTxType["MINT_NFT"] = 4] = "MINT_NFT";
    FlowTxType[FlowTxType["MINT_MULTIPLE_NFT"] = 5] = "MINT_MULTIPLE_NFT";
    FlowTxType[FlowTxType["BURN_NFT"] = 6] = "BURN_NFT";
    FlowTxType[FlowTxType["TRANSFER_NFT"] = 7] = "TRANSFER_NFT";
    FlowTxType[FlowTxType["CUSTOM_TX"] = 8] = "CUSTOM_TX";
})(FlowTxType = exports.FlowTxType || (exports.FlowTxType = {}));
const flowSign = (pk, msg) => {
    const keyPair = new elliptic.ec('secp256k1').keyFromPrivate(pk);
    const signature = keyPair.sign(new sha3_1.SHA3(256).update(msg).digest());
    const r = signature.r.toArrayLike(Buffer, 'be', 32);
    const s = signature.s.toArrayLike(Buffer, 'be', 32);
    return Buffer.concat([r, s]).toString('hex');
};
exports.flowSign = flowSign;
const getFlowSigner = (pk, address, keyId = 0) => {
    return {
        signer: (account) => {
            return Object.assign(Object.assign({}, account), { tempId: `${address}-${keyId}`, addr: fcl.sansPrefix(address), keyId: Number(keyId), signingFunction: async (data) => {
                    return {
                        addr: fcl.withPrefix(address),
                        keyId: Number(keyId),
                        signature: exports.flowSign(pk, Buffer.from(data.message, 'hex')),
                    };
                } });
        }
    };
};
exports.getFlowSigner = getFlowSigner;
const getFlowApiSigner = (isPayer) => {
    const keyHash = Date.now();
    const signer = async (account) => {
        const { address, keyId } = await blockchain_1.flowGetSignKey(isPayer);
        if (!isPayer) {
            process.env[`FLOW_PROPOSAL_KEY_${keyHash}`] = `${keyId}`;
        }
        return Object.assign(Object.assign({}, account), { tempId: `${address}-${keyId}`, addr: fcl.sansPrefix(address), keyId, signingFunction: async (data) => {
                return {
                    addr: fcl.withPrefix(address),
                    keyId: Number(keyId),
                    signature: (await blockchain_1.flowSignWithKey(data.message, isPayer)).signature,
                };
            } });
    };
    return { signer, keyHash: `FLOW_PROPOSAL_KEY_${keyHash}` };
};
exports.getFlowApiSigner = getFlowApiSigner;
const sendTransaction = async (testnet, { code, args, proposer, authorizations, payer, keyHash, }) => {
    fcl.config().put('accessNode.api', testnet ? 'https://access-testnet.onflow.org' : 'https://access-mainnet-beta.onflow.org');
    let response;
    try {
        response = await fcl.send([
            fcl.transaction(code),
            fcl.args(args.map(arg => fcl.arg(arg.type === 'UInt64' ? parseInt(arg.value) : arg.value, arg.type === 'Array' ? types[arg.type](types[arg.subType]) : types[arg.type]))),
            fcl.proposer(proposer),
            fcl.authorizations(authorizations),
            fcl.payer(payer),
            fcl.limit(1000),
        ]);
    }
    catch (e) {
        try {
            if (keyHash) {
                await blockchain_1.flowBroadcastTx('', undefined, keyHash ? parseInt((process.env[keyHash] || '0')) : undefined);
                delete process.env[keyHash];
            }
            // eslint-disable-next-line no-empty
        }
        catch (_) {
        }
        throw e;
    }
    const { transactionId } = response;
    try {
        const { error, events } = await fcl.tx(response).onceSealed();
        return {
            id: transactionId,
            error,
            events,
        };
    }
    finally {
        try {
            if (keyHash) {
                await blockchain_1.flowBroadcastTx(transactionId, undefined, keyHash ? parseInt((process.env[keyHash] || '0')) : undefined);
                delete process.env[keyHash];
            }
            // eslint-disable-next-line no-empty
        }
        catch (_) {
        }
    }
};
const sendScript = async (testnet, code, args) => {
    fcl.config().put('accessNode.api', testnet ? 'https://access-testnet.onflow.org' : 'https://access-mainnet-beta.onflow.org');
    const response = await fcl.send([
        fcl.script(code),
        fcl.args(args.map(arg => fcl.arg(arg.type === 'UInt64' ? parseInt(arg.value) : arg.value, types[arg.type]))),
    ]);
    return fcl.decode(response);
};
const flowSignKMSTransaction = async (tx, privateKeys, testnet) => {
    if (tx.chain !== model_1.Currency.FLOW) {
        throw Error('Unsupported chain.');
    }
    const { type, body } = JSON.parse(tx.serializedTransaction);
    switch (type) {
        case FlowTxType.CREATE_ACCOUNT:
            return await exports.flowCreateAccountFromPublicKey(testnet, body.publicKey, body.account, privateKeys[0]);
        case FlowTxType.ADD_PK_TO_ACCOUNT:
            return await exports.flowAddPublicKeyToAccount(testnet, body.publicKey, body.account, privateKeys[0]);
        case FlowTxType.TRANSFER:
            return await exports.flowSendTransaction(testnet, Object.assign(Object.assign({}, body), { privateKey: privateKeys[0] }));
        case FlowTxType.TRANSFER_NFT:
            return await exports.sendFlowNftTransferToken(testnet, Object.assign(Object.assign({}, body), { privateKey: privateKeys[0] }));
        case FlowTxType.MINT_NFT:
            return await exports.sendFlowNftMintToken(testnet, Object.assign(Object.assign({}, body), { privateKey: privateKeys[0] }));
        case FlowTxType.MINT_MULTIPLE_NFT:
            return await exports.sendFlowNftMintMultipleToken(testnet, Object.assign(Object.assign({}, body), { privateKey: privateKeys[0] }));
        case FlowTxType.BURN_NFT:
            return await exports.sendFlowNftBurnToken(testnet, Object.assign(Object.assign({}, body), { privateKey: privateKeys[0] }));
        default:
            return await exports.flowSendCustomTransaction(testnet, Object.assign(Object.assign({}, body), { privateKey: privateKeys[0] }));
    }
};
exports.flowSignKMSTransaction = flowSignKMSTransaction;
/**
 * Create account on the FLOW network. It automatically creates 100 0-weight proposal keys, which are managed by Tatum API - index 1-100.
 * Main 1000 weight authorizer key is stored as a first one on index 0.
 * @param testnet if we use testnet or not
 * @param publicKey public key to assign to address as authorizer (1000 weight) key
 * @param signerAddress address of the authorizer creator of the address on the chain
 * @param signerPrivateKey private key of the authorizer creator of the address on the chain
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 */
const flowCreateAccountFromPublicKey = async (testnet, publicKey, signerAddress, signerPrivateKey, proposer, payer) => {
    var _a;
    const code = flowTransaction_1.prepareCreateAccountWithFUSDFromPublicKeyTxTemplate(testnet);
    const encodedPublicKey = util_encode_key_1.encodeKey(publicKey, util_encode_key_1.ECDSA_secp256k1, util_encode_key_1.SHA3_256, 1000);
    const args = [{ type: 'String', value: encodedPublicKey }];
    const auth = exports.getFlowSigner(signerPrivateKey, signerAddress).signer;
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const result = await sendTransaction(testnet, {
        code, args,
        proposer: proposer ? proposer(false) : proposalSigner,
        authorizations: [auth],
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,
        keyHash,
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id, address: (_a = result.events.find((e) => e.type === 'flow.AccountCreated')) === null || _a === void 0 ? void 0 : _a.data.address };
};
exports.flowCreateAccountFromPublicKey = flowCreateAccountFromPublicKey;
/**
 * Add public key to existing blockchain address with defined weight
 * @param testnet
 * @param publicKey key to add
 * @param signerAddress address of the authorizer key
 * @param signerPrivateKey key of the authorize key
 * @param weight defaults to 1000 - weight of the key
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 */
const flowAddPublicKeyToAccount = async (testnet, publicKey, signerAddress, signerPrivateKey, weight = 0, proposer, payer) => {
    const code = flowTransaction_1.prepareAddPublicKeyToAccountTxTemplate();
    const encodedPublicKey = util_encode_key_1.encodeKey(publicKey, util_encode_key_1.ECDSA_secp256k1, util_encode_key_1.SHA3_256, weight);
    const args = [{ type: 'String', value: encodedPublicKey }];
    const auth = exports.getFlowSigner(signerPrivateKey, signerAddress).signer;
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const result = await sendTransaction(testnet, {
        code, args,
        proposer: proposer ? proposer(false) : proposalSigner,
        authorizations: [auth],
        keyHash,
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id, address: result.events[0].data.address };
};
exports.flowAddPublicKeyToAccount = flowAddPublicKeyToAccount;
const getFlowNftMetadata = async (testnet, account, id, tokenType) => {
    const code = flowTransaction_1.metadataFlowNftTokenScript(testnet);
    const args = [{ type: 'Address', value: account }, { type: 'UInt64', value: id }, { type: 'String', value: tokenType }];
    return await sendScript(testnet, code, args);
};
exports.getFlowNftMetadata = getFlowNftMetadata;
const getFlowNftTokenByAddress = async (testnet, account, tokenType) => {
    const code = flowTransaction_1.tokenByAddressFlowNftTokenScript(testnet);
    const args = [{ type: 'Address', value: account }, { type: 'String', value: tokenType }];
    return await sendScript(testnet, code, args);
};
exports.getFlowNftTokenByAddress = getFlowNftTokenByAddress;
/**
 * Send Flow NFT mint token transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 * @returns txId id of the transaction in the blockchain
 */
const sendFlowNftMintToken = async (testnet, body, proposer, payer) => {
    var _a;
    await tatum_1.validateBody(body, model_1.FlowMintNft);
    const code = flowTransaction_1.mintFlowNftTokenTxTemplate(testnet);
    const { url, contractAddress: tokenType, to, mnemonic, index, account, privateKey } = body;
    const args = [{ type: 'Address', value: to }, { type: 'String', value: url }, { type: 'String', value: tokenType }];
    const pk = (mnemonic && index && index >= 0) ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;
    const auth = exports.getFlowSigner(pk, account).signer;
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const result = await sendTransaction(testnet, {
        code, args,
        proposer: proposer ? proposer(false) : proposalSigner,
        authorizations: [auth],
        keyHash,
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id, tokenId: `${(_a = result.events.find((e) => e.type.includes('TatumMultiNFT.Minted'))) === null || _a === void 0 ? void 0 : _a.data.id}` };
};
exports.sendFlowNftMintToken = sendFlowNftMintToken;
/**
 * Send Flow NFT mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 * @returns txId id of the transaction in the blockchain
 */
const sendFlowNftMintMultipleToken = async (testnet, body, proposer, payer) => {
    await tatum_1.validateBody(body, model_1.FlowMintMultipleNft);
    const code = flowTransaction_1.mintFlowMultipleNftTokenTxTemplate(testnet);
    const { url, contractAddress: tokenType, to, mnemonic, index, account, privateKey } = body;
    const args = [{ type: 'Array', subType: 'Address', value: to }, { type: 'Array', subType: 'String', value: url }, { type: 'String', value: tokenType }];
    const pk = (mnemonic && index && index >= 0) ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const auth = exports.getFlowSigner(pk, account).signer;
    const result = await sendTransaction(testnet, {
        code, args, proposer: proposer ? proposer(false) : proposalSigner, authorizations: [auth],
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,
        keyHash,
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id, tokenId: result.events.filter((e) => e.type.includes('TatumMultiNFT.Minted')).map(e => e.data.id) };
};
exports.sendFlowNftMintMultipleToken = sendFlowNftMintMultipleToken;
/**
 * Send Flow NFT transfer token transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 * @returns {txId: string, events: any[]} id of the transaction in the blockchain and events this tx produced
 */
const sendFlowNftTransferToken = async (testnet, body, proposer, payer) => {
    await tatum_1.validateBody(body, model_1.FlowTransferNft);
    const code = flowTransaction_1.transferFlowNftTokenTxTemplate(testnet);
    const { tokenId, to, mnemonic, index, account, privateKey } = body;
    const args = [{ type: 'Address', value: to }, { type: 'UInt64', value: tokenId }];
    const pk = (mnemonic && index && index >= 0) ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const auth = exports.getFlowSigner(pk, account).signer;
    const result = await sendTransaction(testnet, {
        code, args, proposer: proposer ? proposer(false) : proposalSigner, authorizations: [auth],
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,
        keyHash,
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id };
};
exports.sendFlowNftTransferToken = sendFlowNftTransferToken;
/**
 * Send Flow NFT burn token transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 * @returns txId id of the transaction in the blockchain
 */
const sendFlowNftBurnToken = async (testnet, body, proposer, payer) => {
    await tatum_1.validateBody(body, model_1.FlowBurnNft);
    const code = flowTransaction_1.burnFlowNftTokenTxTemplate(testnet);
    const { tokenId, contractAddress: tokenType, mnemonic, index, account, privateKey } = body;
    const args = [{ type: 'UInt64', value: tokenId }, { type: 'String', value: tokenType }];
    const pk = (mnemonic && index && index >= 0) ? await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, mnemonic, index) : privateKey;
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const auth = exports.getFlowSigner(pk, account).signer;
    const result = await sendTransaction(testnet, {
        code, args, proposer: proposer ? proposer(false) : proposalSigner, authorizations: [auth],
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,
        keyHash,
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id };
};
exports.sendFlowNftBurnToken = sendFlowNftBurnToken;
/**
 * Send custom transaction to the FLOW network
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 * @returns txId id of the transaction in the blockchain
 */
const flowSendCustomTransaction = async (testnet, body, proposer, payer) => {
    await tatum_1.validateBody(body, model_1.TransferFlowCustomTx);
    const pk = body.privateKey || await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, body.mnemonic, body.index);
    const auth = exports.getFlowSigner(pk, body.account).signer;
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const result = await sendTransaction(testnet, {
        code: body.transaction, args: body.args,
        proposer: proposer ? proposer(false) : proposalSigner,
        authorizations: [auth],
        keyHash,
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id, events: result.events };
};
exports.flowSendCustomTransaction = flowSendCustomTransaction;
/**
 * Send FLOW or FUSD from account to account.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param proposer function to obtain proposer key from
 * @param payer function to obtain payer key from
 * @returns txId id of the transaction in the blockchain
 */
const flowSendTransaction = async (testnet, body, proposer, payer) => {
    await tatum_1.validateBody(body, model_1.TransferFlow);
    let tokenAddress;
    let tokenName;
    let tokenStorage;
    if (body.currency === model_1.Currency.FLOW) {
        tokenAddress = testnet ? constants_1.FLOW_TESTNET_ADDRESSES.FlowToken : constants_1.FLOW_MAINNET_ADDRESSES.FlowToken;
        tokenName = 'FlowToken';
        tokenStorage = 'flowToken';
    }
    else {
        tokenAddress = testnet ? constants_1.FLOW_TESTNET_ADDRESSES.FUSD : constants_1.FLOW_MAINNET_ADDRESSES.FUSD;
        tokenName = 'FUSD';
        tokenStorage = 'fusd';
    }
    const code = flowTransaction_1.prepareTransferFlowTxTemplate(testnet, tokenAddress, tokenName, tokenStorage);
    const args = [{ value: parseFloat(body.amount).toFixed(8), type: 'UFix64' }, { value: body.to, type: 'Address' }];
    const pk = body.privateKey || await wallet_1.generatePrivateKeyFromMnemonic(model_1.Currency.FLOW, testnet, body.mnemonic, body.index);
    const { signer: proposalSigner, keyHash } = proposer ? proposer(false) : exports.getFlowApiSigner(false);
    const auth = exports.getFlowSigner(pk, body.account).signer;
    const result = await sendTransaction(testnet, {
        code, args, proposer: proposer ? proposer(false) : proposalSigner, authorizations: [auth],
        payer: payer ? payer(true) : exports.getFlowApiSigner(true).signer,
        keyHash,
    });
    if (result.error) {
        throw new Error(result.error);
    }
    return { txId: result.id };
};
exports.flowSendTransaction = flowSendTransaction;
//# sourceMappingURL=data:application/json;base64,