import { TransactionKMS, TransferDogeBlockchain } from '../model';
/**
 * Sign Dogecoin pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param privateKeys private keys to sign transaction with.
 * @param testnet mainnet or testnet version
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const signDogecoinKMSTransaction: (tx: TransactionKMS, privateKeys: string[], testnet: boolean) => Promise<any>;
/**
 * Sign Dogecoin transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param body content of the transaction to broadcast
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareDogecoinSignedTransaction: (body: TransferDogeBlockchain) => Promise<any>;
/**
 * Send Dogecoin transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param body content of the transaction to broadcast
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendDogecoinTransaction: (body: TransferDogeBlockchain) => Promise<import("../model").TransactionHash>;
