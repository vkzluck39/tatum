import { BurnErc20, BurnMultiToken, BurnMultiTokenBatch, CreateRecord, DeployErc20, DeployMarketplaceListing, DeployNftAuction, EthBurnErc721, EthBurnMultiToken, EthBurnMultiTokenBatch, EthDeployErc721, EthDeployMultiToken, EthMintErc721, EthMintMultipleErc721, EthTransferErc721, GenerateCustodialAddress, MintErc20, MintMultiToken, MintMultiTokenBatch, SmartContractMethodInvocation, SmartContractReadMethodInvocation, TransactionKMS, TransferErc20, TransferMultiToken, TransferMultiTokenBatch, UpdateCashbackErc721 } from '../model';
import Caver from 'caver-js';
/**
 * Estimate Gas price for the transaction.
 */
export declare const klayGetGasPriceInWei: (client: Caver) => Promise<string>;
/**
 * Send Klay transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnTransaction: (testnet: boolean, body: TransferErc20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
export declare const prepareKlaytnClient: (testnet: boolean, provider?: string | undefined, fromPrivateKey?: string | undefined) => Caver;
/**
 * Sign Klay pending transaction from Tatum KMS
 * @param tx pending transaction from KMS
 * @param fromPrivateKey private key to sign transaction with.
 * @param testnet mainnet or testnet version
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const signKlayKMSTransaction: (tx: TransactionKMS, fromPrivateKey: string, testnet: boolean, provider?: string | undefined) => Promise<string>;
export declare const getKlayErc20ContractDecimals: (testnet: boolean, contractAddress: string, provider?: string | undefined) => Promise<any>;
/**
 * Sign Klay generate custodial wallet transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnGenerateCustodialWalletSignedTransaction: (testnet: boolean, body: GenerateCustodialAddress, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnSignedTransaction: (testnet: boolean, body: TransferErc20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay store data transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnStoreDataTransaction: (testnet: boolean, body: CreateRecord, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintErc20SignedTransaction: (testnet: boolean, body: MintErc20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay burn erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnBurnErc20SignedTransaction: (testnet: boolean, body: BurnErc20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay transfer erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnTransferErc20SignedTransaction: (testnet: boolean, body: TransferErc20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay deploy erc20 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnDeployErc20SignedTransaction: (testnet: boolean, body: DeployErc20, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintErc721SignedTransaction: (testnet: boolean, body: EthMintErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintErc721ProvenanceSignedTransaction: (testnet: boolean, body: EthMintErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintCashbackErc721SignedTransaction: (testnet: boolean, body: EthMintErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint multiple cashback erc721 provenance transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintMultipleErc721ProvenanceSignedTransaction: (testnet: boolean, body: EthMintMultipleErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint multiple cashback erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintMultipleCashbackErc721SignedTransaction: (testnet: boolean, body: EthMintMultipleErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint multiple erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintMultipleErc721SignedTransaction: (testnet: boolean, body: EthMintMultipleErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay burn erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnBurnErc721SignedTransaction: (testnet: boolean, body: EthBurnErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay transfer erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnTransferErc721SignedTransaction: (testnet: boolean, body: EthTransferErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay update cashback for author erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnUpdateCashbackForAuthorErc721SignedTransaction: (testnet: boolean, body: UpdateCashbackErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay deploy erc721 transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnDeployErc721SignedTransaction: (testnet: boolean, body: EthDeployErc721, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay generate custodial wallet address transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareKlaytnDeployMarketplaceListingSignedTransaction: (testnet: boolean, body: DeployMarketplaceListing, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay deploy NFT Auction contract transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain, or signatureId in case of Tatum KMS
 */
export declare const prepareKlaytnDeployAuctionSignedTransaction: (testnet: boolean, body: DeployNftAuction, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay burn multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnBurnMultiTokenSignedTransaction: (testnet: boolean, body: EthBurnMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay burn multiple tokens batch transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnBurnMultiTokenBatchSignedTransaction: (testnet: boolean, body: EthBurnMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnTransferMultiTokenSignedTransaction: (testnet: boolean, body: TransferMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay batch transfer multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnBatchTransferMultiTokenSignedTransaction: (testnet: boolean, body: TransferMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintMultiTokenSignedTransaction: (testnet: boolean, body: MintMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay mint multiple tokens batch transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnMintMultiTokenBatchSignedTransaction: (testnet: boolean, body: MintMultiTokenBatch, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay deploy multiple tokens transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnDeployMultiTokenSignedTransaction: (testnet: boolean, body: EthDeployMultiToken, provider?: string | undefined) => Promise<string>;
/**
 * Sign Klay smart contract write method invocation transaction with private keys locally. Nothing is broadcast to the blockchain.
 * @param testnet mainnet or testnet version
 * @param body content of the transaction to broadcast
 * @param provider url of the Klay Server to connect to. If not set, default public server will be used.
 * @returns transaction data to be broadcast to blockchain.
 */
export declare const prepareKlaytnSmartContractWriteMethodInvocation: (testnet: boolean, body: SmartContractMethodInvocation, provider?: string | undefined) => Promise<string>;
export declare const sendKlaytnSmartContractReadMethodInvocationTransaction: (testnet: boolean, body: SmartContractReadMethodInvocation, provider?: string | undefined) => Promise<{
    data: any;
}>;
/**
 * Send Klay smart store data transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnStoreDataTransaction: (testnet: boolean, body: CreateRecord, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintErc20SignedTransaction: (testnet: boolean, body: MintErc20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay burn erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnBurnErc20SignedTransaction: (testnet: boolean, body: BurnErc20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay transfer erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnTransferErc20SignedTransaction: (testnet: boolean, body: TransferErc20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay deploy erc20 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnDeployErc20SignedTransaction: (testnet: boolean, body: DeployErc20, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintErc721SignedTransaction: (testnet: boolean, body: EthMintErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint cashback erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintCashbackErc721SignedTransaction: (testnet: boolean, body: EthMintErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint cashback erc721 provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintErc721ProvenanceSignedTransaction: (testnet: boolean, body: EthMintErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintMultipleCashbackErc721SignedTransaction: (testnet: boolean, body: EthMintMultipleErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint multiple erc721 Provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintMultipleErc721ProvenanceSignedTransaction: (testnet: boolean, body: EthMintMultipleErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint multiple erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintMultipleErc721SignedTransaction: (testnet: boolean, body: EthMintMultipleErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay burn erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnBurnErc721SignedTransaction: (testnet: boolean, body: EthBurnErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay transfer erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnTransferErc721SignedTransaction: (testnet: boolean, body: EthTransferErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay update cashback for author erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnUpdateCashbackForAuthorErc721SignedTransaction: (testnet: boolean, body: UpdateCashbackErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay deploy erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnDeployErc721SignedTransaction: (testnet: boolean, body: EthDeployErc721, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay burn multiple tokens erc721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnBurnMultiTokenSignedTransaction: (testnet: boolean, body: BurnMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay burn multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnBurnMultiTokenBatchSignedTransaction: (testnet: boolean, body: BurnMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnTransferMultiTokenSignedTransaction: (testnet: boolean, body: TransferMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay batch transfer multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnBatchTransferMultiTokenSignedTransaction: (testnet: boolean, body: TransferMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintMultiTokenSignedTransaction: (testnet: boolean, body: MintMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay mint multiple tokens batch transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnMintMultiTokenBatchSignedTransaction: (testnet: boolean, body: MintMultiTokenBatch, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay deploy multiple tokens transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnDeployMultiTokenSignedTransaction: (testnet: boolean, body: EthDeployMultiToken, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay generate custodial wallet transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnGenerateCustodialWalletSignedTransaction: (testnet: boolean, body: GenerateCustodialAddress, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
/**
 * Send Klay smart contract method invocation transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
 * This operation is irreversible.
 * @param testnet
 * @param body content of the transaction to broadcast
 * @param provider url of the Harmony Server to connect to. If not set, default public server will be used.
 * @returns transaction id of the transaction in the blockchain
 */
export declare const sendKlaytnSmartContractMethodInvocationTransaction: (testnet: boolean, body: SmartContractMethodInvocation | SmartContractReadMethodInvocation, provider?: string | undefined) => Promise<import("../model").TransactionHash | {
    data: any;
}>;
/**
 * Deploy new smart contract for NFT marketplace logic. Smart contract enables marketplace operator to create new listing for NFT (ERC-721/1155).
 * @param testnet chain to work with
 * @param body request data
 * @param provider optional provider to enter. if not present, Tatum Web3 will be used.
 * @returns {txId: string} Transaction ID of the operation, or signatureID in case of Tatum KMS
 */
export declare const sendKlaytnDeployMarketplaceListingSignedTransaction: (testnet: boolean, body: DeployMarketplaceListing, provider?: string | undefined) => Promise<import("../model").TransactionHash>;
