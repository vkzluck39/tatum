'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatLogQuery = exports.formatOptions = exports.formatRange = exports.fromETHBlockNumberOrHash = exports.fromETHBlockNumber = void 0;
const utils = require("./");
const OBJhas = (obj, p) => {
    return obj.hasOwnProperty(p);
};
exports.fromETHBlockNumber = function (blockNumber) {
    if (typeof blockNumber === 'number') {
        return blockNumber;
    }
    else if (typeof blockNumber === 'string') {
        if (blockNumber === 'earliest') {
            return 0;
        }
        else if (blockNumber === 'latest' || blockNumber === 'pending') {
            return 'best';
        }
        else {
            const num = utils.toInteger(blockNumber);
            return num || num === 0 ? num : 'best';
        }
    }
    else {
        return 'best';
    }
};
exports.fromETHBlockNumberOrHash = function (blockRevision) {
    if (/^(-0x|0x)?[0-9a-fA-F]{64}$/i.test(blockRevision)) {
        return blockRevision;
    }
    else {
        return exports.fromETHBlockNumber(blockRevision);
    }
};
exports.formatRange = function (range) {
    const defaultUnit = 'block';
    const ret = {
        unit: range.unit || defaultUnit,
        from: 0,
        to: Number.MAX_SAFE_INTEGER
    };
    if (ret.unit !== 'block' && ret.unit !== 'time') {
        ret.unit = defaultUnit;
    }
    if (range.unit === 'block') {
        if (OBJhas(range, 'from')) {
            const t = exports.fromETHBlockNumber(range.from);
            if (t === 'best') {
                ret.from = Number.MAX_SAFE_INTEGER;
            }
            else {
                ret.from = t;
            }
        }
        if (OBJhas(range, 'to')) {
            const t = exports.fromETHBlockNumber(range.to);
            if (t === 'best') {
                ret.to = Number.MAX_SAFE_INTEGER;
            }
            else {
                ret.to = t;
            }
        }
        return ret;
    }
    if (OBJhas(range, 'from')) {
        const t = utils.toInteger(range.from);
        if (t !== null) {
            ret.from = t;
        }
    }
    if (OBJhas(range, 'to')) {
        const t = utils.toInteger(range.to);
        if (t !== null) {
            ret.to = t;
        }
    }
    return ret;
};
exports.formatOptions = function (options) {
    const ret = {
        offset: 0,
        limit: utils.params.defaultLogLimit,
    };
    if (OBJhas(options, 'offset')) {
        const temp = utils.toInteger(options.offset);
        if (temp) {
            ret.offset = temp;
        }
    }
    if (OBJhas(options, 'limit')) {
        const temp = utils.toInteger(options.limit);
        if (temp) {
            ret.limit = temp;
        }
    }
    if (ret.limit > utils.params.maxLogLimit) {
        ret.limit = utils.params.maxLogLimit;
    }
    return ret;
};
exports.formatLogQuery = function (params) {
    let address = '';
    let order = 'ASC';
    if (params.address) {
        address = params.address;
    }
    if (params.order && (params.order.toUpperCase() === 'ASC' || params.order.toUpperCase() === 'DESC')) {
        order = params.order.toUpperCase();
    }
    const body = {
        criteriaSet: [],
        order,
    };
    if (params.options) {
        body.options = exports.formatOptions(params.options);
    }
    // discard fromBlock and toBlock if range presents
    if (params.range) {
        body.range = exports.formatRange(params.range);
    }
    else {
        const range = {
            unit: 'block',
            from: params.fromBlock || 0,
            to: params.toBlock || Number.MAX_SAFE_INTEGER
        };
        body.range = exports.formatRange(range);
    }
    const topics = [];
    if (params.topics && params.topics.length) {
        for (let i = 0; i < params.topics.length; i++) {
            if (typeof params.topics[i] === 'string') {
                topics.push({
                    name: 'topic' + i,
                    array: [params.topics[i]],
                });
            }
            else if (utils.isArray(params.topics[i]) && params.topics[i].length) {
                topics.push({
                    name: 'topic' + i,
                    array: params.topics[i],
                });
            }
        }
    }
    const outputTopic = function (inputTopics, index, receiver, current) {
        if (index === inputTopics.length) {
            const o = {};
            if (address) {
                current.address = address;
            }
            Object.assign(o, current);
            receiver.push(o);
            return;
        }
        for (const item of inputTopics[index].array) {
            current[inputTopics[index].name] = item;
            outputTopic(inputTopics, index + 1, receiver, current);
        }
    };
    if (topics.length) {
        outputTopic(topics, 0, body.criteriaSet, {});
    }
    if (!body.criteriaSet.length && address) {
        body.criteriaSet.push({
            address,
        });
    }
    return body;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLWZvcm1hdHRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvb3B0aW9uLWZvcm1hdHRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOzs7QUFHWiw0QkFBMkI7QUFFM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsQ0FBUyxFQUFDLEVBQUU7SUFDckMsT0FBTyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2hDLENBQUMsQ0FBQTtBQUVZLFFBQUEsa0JBQWtCLEdBQUcsVUFBVSxXQUEyQjtJQUNuRSxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRTtRQUNqQyxPQUFPLFdBQVcsQ0FBQTtLQUNyQjtTQUFNLElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFO1FBQ3hDLElBQUksV0FBVyxLQUFLLFVBQVUsRUFBRTtZQUM1QixPQUFPLENBQUMsQ0FBQTtTQUNYO2FBQU0sSUFBSSxXQUFXLEtBQUssUUFBUSxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDOUQsT0FBTyxNQUFNLENBQUE7U0FDaEI7YUFBTTtZQUNILE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDeEMsT0FBTyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7U0FDekM7S0FDSjtTQUFNO1FBQ0gsT0FBTyxNQUFNLENBQUE7S0FDaEI7QUFDTCxDQUFDLENBQUE7QUFFWSxRQUFBLHdCQUF3QixHQUFHLFVBQVUsYUFBa0I7SUFDaEUsSUFBSSw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDbkQsT0FBTyxhQUFhLENBQUE7S0FDdkI7U0FBTTtRQUNILE9BQU8sMEJBQWtCLENBQUMsYUFBYSxDQUFDLENBQUE7S0FDM0M7QUFDTCxD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