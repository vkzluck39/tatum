'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendAccounts = void 0;
const debug = require('debug')('thor:injector');
const thor_devkit_1 = require("thor-devkit");
const utils = require("../utils");
const extendAccounts = function (web3) {
    const web3Utils = web3.utils;
    // signTransaction supports both callback and promise style
    web3.eth.accounts.signTransaction = function signTransaction(ethTx, privateKey, callback) {
        debug('tx to sign: %O', ethTx);
        const sign = function (tx) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!tx.chainTag) {
                    const chainTag = yield web3.eth.getChainTag();
                    if (chainTag) {
                        tx.chainTag = chainTag;
                    }
                    else {
                        throw new Error('error getting chainTag');
                    }
                }
                if (!tx.blockRef) {
                    const blockRef = yield web3.eth.getBlockRef();
                    if (blockRef) {
                        tx.blockRef = blockRef;
                    }
                    else {
                        throw new Error('error getting blockRef');
                    }
                }
                if (tx.data && utils.isHex(tx.data)) {
                    tx.data = utils.toPrefixedHex(tx.data);
                }
                else if (tx.data) {
                    throw new Error('Data must be valid hex');
                }
                else {
                    tx.data = '0x';
                }
                if (!tx.gas) {
                    const pubKey = thor_devkit_1.cry.secp256k1.derivePublicKey(Buffer.from(utils.sanitizeHex(privateKey), 'hex'));
                    const from = '0x' + thor_devkit_1.cry.publicKeyToAddress(pubKey).toString('hex');
                    const gas = yield web3.eth.estimateGas({
                        from,
                        to: tx.to ? tx.to : '',
                        value: tx.value ? tx.value : 0,
                        data: tx.data,
                    });
                    tx.gas = gas;
                }
                if (!tx.nonce) {
                    tx.nonce = utils.newNonce();
                }
                const clause = {
                    value: tx.value || 0,
                    to: tx.to || null,
                    data: tx.data,
                };
                const body = {
                    chainTag: utils.validNumberOrDefault(tx.chainTag, 0),
                    blockRef: tx.blockRef,
                    gas: tx.gas,
                    expiration: utils.validNumberOrDefault(tx.expiration, utils.params.defaultExpiration),
                    gasPriceCoef: utils.validNumberOrDefault(tx.gasPriceCoef, utils.params.defaultGasPriceCoef),
                    dependsOn: !tx.dependsOn ? null : tx.dependsOn,
                    nonce: typeof tx.nonce === 'string' ? utils.toPrefixedHex(tx.nonce) : tx.nonce,
                    clauses: [clause],
                };
                debug('body: %O', body);
                const ThorTx = new thor_devkit_1.Transaction(body);
                const priKey = Buffer.from(utils.sanitizeHex(privateKey), 'hex');
                const signingHash = thor_devkit_1.cry.blake2b256(ThorTx.encode());
                ThorTx.signature = thor_devkit_1.cry.secp256k1.sign(signingHash, priKey);
                const result = {
                    rawTransaction: utils.toPrefixedHex(ThorTx.encode().toString('hex')),
                    messageHash: signingHash,
                };
                return result;
            });
        };
        // for supporting both callback and promise
        if (callback instanceof Function) {
            sign(ethTx).then((ret) => {
                return callback(null, ret);
            }).catch((e) => {
                return callback(e);
            });
        }
        else {
            return sign(ethTx);
        }
    };
    web3.eth.accounts.recoverTransaction = function recoverTransaction(encodedRawTx) {
        const decoded = thor_devkit_1.Transaction.decode(Buffer.from(utils.sanitizeHex(encodedRawTx), 'hex'));
        return decoded.origin;
    };
    web3.eth.accounts.hashMessage = function hashMessage(data) {
        const message = web3Utils.isHexStrict(data) ? web3Utils.hexToBytes(data) : data;
        const messageBuffer = Buffer.from(message);
        const prefix = '\u0019VeChain Signed Message:\n' + message.length.toString();
        const prefixBuffer = Buffer.from(prefix);
        const prefixedMessage = Buffer.concat([prefixBuffer, messageBuffer]);
        return utils.toPrefixedHex(thor_devkit_1.cry.blake2b256(prefixedMessage).toString('hex'));
    };
    web3.eth.accounts.sign = function sign(data, privateKey) {
        const hash = this.hashMessage(data);
        const hashBuffer = Buffer.from(utils.sanitizeHex(hash), 'hex');
        const privateKeyBuffer = Buffer.from(utils.sanitizeHex(privateKey), 'hex');
        const signature = thor_devkit_1.cry.secp256k1.sign(hashBuffer, privateKeyBuffer).toString('hex');
        return {
            message: data,
            messageHash: utils.toPrefixedHex(hash),
            signature: utils.toPrefixedHex(signature),
        };
    };
    web3.eth.accounts.recover = function recover(message, signature, preFixed) {
        if (utils.isObject(message)) {
            return this.recover(message.messageHash, message.signature, true);
        }
        if (!preFixed) {
            message = this.hashMessage(message);
        }
        const hexBuffer = Buffer.from(utils.sanitizeHex(message), 'hex');
        const signatureBuffer = Buffer.from(utils.sanitizeHex(signature), 'hex');
        const pubKey = thor_devkit_1.cry.secp256k1.recover(hexBuffer, signatureBuffer);
        const address = thor_devkit_1.cry.publicKeyToAddress(pubKey);
        return utils.toPrefixedHex(address.toString('hex'));
    };
};
exports.extendAccounts = extendAccounts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXh0ZW5kL2FjY291bnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQTs7Ozs7Ozs7Ozs7O0FBRVosTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQy9DLDZDQUE4QztBQUU5QyxrQ0FBaUM7QUFFakMsTUFBTSxjQUFjLEdBQUcsVUFBUyxJQUFTO0lBRXJDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7SUFDNUIsMkRBQTJEO0lBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxTQUFTLGVBQWUsQ0FBQyxLQUFxQixFQUFFLFVBQWtCLEVBQUUsUUFBa0I7UUFDdEgsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRTlCLE1BQU0sSUFBSSxHQUFHLFVBQWUsRUFBa0I7O2dCQUMxQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtvQkFDZCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUE7b0JBQzdDLElBQUksUUFBUSxFQUFFO3dCQUNWLEVBQUUsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO3FCQUN6Qjt5QkFBTTt3QkFDSCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUE7cUJBQzVDO2lCQUNKO2dCQUNELElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO29CQUNkLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtvQkFDN0MsSUFBSSxRQUFRLEVBQUU7d0JBQ1YsRUFBRSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7cUJBQ3pCO3lCQUFNO3dCQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsd0JB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