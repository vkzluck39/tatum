'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendContracts = void 0;
const debug = require('debug')('thor:injector');
const Subscription = require('web3-core-subscriptions').subscription;
const utils = require("../utils");
const formatters_1 = require("./formatters");
const extendContracts = function (web3) {
    const _encodeEventABI = web3.eth.Contract.prototype._encodeEventABI;
    web3.eth.Contract.prototype._encodeEventABI = function (event, options) {
        debug('_encodeEventABI');
        const result = _encodeEventABI.call(this, event, options);
        if (options.options) {
            result.options = options.options;
        }
        if (options.range) {
            result.range = options.range;
        }
        if (options.order) {
            result.order = options.order;
        }
        return result;
    };
    web3.eth.Contract.prototype._on = function () {
        debug('_on');
        // keeps the code from web3
        const subOptions = this._generateEventOptions.apply(this, arguments);
        // prevent the event "newListener" and "removeListener" from being overwritten
        this._checkListener('newListener', subOptions.event.name, subOptions.callback);
        this._checkListener('removeListener', subOptions.event.name, subOptions.callback);
        // TODO check if listener already exists? and reuse subscription if options are the same.
        // create new subscription
        /* changes from web3 starts the following
         */
        // subscription options in thor doesn't support array as topic filter object
        const filterOptions = {
            address: subOptions.params.address,
        };
        if (subOptions.params.fromBlock) {
            filterOptions.pos = utils.validBytes32OrError(subOptions.params.fromBlock, '[thorify] fromBlock must be blockID');
        }
        debug('Contract filter option: %O', filterOptions);
        if (subOptions.params.topics) {
            for (const [index, value] of subOptions.params.topics.entries()) {
                if (value === null) {
                    continue;
                }
                if (typeof value === 'string') {
                    filterOptions['t' + index] = value;
                }
                else {
                    throw new Error('[thorify] Array filter option is not supported in thor, must be null or bytes32 string');
                }
            }
        }
        const decodeEventABI = this._decodeEventABI.bind(subOptions.event);
        const subscription = new Subscription({
            subscription: {
                params: 1,
                inputFormatter: [formatters_1.inputLogFilterFormatter],
                subscriptionHandler(subscriptionMsg) {
                    if (subscriptionMsg.error) {
                        this.emit('error', subscriptionMsg.error);
                        // web3-core-subscriptions/subscription sets a default value for this.callback
                        this.callback(subscriptionMsg.error, null, this);
                    }
                    else {
                        const result = decodeEventABI(subscriptionMsg.data);
                        if (result.removed) {
                            this.emit('changed', result);
                        }
                        else {
                            this.emit('data', result);
                        }
                        // web3-core-subscriptions/subscription sets a default value for this.callback
                        this.callback(null, result, this);
                    }
                },
            },
            type: 'eth',
            requestManager: this._requestManager,
        });
        subscription.subscribe('logs', filterOptions, subOptions.callback || function () { });
        return subscription;
    };
};
exports.extendContracts = extendContracts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4dGVuZC9jb250cmFjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOzs7QUFDWixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUE7QUFDL0MsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUMsWUFBWSxDQUFBO0FBQ3BFLGtDQUFpQztBQUVqQyw2Q0FBc0Q7QUFFdEQsTUFBTSxlQUFlLEdBQUcsVUFBUyxJQUFTO0lBQ3RDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUE7SUFDbkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxVQUFTLEtBQVUsRUFBRSxPQUFZO1FBQzNFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUN6RCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDakIsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFBO1NBQ25DO1FBQ0QsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2YsTUFBTSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFBO1NBQy9CO1FBQ0QsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2YsTUFBTSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFBO1NBQy9CO1FBQ0QsT0FBTyxNQUFNLENBQUE7SUFDakIsQ0FBQyxDQUFBO0lBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FB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